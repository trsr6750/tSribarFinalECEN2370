
tSribarFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008698  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08008844  08008844  00009844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a32c  0800a32c  0000c078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a32c  0800a32c  0000b32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a334  0800a334  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a334  0800a334  0000b334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a338  0800a338  0000b338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a33c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c078  2**0
                  CONTENTS
 10 .bss          00025ec4  20000078  20000078  0000c078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025f3c  20025f3c  0000c078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001590e  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003907  00000000  00000000  000219b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  000252c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001148  00000000  00000000  00026948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c30  00000000  00000000  00027a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b96a  00000000  00000000  0004f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3eec  00000000  00000000  0006b02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ef16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006014  00000000  00000000  0014ef5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00154f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000078 	.word	0x20000078
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800882c 	.word	0x0800882c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000007c 	.word	0x2000007c
 80001e8:	0800882c 	.word	0x0800882c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	@ (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	db12      	blt.n	8000550 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	f003 021f 	and.w	r2, r3, #31
 8000530:	490a      	ldr	r1, [pc, #40]	@ (800055c <__NVIC_DisableIRQ+0x44>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	095b      	lsrs	r3, r3, #5
 8000538:	2001      	movs	r0, #1
 800053a:	fa00 f202 	lsl.w	r2, r0, r2
 800053e:	3320      	adds	r3, #32
 8000540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
}
 8000548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054a:	f3bf 8f6f 	isb	sy
}
 800054e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	e000e100 	.word	0xe000e100

08000560 <ApplicationInit>:
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS
static uint32_t GameTimeOveflows = 0;

void ApplicationInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000564:	f004 fc1e 	bl	8004da4 <initialise_monitor_handles>
	LTCD__Init();
 8000568:	f000 fbee 	bl	8000d48 <LTCD__Init>
    LTCD_Layer_Init(0);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fbab 	bl	8000cc8 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_BLACK);
 8000572:	2100      	movs	r1, #0
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fcef 	bl	8000f58 <LCD_Clear>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800057a:	f001 f9ad 	bl	80018d8 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <ApplicationInit+0x40>)
 8000580:	2201      	movs	r2, #1
 8000582:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
	RNG_init();
 8000584:	f001 f9c0 	bl	8001908 <RNG_init>
	Game_init();
 8000588:	f001 fb42 	bl	8001c10 <Game_init>
	Button_Init_InterruptMode();
 800058c:	f000 fa1c 	bl	80009c8 <Button_Init_InterruptMode>
	Timer_Config(2);
 8000590:	2002      	movs	r0, #2
 8000592:	f001 fa03 	bl	800199c <Timer_Config>
	Timer_Config(3);
 8000596:	2003      	movs	r0, #3
 8000598:	f001 fa00 	bl	800199c <Timer_Config>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000094 	.word	0x20000094

080005a4 <startTimers>:
void startTimers(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	Timer_Start(2);
 80005a8:	2002      	movs	r0, #2
 80005aa:	f001 fa9b 	bl	8001ae4 <Timer_Start>
	Timer_Start(3);
 80005ae:	2003      	movs	r0, #3
 80005b0:	f001 fa98 	bl	8001ae4 <Timer_Start>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <stopTimers>:
void stopTimers(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	Timer_Pause(2);
 80005bc:	2002      	movs	r0, #2
 80005be:	f001 fa47 	bl	8001a50 <Timer_Pause>
	Timer_Pause(3);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f001 fa44 	bl	8001a50 <Timer_Pause>
	Timer_Reset(2);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f001 fab1 	bl	8001b30 <Timer_Reset>
	Timer_Reset(3);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f001 faae 	bl	8001b30 <Timer_Reset>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <Display_Play_Screen>:
void LCD_Visual_Demo(void)
{
	visualDemo();
}
void Display_Play_Screen(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	LCD_Draw_Play_Icon();
 80005dc:	f000 ffe4 	bl	80015a8 <LCD_Draw_Play_Icon>
	LCD_Draw_Homescreen_Blocks();
 80005e0:	f001 f83e 	bl	8001660 <LCD_Draw_Homescreen_Blocks>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <Display_Game_Bckrnd>:
void Display_Game_Bckrnd(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	LCD_Draw_Board_Background();
 80005ec:	f001 f8f2 	bl	80017d4 <LCD_Draw_Board_Background>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Display_Game_Time>:
void Display_Game_Time(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
	uint32_t ticks = Timer_Get_Value(tim2);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f001 fab6 	bl	8001b6c <Timer_Get_Value>
 8000600:	60f8      	str	r0, [r7, #12]
	uint32_t min = ticks/TIM2CountsPerMin;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4a16      	ldr	r2, [pc, #88]	@ (8000660 <Display_Game_Time+0x6c>)
 8000606:	fba2 2303 	umull	r2, r3, r2, r3
 800060a:	0bdb      	lsrs	r3, r3, #15
 800060c:	60bb      	str	r3, [r7, #8]
	uint8_t sec = (ticks/TIM2CountsPerSec)%60;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <Display_Game_Time+0x70>)
 8000612:	fba2 2303 	umull	r2, r3, r2, r3
 8000616:	09d9      	lsrs	r1, r3, #7
 8000618:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <Display_Game_Time+0x74>)
 800061a:	fba3 2301 	umull	r2, r3, r3, r1
 800061e:	095a      	lsrs	r2, r3, #5
 8000620:	4613      	mov	r3, r2
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	1aca      	subs	r2, r1, r3
 800062a:	4613      	mov	r3, r2
 800062c:	71fb      	strb	r3, [r7, #7]
	uint8_t ms = (ticks/TIM2CountsPer100thSec)%100;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <Display_Game_Time+0x78>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	091a      	lsrs	r2, r3, #4
 8000638:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <Display_Game_Time+0x7c>)
 800063a:	fba3 1302 	umull	r1, r3, r3, r2
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2164      	movs	r1, #100	@ 0x64
 8000642:	fb01 f303 	mul.w	r3, r1, r3
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	71bb      	strb	r3, [r7, #6]
	LCD_Draw_Game_Time(min,sec,ms);
 800064a:	79ba      	ldrb	r2, [r7, #6]
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	4619      	mov	r1, r3
 8000650:	68b8      	ldr	r0, [r7, #8]
 8000652:	f000 fd8f 	bl	8001174 <LCD_Draw_Game_Time>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	45e7b273 	.word	0x45e7b273
 8000664:	10624dd3 	.word	0x10624dd3
 8000668:	88888889 	.word	0x88888889
 800066c:	cccccccd 	.word	0xcccccccd
 8000670:	51eb851f 	.word	0x51eb851f

08000674 <Clear_Game_Time>:
void Clear_Game_Time(){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	LCD_Clear_Game_Time();
 8000678:	f000 fe14 	bl	80012a4 <LCD_Clear_Game_Time>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <Check_Play_Pressed>:
			printf("Not Pressed\n\n");
			LCD_Clear(0, LCD_COLOR_GREEN);
		}
	}
}
bool Check_Play_Pressed(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	return (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed);
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <Check_Play_Pressed+0x1c>)
 8000686:	f001 f932 	bl	80018ee <returnTouchStateAndLocation>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf0c      	ite	eq
 8000690:	2301      	moveq	r3, #1
 8000692:	2300      	movne	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000094 	.word	0x20000094

080006a0 <Clear_LCD_Screen>:
void Clear_LCD_Screen(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLACK);
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 fc56 	bl	8000f58 <LCD_Clear>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <Display_Current_Square>:
void Display_Current_Square(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t xCoordinate = Game_get_Xcord();
 80006b6:	f002 ff61 	bl	800357c <Game_get_Xcord>
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t yCoordinate = Game_get_Ycord();
 80006be:	f002 ff69 	bl	8003594 <Game_get_Ycord>
 80006c2:	4603      	mov	r3, r0
 80006c4:	71bb      	strb	r3, [r7, #6]
	Game_Block *CurrentBlock = Game_get_Current_Block();
 80006c6:	f002 ff71 	bl	80035ac <Game_get_Current_Block>
 80006ca:	6038      	str	r0, [r7, #0]
	LCD_Update_Block_Location(xCoordinate,yCoordinate,CurrentBlock->Shape,LCD_COLOR_WHITE);
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	79b9      	ldrb	r1, [r7, #6]
 80006d0:	79f8      	ldrb	r0, [r7, #7]
 80006d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006d6:	f001 f8a2 	bl	800181e <LCD_Update_Block_Location>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <Display_Current_GameState>:
void Display_Current_GameState(){
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b084      	sub	sp, #16
 80006e6:	af00      	add	r7, sp, #0
	uint16_t sideLength=15;
 80006e8:	230f      	movs	r3, #15
 80006ea:	80fb      	strh	r3, [r7, #6]
	for(int y = 0; y<20;y++){
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e044      	b.n	800077c <Display_Current_GameState+0x9a>
		for(int x = 0; x<10; x++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e03b      	b.n	8000770 <Display_Current_GameState+0x8e>
			if(Game_get_State_At(x,y)){
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f002 ff5e 	bl	80035c4 <Game_get_State_At>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d017      	beq.n	800073e <Display_Current_GameState+0x5c>
				LCD_Draw_Square((sideLength*x)+x+40,(sideLength*y)+y,sideLength,LCD_COLOR_WHITE);
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	3301      	adds	r3, #1
 8000712:	b29a      	uxth	r2, r3
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	b29b      	uxth	r3, r3
 8000718:	fb12 f303 	smulbb	r3, r2, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	3328      	adds	r3, #40	@ 0x28
 8000720:	b298      	uxth	r0, r3
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	3301      	adds	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	b29b      	uxth	r3, r3
 800072c:	fb12 f303 	smulbb	r3, r2, r3
 8000730:	b299      	uxth	r1, r3
 8000732:	88fa      	ldrh	r2, [r7, #6]
 8000734:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000738:	f000 fbd0 	bl	8000edc <LCD_Draw_Square>
 800073c:	e015      	b.n	800076a <Display_Current_GameState+0x88>
			}
			else{
				LCD_Draw_Square((sideLength*x)+x+40,(sideLength*y)+y,sideLength,LCD_COLOR_BLACK);
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	3301      	adds	r3, #1
 8000742:	b29a      	uxth	r2, r3
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	b29b      	uxth	r3, r3
 8000748:	fb12 f303 	smulbb	r3, r2, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	3328      	adds	r3, #40	@ 0x28
 8000750:	b298      	uxth	r0, r3
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3301      	adds	r3, #1
 8000756:	b29a      	uxth	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	b29b      	uxth	r3, r3
 800075c:	fb12 f303 	smulbb	r3, r2, r3
 8000760:	b299      	uxth	r1, r3
 8000762:	88fa      	ldrh	r2, [r7, #6]
 8000764:	2300      	movs	r3, #0
 8000766:	f000 fbb9 	bl	8000edc <LCD_Draw_Square>
		for(int x = 0; x<10; x++){
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3301      	adds	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b09      	cmp	r3, #9
 8000774:	ddc0      	ble.n	80006f8 <Display_Current_GameState+0x16>
	for(int y = 0; y<20;y++){
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	3301      	adds	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b13      	cmp	r3, #19
 8000780:	ddb7      	ble.n	80006f2 <Display_Current_GameState+0x10>
			}
		}
	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <Erase_Current_Square>:
void Erase_Current_Square(){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	uint8_t xCoordinate = Game_get_Xcord();
 8000792:	f002 fef3 	bl	800357c <Game_get_Xcord>
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	uint8_t yCoordinate = Game_get_Ycord();
 800079a:	f002 fefb 	bl	8003594 <Game_get_Ycord>
 800079e:	4603      	mov	r3, r0
 80007a0:	71bb      	strb	r3, [r7, #6]
	Game_Block *CurrentBlock = Game_get_Current_Block();
 80007a2:	f002 ff03 	bl	80035ac <Game_get_Current_Block>
 80007a6:	6038      	str	r0, [r7, #0]
	LCD_Update_Block_Location(xCoordinate,yCoordinate,CurrentBlock->Shape,LCD_COLOR_BLACK);
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	79b9      	ldrb	r1, [r7, #6]
 80007ac:	79f8      	ldrb	r0, [r7, #7]
 80007ae:	2300      	movs	r3, #0
 80007b0:	f001 f835 	bl	800181e <LCD_Update_Block_Location>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <Pull_Touch_Input>:
void Pull_Touch_Input(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	if(returnTouchStateAndLocation(&StaticTouchData)==STMPE811_State_Pressed){//need to add masking for interrupt
 80007c2:	481a      	ldr	r0, [pc, #104]	@ (800082c <Pull_Touch_Input+0x70>)
 80007c4:	f001 f893 	bl	80018ee <returnTouchStateAndLocation>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d12a      	bne.n	8000824 <Pull_Touch_Input+0x68>
		TIMR_Mask_IRQ(INTERRUPT_TIM3);
 80007ce:	4818      	ldr	r0, [pc, #96]	@ (8000830 <Pull_Touch_Input+0x74>)
 80007d0:	f000 f992 	bl	8000af8 <TIMR_Mask_IRQ>
		Erase_Current_Square();
 80007d4:	f7ff ffda 	bl	800078c <Erase_Current_Square>
		uint16_t xCords = StaticTouchData.x;
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <Pull_Touch_Input+0x70>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	80fb      	strh	r3, [r7, #6]
		uint16_t yCords = StaticTouchData.y;
 80007de:	4b13      	ldr	r3, [pc, #76]	@ (800082c <Pull_Touch_Input+0x70>)
 80007e0:	885b      	ldrh	r3, [r3, #2]
 80007e2:	80bb      	strh	r3, [r7, #4]
		if(yCords>(320-64)){
 80007e4:	88bb      	ldrh	r3, [r7, #4]
 80007e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80007ea:	d902      	bls.n	80007f2 <Pull_Touch_Input+0x36>
			Game_Rotate_Clock();
 80007ec:	f002 fcac 	bl	8003148 <Game_Rotate_Clock>
 80007f0:	e010      	b.n	8000814 <Pull_Touch_Input+0x58>
		}
		else if(yCords<64){
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80007f6:	d802      	bhi.n	80007fe <Pull_Touch_Input+0x42>
			Game_Rotate_Counter_Clock();
 80007f8:	f002 fcc4 	bl	8003184 <Game_Rotate_Counter_Clock>
 80007fc:	e00a      	b.n	8000814 <Pull_Touch_Input+0x58>
		}
		else if(xCords>120){
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	2b78      	cmp	r3, #120	@ 0x78
 8000802:	d902      	bls.n	800080a <Pull_Touch_Input+0x4e>
			Game_Move_Right();
 8000804:	f002 fc84 	bl	8003110 <Game_Move_Right>
 8000808:	e004      	b.n	8000814 <Pull_Touch_Input+0x58>
		}
		else if(xCords<120){
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2b77      	cmp	r3, #119	@ 0x77
 800080e:	d801      	bhi.n	8000814 <Pull_Touch_Input+0x58>
			Game_Move_Left();
 8000810:	f002 fc62 	bl	80030d8 <Game_Move_Left>
		}
		Display_Current_Square();
 8000814:	f7ff ff4c 	bl	80006b0 <Display_Current_Square>
		TIMR_Unmask_IRQ(INTERRUPT_TIM3);
 8000818:	4805      	ldr	r0, [pc, #20]	@ (8000830 <Pull_Touch_Input+0x74>)
 800081a:	f000 f97d 	bl	8000b18 <TIMR_Unmask_IRQ>
		HAL_Delay(40);
 800081e:	2028      	movs	r0, #40	@ 0x28
 8000820:	f004 fbac 	bl	8004f7c <HAL_Delay>
	}
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000094 	.word	0x20000094
 8000830:	40000400 	.word	0x40000400

08000834 <Check_Alive>:
bool Check_Alive(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	return Game_Check_Alive();
 8000838:	f002 fe94 	bl	8003564 <Game_Check_Alive>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}

08000842 <New_Game>:
void New_Game(){
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
	Game_Start();
 8000846:	f002 fbdd 	bl	8003004 <Game_Start>
	__NVIC_EnableIRQ(EXTI0_IRQn);
 800084a:	2006      	movs	r0, #6
 800084c:	f7ff fe46 	bl	80004dc <__NVIC_EnableIRQ>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <End_Game>:
void End_Game(){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	__NVIC_DisableIRQ(EXTI0_IRQn);
 800085a:	2006      	movs	r0, #6
 800085c:	f7ff fe5c 	bl	8000518 <__NVIC_DisableIRQ>
	LCD_Draw_Game_Over();
 8000860:	f000 fc52 	bl	8001108 <LCD_Draw_Game_Over>
	uint16_t singles = Game_get_Single_Clears();
 8000864:	f002 fec8 	bl	80035f8 <Game_get_Single_Clears>
 8000868:	4603      	mov	r3, r0
 800086a:	80fb      	strh	r3, [r7, #6]
	uint16_t dooubles = Game_get_Double_Clears();
 800086c:	f002 fed0 	bl	8003610 <Game_get_Double_Clears>
 8000870:	4603      	mov	r3, r0
 8000872:	80bb      	strh	r3, [r7, #4]
	uint16_t tripples = Game_get_Tripple_Clears();
 8000874:	f002 fed8 	bl	8003628 <Game_get_Tripple_Clears>
 8000878:	4603      	mov	r3, r0
 800087a:	807b      	strh	r3, [r7, #2]
	uint16_t tetri = Game_get_Tetris_Clears();
 800087c:	f002 fee0 	bl	8003640 <Game_get_Tetris_Clears>
 8000880:	4603      	mov	r3, r0
 8000882:	803b      	strh	r3, [r7, #0]
	LCD_Draw_Lines_Cleared(singles,dooubles,tripples,tetri);
 8000884:	883b      	ldrh	r3, [r7, #0]
 8000886:	887a      	ldrh	r2, [r7, #2]
 8000888:	88b9      	ldrh	r1, [r7, #4]
 800088a:	88f8      	ldrh	r0, [r7, #6]
 800088c:	f000 fd26 	bl	80012dc <LCD_Draw_Lines_Cleared>
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <EXTI0_IRQHandler>:

}
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void EXTI0_IRQHandler(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	//IRQ_Disable(EXTI0_IRQ_NUMBER);
	__NVIC_DisableIRQ(EXTI0_IRQn);
 800089c:	2006      	movs	r0, #6
 800089e:	f7ff fe3b 	bl	8000518 <__NVIC_DisableIRQ>
	Erase_Current_Square();
 80008a2:	f7ff ff73 	bl	800078c <Erase_Current_Square>
	while(Game_Drop_Block()){
 80008a6:	e003      	b.n	80008b0 <EXTI0_IRQHandler+0x18>
		Display_Current_Square();
 80008a8:	f7ff ff02 	bl	80006b0 <Display_Current_Square>
		Erase_Current_Square();
 80008ac:	f7ff ff6e 	bl	800078c <Erase_Current_Square>
	while(Game_Drop_Block()){
 80008b0:	f002 fc86 	bl	80031c0 <Game_Drop_Block>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f6      	bne.n	80008a8 <EXTI0_IRQHandler+0x10>
	}
	Game_Find_Clear_Lines();
 80008ba:	f002 fd3b 	bl	8003334 <Game_Find_Clear_Lines>
	Display_Current_GameState();
 80008be:	f7ff ff10 	bl	80006e2 <Display_Current_GameState>
	Game_Spawn_Block();
 80008c2:	f002 fce7 	bl	8003294 <Game_Spawn_Block>
	Display_Current_Square();
 80008c6:	f7ff fef3 	bl	80006b0 <Display_Current_Square>
	EXTI_Clear_Pending(IRQ_BUTTON_PIN_NUM);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f8ec 	bl	8000aa8 <EXTI_Clear_Pending>
	//IRQ_Enable(EXTI0_IRQ_NUMBER);
	__NVIC_EnableIRQ(EXTI0_IRQn);
 80008d0:	2006      	movs	r0, #6
 80008d2:	f7ff fe03 	bl	80004dc <__NVIC_EnableIRQ>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	IRQ_Disable(TIM2_IRQ_NUMBER);
 80008e0:	201c      	movs	r0, #28
 80008e2:	f000 f8bb 	bl	8000a5c <IRQ_Disable>
	GameTimeOveflows++;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <TIM2_IRQHandler+0x28>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <TIM2_IRQHandler+0x28>)
 80008ee:	6013      	str	r3, [r2, #0]
	TIMR_Clear_Pending(INTERRUPT_TIM2);
 80008f0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80008f4:	f000 f8f0 	bl	8000ad8 <TIMR_Clear_Pending>
	IRQ_Enable(TIM2_IRQ_NUMBER);
 80008f8:	201c      	movs	r0, #28
 80008fa:	f000 f887 	bl	8000a0c <IRQ_Enable>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000009c 	.word	0x2000009c

08000908 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
//	IRQ_Disable(TIM3_IRQ_NUMBER);
	__NVIC_DisableIRQ(TIM2_IRQn);
 800090c:	201c      	movs	r0, #28
 800090e:	f7ff fe03 	bl	8000518 <__NVIC_DisableIRQ>
	Erase_Current_Square();
 8000912:	f7ff ff3b 	bl	800078c <Erase_Current_Square>
	if(!Game_Drop_Block()){
 8000916:	f002 fc53 	bl	80031c0 <Game_Drop_Block>
 800091a:	4603      	mov	r3, r0
 800091c:	f083 0301 	eor.w	r3, r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <TIM3_IRQHandler+0x2a>
		Game_Find_Clear_Lines();
 8000926:	f002 fd05 	bl	8003334 <Game_Find_Clear_Lines>
		Display_Current_GameState();
 800092a:	f7ff feda 	bl	80006e2 <Display_Current_GameState>
		Game_Spawn_Block();
 800092e:	f002 fcb1 	bl	8003294 <Game_Spawn_Block>
	}
	Display_Current_Square();
 8000932:	f7ff febd 	bl	80006b0 <Display_Current_Square>
	TIMR_Clear_Pending(INTERRUPT_TIM3);
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <TIM3_IRQHandler+0x40>)
 8000938:	f000 f8ce 	bl	8000ad8 <TIMR_Clear_Pending>
//	IRQ_Enable(TIM3_IRQ_NUMBER);
	__NVIC_EnableIRQ(TIM2_IRQn);
 800093c:	201c      	movs	r0, #28
 800093e:	f7ff fdcd 	bl	80004dc <__NVIC_EnableIRQ>
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40000400 	.word	0x40000400

0800094c <__NVIC_DisableIRQ>:
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	db12      	blt.n	8000984 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 021f 	and.w	r2, r3, #31
 8000964:	490a      	ldr	r1, [pc, #40]	@ (8000990 <__NVIC_DisableIRQ+0x44>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	095b      	lsrs	r3, r3, #5
 800096c:	2001      	movs	r0, #1
 800096e:	fa00 f202 	lsl.w	r2, r0, r2
 8000972:	3320      	adds	r3, #32
 8000974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000978:	f3bf 8f4f 	dsb	sy
}
 800097c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800097e:	f3bf 8f6f 	isb	sy
}
 8000982:	bf00      	nop
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000e100 	.word	0xe000e100

08000994 <Clock_Init>:
	ButtonConfig.Pull = GPIO_PULLUP; //could be no pull
	ButtonConfig.Alternate = DISABLE;
	Clock_Init();
	HAL_GPIO_Init(ButtonGPIO, &ButtonConfig);
}
void Clock_Init(){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <Clock_Init+0x30>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <Clock_Init+0x30>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <Clock_Init+0x30>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <Button_Init_InterruptMode>:
uint8_t getButtonCurrentState(){
	//return GPIO_ReadFromInputPin(ButtonGPIO, ButtonPinNumber);
	return DISABLE;
}
void Button_Init_InterruptMode(){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef ButtonConfig;
	ButtonConfig.Pin = ButtonPinNumber;
 80009ce:	2301      	movs	r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
	ButtonConfig.Mode = GPIO_MODE_IT_RISING;
 80009d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009d6:	60bb      	str	r3, [r7, #8]
	ButtonConfig.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
	ButtonConfig.Pull = GPIO_NOPULL; //could be no pull
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
	ButtonConfig.Alternate = DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
	Clock_Init();
 80009e4:	f7ff ffd6 	bl	8000994 <Clock_Init>
	HAL_GPIO_Init(ButtonGPIO, &ButtonConfig);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <Button_Init_InterruptMode+0x40>)
 80009ee:	f004 fbcf 	bl	8005190 <HAL_GPIO_Init>
	IRQ_Enable(EXTI0_IRQ_NUMBER);
 80009f2:	2006      	movs	r0, #6
 80009f4:	f000 f80a 	bl	8000a0c <IRQ_Enable>
	__NVIC_DisableIRQ(EXTI0_IRQn);
 80009f8:	2006      	movs	r0, #6
 80009fa:	f7ff ffa7 	bl	800094c <__NVIC_DisableIRQ>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020000 	.word	0x40020000

08000a0c <IRQ_Enable>:
 *      Author: trevo
 */

#include <InterruptControl.h>

void IRQ_Enable (uint8_t IRQ_number){
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	int IRQBitOffset = IRQ_number%NVIC_Bits_Per_Register;
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f003 031f 	and.w	r3, r3, #31
 8000a1c:	60fb      	str	r3, [r7, #12]
	int NIVCregisterNumber = IRQ_number/NVIC_Bits_Per_Register;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	095b      	lsrs	r3, r3, #5
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	60bb      	str	r3, [r7, #8]
	*(NVIC_ISER0+NIVCregisterNumber) |= (0x1<<IRQBitOffset);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a2e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000a46:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	601a      	str	r2, [r3, #0]
	return;
 8000a4e:	bf00      	nop

	//uint32_t * NVIC_ISERx = NVIC_ISER0 + (Pointer_Addition_32_Bit_Offest*(IRQ_number/NVIC_Bits_Per_Register));
	//NVIC_ISERx |= (0x1<<(IRQ_number%NVIC_Bits_Per_Register));
}
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <IRQ_Disable>:
void IRQ_Disable (uint8_t IRQ_number){
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	//uint32_t * NVIC_ICERx = NVIC_ICER0 + Pointer_Addition_32_Bit_Offest*IRQ_number/NVIC_Bits_Per_Register;
	//NVIC_ICERx |= (0x1<<(IRQ_number%NVIC_Bits_Per_Register));
	int IRQBitOffset = IRQ_number%NVIC_Bits_Per_Register;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	60fb      	str	r3, [r7, #12]
	int NIVCregisterNumber = IRQ_number/NVIC_Bits_Per_Register;
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	095b      	lsrs	r3, r3, #5
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	60bb      	str	r3, [r7, #8]
	*(NVIC_ICER0+NIVCregisterNumber) |= (0x1<<IRQBitOffset);
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	009a      	lsls	r2, r3, #2
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <IRQ_Disable+0x48>)
 8000a7c:	4413      	add	r3, r2
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	2101      	movs	r1, #1
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	0099      	lsls	r1, r3, #2
 8000a8e:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <IRQ_Disable+0x48>)
 8000a90:	440b      	add	r3, r1
 8000a92:	4302      	orrs	r2, r0
 8000a94:	601a      	str	r2, [r3, #0]
	return;
 8000a96:	bf00      	nop
}
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e180 	.word	0xe000e180

08000aa8 <EXTI_Clear_Pending>:
	int IRQBitOffset = IRQ_number%NVIC_Bits_Per_Register;
	int NIVCregisterNumber = IRQ_number/NVIC_Bits_Per_Register;
	*(NVIC_ICPR0+NIVCregisterNumber) |= (0x1<<IRQBitOffset);
	return;
}
void EXTI_Clear_Pending (uint8_t pinNumber){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	INTERRUPT_EXTI->PR |= (0x1<<pinNumber);
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <EXTI_Clear_Pending+0x2c>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <EXTI_Clear_Pending+0x2c>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	6153      	str	r3, [r2, #20]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40013c00 	.word	0x40013c00

08000ad8 <TIMR_Clear_Pending>:
void TIMR_Clear_Pending(GPTIMR_RegDef_t * TIMRx){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	TIMRx->INTERRUPT_SR &= ~(0x1);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	f023 0201 	bic.w	r2, r3, #1
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	611a      	str	r2, [r3, #16]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <TIMR_Mask_IRQ>:
void TIMR_Mask_IRQ(GPTIMR_RegDef_t * TIMRx){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	TIMRx->INTERRUPT_DIER &= ~(0x1);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	f023 0201 	bic.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60da      	str	r2, [r3, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <TIMR_Unmask_IRQ>:
void TIMR_Unmask_IRQ(GPTIMR_RegDef_t * TIMRx){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	TIMRx->INTERRUPT_DIER |= (0x1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f043 0201 	orr.w	r2, r3, #1
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60da      	str	r2, [r3, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	4b5a      	ldr	r3, [pc, #360]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a59      	ldr	r2, [pc, #356]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b57      	ldr	r3, [pc, #348]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	4b53      	ldr	r3, [pc, #332]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a52      	ldr	r2, [pc, #328]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b50      	ldr	r3, [pc, #320]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a4b      	ldr	r2, [pc, #300]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b49      	ldr	r3, [pc, #292]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b45      	ldr	r3, [pc, #276]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a44      	ldr	r2, [pc, #272]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b42      	ldr	r3, [pc, #264]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a36      	ldr	r2, [pc, #216]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b34      	ldr	r3, [pc, #208]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a2f      	ldr	r2, [pc, #188]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <LCD_GPIO_Init+0x174>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000c02:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000c06:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000c10:	2302      	movs	r3, #2
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000c14:	230e      	movs	r3, #14
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4824      	ldr	r0, [pc, #144]	@ (8000cb0 <LCD_GPIO_Init+0x178>)
 8000c20:	f004 fab6 	bl	8005190 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c24:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000c28:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4820      	ldr	r0, [pc, #128]	@ (8000cb4 <LCD_GPIO_Init+0x17c>)
 8000c32:	f004 faad 	bl	8005190 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c36:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	481d      	ldr	r0, [pc, #116]	@ (8000cb8 <LCD_GPIO_Init+0x180>)
 8000c44:	f004 faa4 	bl	8005190 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c48:	2348      	movs	r3, #72	@ 0x48
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	481a      	ldr	r0, [pc, #104]	@ (8000cbc <LCD_GPIO_Init+0x184>)
 8000c54:	f004 fa9c 	bl	8005190 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <LCD_GPIO_Init+0x188>)
 8000c66:	f004 fa93 	bl	8005190 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000c6a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000c6e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4813      	ldr	r0, [pc, #76]	@ (8000cc4 <LCD_GPIO_Init+0x18c>)
 8000c78:	f004 fa8a 	bl	8005190 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000c80:	2309      	movs	r3, #9
 8000c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480a      	ldr	r0, [pc, #40]	@ (8000cb4 <LCD_GPIO_Init+0x17c>)
 8000c8c:	f004 fa80 	bl	8005190 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000c90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4809      	ldr	r0, [pc, #36]	@ (8000cc4 <LCD_GPIO_Init+0x18c>)
 8000c9e:	f004 fa77 	bl	8005190 <HAL_GPIO_Init>
}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	@ 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	40021800 	.word	0x40021800

08000cc8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b090      	sub	sp, #64	@ 0x40
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000cd6:	23f0      	movs	r3, #240	@ 0xf0
 8000cd8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000cde:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ce2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000ce8:	23ff      	movs	r3, #255	@ 0xff
 8000cea:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <LTCD_Layer_Init+0x78>)
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000d04:	23f0      	movs	r3, #240	@ 0xf0
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000d08:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <LTCD_Layer_Init+0x7c>)
 8000d2a:	f005 fe73 	bl	8006a14 <HAL_LTDC_ConfigLayer>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000d34:	f000 f9e2 	bl	80010fc <LCD_Error_Handler>
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3740      	adds	r7, #64	@ 0x40
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000017c 	.word	0x2000017c
 8000d44:	200000a0 	.word	0x200000a0

08000d48 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_BLACK);
}

void LTCD__Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000dfc <LTCD__Init+0xb4>)
 8000d50:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000d52:	4b29      	ldr	r3, [pc, #164]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d54:	2209      	movs	r2, #9
 8000d56:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d60:	221d      	movs	r2, #29
 8000d62:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000d64:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d66:	2203      	movs	r2, #3
 8000d68:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d6c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d74:	f240 1243 	movw	r2, #323	@ 0x143
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d7c:	f240 1217 	movw	r2, #279	@ 0x117
 8000d80:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d84:	f240 1247 	movw	r2, #327	@ 0x147
 8000d88:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <LTCD__Init+0xb0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <LTCD__Init+0xb8>)
 8000da4:	2208      	movs	r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <LTCD__Init+0xb8>)
 8000daa:	22c0      	movs	r2, #192	@ 0xc0
 8000dac:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000dae:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <LTCD__Init+0xb8>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000db4:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <LTCD__Init+0xb8>)
 8000db6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000dbc:	4810      	ldr	r0, [pc, #64]	@ (8000e00 <LTCD__Init+0xb8>)
 8000dbe:	f006 fc43 	bl	8007648 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <LTCD__Init+0xb0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <LTCD__Init+0xb0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <LTCD__Init+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <LTCD__Init+0xb0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000dda:	f7ff fead 	bl	8000b38 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <LTCD__Init+0xb0>)
 8000de0:	f005 fd48 	bl	8006874 <HAL_LTDC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000dea:	f000 f987 	bl	80010fc <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000dee:	f002 fc4f 	bl	8003690 <ili9341_Init>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	40016800 	.word	0x40016800
 8000e00:	20000148 	.word	0x20000148

08000e04 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	80bb      	strh	r3, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000e16:	88ba      	ldrh	r2, [r7, #4]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	1a9b      	subs	r3, r3, r2
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	461a      	mov	r2, r3
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	4413      	add	r3, r2
 8000e26:	4905      	ldr	r1, [pc, #20]	@ (8000e3c <LCD_Draw_Pixel+0x38>)
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2000017c 	.word	0x2000017c

08000e40 <LCD_Draw_Vertical_Line>:
        }
    }
}

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4623      	mov	r3, r4
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	4603      	mov	r3, r0
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	460b      	mov	r3, r1
 8000e58:	807b      	strh	r3, [r7, #2]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	81fb      	strh	r3, [r7, #14]
 8000e62:	e00b      	b.n	8000e7c <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000e64:	89fa      	ldrh	r2, [r7, #14]
 8000e66:	88bb      	ldrh	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	883a      	ldrh	r2, [r7, #0]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ffc7 	bl	8000e04 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	81fb      	strh	r3, [r7, #14]
 8000e7c:	89fa      	ldrh	r2, [r7, #14]
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3ef      	bcc.n	8000e64 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}

08000e8e <LCD_Draw_Horizontal_Line>:
void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color){
 8000e8e:	b590      	push	{r4, r7, lr}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4604      	mov	r4, r0
 8000e96:	4608      	mov	r0, r1
 8000e98:	4611      	mov	r1, r2
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4623      	mov	r3, r4
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	80bb      	strh	r3, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	803b      	strh	r3, [r7, #0]
	for (uint16_t i = 0; i < len; i++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	81fb      	strh	r3, [r7, #14]
 8000eb0:	e00b      	b.n	8000eca <LCD_Draw_Horizontal_Line+0x3c>
	{
	   LCD_Draw_Pixel(x+i, y, color);
 8000eb2:	88fa      	ldrh	r2, [r7, #6]
 8000eb4:	89fb      	ldrh	r3, [r7, #14]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	883a      	ldrh	r2, [r7, #0]
 8000ebc:	88b9      	ldrh	r1, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffa0 	bl	8000e04 <LCD_Draw_Pixel>
	for (uint16_t i = 0; i < len; i++)
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	81fb      	strh	r3, [r7, #14]
 8000eca:	89fa      	ldrh	r2, [r7, #14]
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3ef      	bcc.n	8000eb2 <LCD_Draw_Horizontal_Line+0x24>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd90      	pop	{r4, r7, pc}

08000edc <LCD_Draw_Square>:
void LCD_Draw_Square(uint16_t x, uint16_t y, uint16_t side, uint16_t color){
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4623      	mov	r3, r4
 8000eec:	80fb      	strh	r3, [r7, #6]
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80bb      	strh	r3, [r7, #4]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	807b      	strh	r3, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	803b      	strh	r3, [r7, #0]
	LCD_Draw_Vertical_Line(x,y,side,color);
 8000efa:	883b      	ldrh	r3, [r7, #0]
 8000efc:	887a      	ldrh	r2, [r7, #2]
 8000efe:	88b9      	ldrh	r1, [r7, #4]
 8000f00:	88f8      	ldrh	r0, [r7, #6]
 8000f02:	f7ff ff9d 	bl	8000e40 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(x+side,y,side,color);
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	883b      	ldrh	r3, [r7, #0]
 8000f10:	887a      	ldrh	r2, [r7, #2]
 8000f12:	88b9      	ldrh	r1, [r7, #4]
 8000f14:	f7ff ff94 	bl	8000e40 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(x,y,side,color);
 8000f18:	883b      	ldrh	r3, [r7, #0]
 8000f1a:	887a      	ldrh	r2, [r7, #2]
 8000f1c:	88b9      	ldrh	r1, [r7, #4]
 8000f1e:	88f8      	ldrh	r0, [r7, #6]
 8000f20:	f7ff ffb5 	bl	8000e8e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(x,y+side,side,color);
 8000f24:	88ba      	ldrh	r2, [r7, #4]
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	4413      	add	r3, r2
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	883b      	ldrh	r3, [r7, #0]
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	88f8      	ldrh	r0, [r7, #6]
 8000f32:	f7ff ffac 	bl	8000e8e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Pixel(x+side,y+side,color);
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b298      	uxth	r0, r3
 8000f3e:	88ba      	ldrh	r2, [r7, #4]
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	4413      	add	r3, r2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	883a      	ldrh	r2, [r7, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff ff5b 	bl	8000e04 <LCD_Draw_Pixel>
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
	...

08000f58 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10e      	bne.n	8000f8c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	e007      	b.n	8000f84 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000f74:	4908      	ldr	r1, [pc, #32]	@ (8000f98 <LCD_Clear+0x40>)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	88ba      	ldrh	r2, [r7, #4]
 8000f7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000f8a:	d3f3      	bcc.n	8000f74 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	2000017c 	.word	0x2000017c

08000f9c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <LCD_SetTextColor+0x1c>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	8013      	strh	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000000 	.word	0x20000000

08000fbc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <LCD_SetFont+0x1c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000178 	.word	0x20000178

08000fdc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	603a      	str	r2, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e04c      	b.n	8001094 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	e03f      	b.n	8001080 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	4413      	add	r3, r2
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <LCD_Draw_Char+0xd0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	889b      	ldrh	r3, [r3, #4]
 8001012:	4a27      	ldr	r2, [pc, #156]	@ (80010b0 <LCD_Draw_Char+0xd4>)
 8001014:	fba2 2303 	umull	r2, r3, r2, r3
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	b29b      	uxth	r3, r3
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	2280      	movs	r2, #128	@ 0x80
 8001020:	409a      	lsls	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	fa42 f303 	asr.w	r3, r2, r3
 8001028:	400b      	ands	r3, r1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <LCD_Draw_Char+0x5c>
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <LCD_Draw_Char+0xd0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	2b0c      	cmp	r3, #12
 8001036:	d920      	bls.n	800107a <LCD_Draw_Char+0x9e>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	fa42 f303 	asr.w	r3, r2, r3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d104      	bne.n	800105c <LCD_Draw_Char+0x80>
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <LCD_Draw_Char+0xd0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	889b      	ldrh	r3, [r3, #4]
 8001058:	2b0c      	cmp	r3, #12
 800105a:	d80e      	bhi.n	800107a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	b29a      	uxth	r2, r3
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	4413      	add	r3, r2
 8001064:	b298      	uxth	r0, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	b29a      	uxth	r2, r3
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	b29b      	uxth	r3, r3
 8001070:	4a10      	ldr	r2, [pc, #64]	@ (80010b4 <LCD_Draw_Char+0xd8>)
 8001072:	8812      	ldrh	r2, [r2, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fec5 	bl	8000e04 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3301      	adds	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <LCD_Draw_Char+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	889b      	ldrh	r3, [r3, #4]
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4293      	cmp	r3, r2
 800108c:	d3b8      	bcc.n	8001000 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	3301      	adds	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <LCD_Draw_Char+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	88db      	ldrh	r3, [r3, #6]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4293      	cmp	r3, r2
 80010a0:	d3ab      	bcc.n	8000ffa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000178 	.word	0x20000178
 80010b0:	aaaaaaab 	.word	0xaaaaaaab
 80010b4:	20000000 	.word	0x20000000

080010b8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	460b      	mov	r3, r1
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	3b20      	subs	r3, #32
 80010ce:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <LCD_DisplayChar+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <LCD_DisplayChar+0x40>)
 80010da:	6809      	ldr	r1, [r1, #0]
 80010dc:	88c9      	ldrh	r1, [r1, #6]
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	441a      	add	r2, r3
 80010e6:	88b9      	ldrh	r1, [r7, #4]
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff76 	bl	8000fdc <LCD_Draw_Char>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000178 	.word	0x20000178

080010fc <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <LCD_Error_Handler+0x8>

08001108 <LCD_Draw_Game_Over>:
  }
  /* USER CODE END Error_Handler_Debug */
}

//Deimentions of pixels = 240 x 320, mid is 120, 160
void LCD_Draw_Game_Over(){
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_WHITE);
 800110c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001110:	f7ff ff44 	bl	8000f9c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001114:	4816      	ldr	r0, [pc, #88]	@ (8001170 <LCD_Draw_Game_Over+0x68>)
 8001116:	f7ff ff51 	bl	8000fbc <LCD_SetFont>
	LCD_DisplayChar(92,130,'G');
 800111a:	2247      	movs	r2, #71	@ 0x47
 800111c:	2182      	movs	r1, #130	@ 0x82
 800111e:	205c      	movs	r0, #92	@ 0x5c
 8001120:	f7ff ffca 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(107,130,'A');
 8001124:	2241      	movs	r2, #65	@ 0x41
 8001126:	2182      	movs	r1, #130	@ 0x82
 8001128:	206b      	movs	r0, #107	@ 0x6b
 800112a:	f7ff ffc5 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(122,130,'M');
 800112e:	224d      	movs	r2, #77	@ 0x4d
 8001130:	2182      	movs	r1, #130	@ 0x82
 8001132:	207a      	movs	r0, #122	@ 0x7a
 8001134:	f7ff ffc0 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(136,130,'E');
 8001138:	2245      	movs	r2, #69	@ 0x45
 800113a:	2182      	movs	r1, #130	@ 0x82
 800113c:	2088      	movs	r0, #136	@ 0x88
 800113e:	f7ff ffbb 	bl	80010b8 <LCD_DisplayChar>

	LCD_DisplayChar(92,150,'O');
 8001142:	224f      	movs	r2, #79	@ 0x4f
 8001144:	2196      	movs	r1, #150	@ 0x96
 8001146:	205c      	movs	r0, #92	@ 0x5c
 8001148:	f7ff ffb6 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(107,150,'V');
 800114c:	2256      	movs	r2, #86	@ 0x56
 800114e:	2196      	movs	r1, #150	@ 0x96
 8001150:	206b      	movs	r0, #107	@ 0x6b
 8001152:	f7ff ffb1 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(122,150,'E');
 8001156:	2245      	movs	r2, #69	@ 0x45
 8001158:	2196      	movs	r1, #150	@ 0x96
 800115a:	207a      	movs	r0, #122	@ 0x7a
 800115c:	f7ff ffac 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(136,150,'R');
 8001160:	2252      	movs	r2, #82	@ 0x52
 8001162:	2196      	movs	r1, #150	@ 0x96
 8001164:	2088      	movs	r0, #136	@ 0x88
 8001166:	f7ff ffa7 	bl	80010b8 <LCD_DisplayChar>

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000004 	.word	0x20000004

08001174 <LCD_Draw_Game_Time>:
void LCD_Draw_Game_Time(uint32_t min, uint8_t sec, uint8_t ms){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
 8001180:	4613      	mov	r3, r2
 8001182:	70bb      	strb	r3, [r7, #2]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001184:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001188:	f7ff ff08 	bl	8000f9c <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 800118c:	4843      	ldr	r0, [pc, #268]	@ (800129c <LCD_Draw_Game_Time+0x128>)
 800118e:	f7ff ff15 	bl	8000fbc <LCD_SetFont>
	LCD_DisplayChar(4,4,'m');
 8001192:	226d      	movs	r2, #109	@ 0x6d
 8001194:	2104      	movs	r1, #4
 8001196:	2004      	movs	r0, #4
 8001198:	f7ff ff8e 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(12,4,':');
 800119c:	223a      	movs	r2, #58	@ 0x3a
 800119e:	2104      	movs	r1, #4
 80011a0:	200c      	movs	r0, #12
 80011a2:	f7ff ff89 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(22,4,(char)(48+(min/10)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a3d      	ldr	r2, [pc, #244]	@ (80012a0 <LCD_Draw_Game_Time+0x12c>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	08db      	lsrs	r3, r3, #3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	3330      	adds	r3, #48	@ 0x30
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	2104      	movs	r1, #4
 80011ba:	2016      	movs	r0, #22
 80011bc:	f7ff ff7c 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(28,4,(char)(48+(min%10)));
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <LCD_Draw_Game_Time+0x12c>)
 80011c4:	fba3 2301 	umull	r2, r3, r3, r1
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	1aca      	subs	r2, r1, r3
 80011d4:	b2d3      	uxtb	r3, r2
 80011d6:	3330      	adds	r3, #48	@ 0x30
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461a      	mov	r2, r3
 80011dc:	2104      	movs	r1, #4
 80011de:	201c      	movs	r0, #28
 80011e0:	f7ff ff6a 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(6,16,'s');
 80011e4:	2273      	movs	r2, #115	@ 0x73
 80011e6:	2110      	movs	r1, #16
 80011e8:	2006      	movs	r0, #6
 80011ea:	f7ff ff65 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(12,16,':');
 80011ee:	223a      	movs	r2, #58	@ 0x3a
 80011f0:	2110      	movs	r1, #16
 80011f2:	200c      	movs	r0, #12
 80011f4:	f7ff ff60 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(22,16,(char)(48+(sec/10)));
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	4a29      	ldr	r2, [pc, #164]	@ (80012a0 <LCD_Draw_Game_Time+0x12c>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	08db      	lsrs	r3, r3, #3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	3330      	adds	r3, #48	@ 0x30
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	2110      	movs	r1, #16
 800120c:	2016      	movs	r0, #22
 800120e:	f7ff ff53 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(28,16,(char)(48+(sec%10)));
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <LCD_Draw_Game_Time+0x12c>)
 8001216:	fba3 1302 	umull	r1, r3, r3, r2
 800121a:	08d9      	lsrs	r1, r3, #3
 800121c:	460b      	mov	r3, r1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	3330      	adds	r3, #48	@ 0x30
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	2110      	movs	r1, #16
 8001230:	201c      	movs	r0, #28
 8001232:	f7ff ff41 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(4,28,'m');
 8001236:	226d      	movs	r2, #109	@ 0x6d
 8001238:	211c      	movs	r1, #28
 800123a:	2004      	movs	r0, #4
 800123c:	f7ff ff3c 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(12,28,'s');
 8001240:	2273      	movs	r2, #115	@ 0x73
 8001242:	211c      	movs	r1, #28
 8001244:	200c      	movs	r0, #12
 8001246:	f7ff ff37 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(16,28,':');
 800124a:	223a      	movs	r2, #58	@ 0x3a
 800124c:	211c      	movs	r1, #28
 800124e:	2010      	movs	r0, #16
 8001250:	f7ff ff32 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(22,28,(char)(48+(ms/10)));
 8001254:	78bb      	ldrb	r3, [r7, #2]
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <LCD_Draw_Game_Time+0x12c>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	3330      	adds	r3, #48	@ 0x30
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	211c      	movs	r1, #28
 8001268:	2016      	movs	r0, #22
 800126a:	f7ff ff25 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(28,28,(char)(48+(ms%10)));
 800126e:	78ba      	ldrb	r2, [r7, #2]
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <LCD_Draw_Game_Time+0x12c>)
 8001272:	fba3 1302 	umull	r1, r3, r3, r2
 8001276:	08d9      	lsrs	r1, r3, #3
 8001278:	460b      	mov	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	3330      	adds	r3, #48	@ 0x30
 8001286:	b2db      	uxtb	r3, r3
 8001288:	461a      	mov	r2, r3
 800128a:	211c      	movs	r1, #28
 800128c:	201c      	movs	r0, #28
 800128e:	f7ff ff13 	bl	80010b8 <LCD_DisplayChar>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000000c 	.word	0x2000000c
 80012a0:	cccccccd 	.word	0xcccccccd

080012a4 <LCD_Clear_Game_Time>:
void LCD_Clear_Game_Time(){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	//fill this to clear the time
	for(int i =0; i<20;i++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	e00c      	b.n	80012ca <LCD_Clear_Game_Time+0x26>
		LCD_Draw_Vertical_Line(i+20,2,38,LCD_COLOR_BCKRND);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	3314      	adds	r3, #20
 80012b6:	b298      	uxth	r0, r3
 80012b8:	f241 134f 	movw	r3, #4431	@ 0x114f
 80012bc:	2226      	movs	r2, #38	@ 0x26
 80012be:	2102      	movs	r1, #2
 80012c0:	f7ff fdbe 	bl	8000e40 <LCD_Draw_Vertical_Line>
	for(int i =0; i<20;i++){
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3301      	adds	r3, #1
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b13      	cmp	r3, #19
 80012ce:	ddef      	ble.n	80012b0 <LCD_Clear_Game_Time+0xc>
	}
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <LCD_Draw_Lines_Cleared>:
void LCD_Draw_Lines_Cleared(uint16_t singles, uint16_t doubles, uint16_t tripples, uint16_t tetri){
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	461a      	mov	r2, r3
 80012ea:	4623      	mov	r3, r4
 80012ec:	80fb      	strh	r3, [r7, #6]
 80012ee:	4603      	mov	r3, r0
 80012f0:	80bb      	strh	r3, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	807b      	strh	r3, [r7, #2]
 80012f6:	4613      	mov	r3, r2
 80012f8:	803b      	strh	r3, [r7, #0]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80012fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012fe:	f7ff fe4d 	bl	8000f9c <LCD_SetTextColor>
	LCD_SetFont(&Font12x12);
 8001302:	48a7      	ldr	r0, [pc, #668]	@ (80015a0 <LCD_Draw_Lines_Cleared+0x2c4>)
 8001304:	f7ff fe5a 	bl	8000fbc <LCD_SetFont>
	LCD_DisplayChar(92,180,'S');
 8001308:	2253      	movs	r2, #83	@ 0x53
 800130a:	21b4      	movs	r1, #180	@ 0xb4
 800130c:	205c      	movs	r0, #92	@ 0x5c
 800130e:	f7ff fed3 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(100,180,'i');
 8001312:	2269      	movs	r2, #105	@ 0x69
 8001314:	21b4      	movs	r1, #180	@ 0xb4
 8001316:	2064      	movs	r0, #100	@ 0x64
 8001318:	f7ff fece 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(104,180,'n');
 800131c:	226e      	movs	r2, #110	@ 0x6e
 800131e:	21b4      	movs	r1, #180	@ 0xb4
 8001320:	2068      	movs	r0, #104	@ 0x68
 8001322:	f7ff fec9 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(112,180,'g');
 8001326:	2267      	movs	r2, #103	@ 0x67
 8001328:	21b4      	movs	r1, #180	@ 0xb4
 800132a:	2070      	movs	r0, #112	@ 0x70
 800132c:	f7ff fec4 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(120,180,'l');
 8001330:	226c      	movs	r2, #108	@ 0x6c
 8001332:	21b4      	movs	r1, #180	@ 0xb4
 8001334:	2078      	movs	r0, #120	@ 0x78
 8001336:	f7ff febf 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(124,180,'e');
 800133a:	2265      	movs	r2, #101	@ 0x65
 800133c:	21b4      	movs	r1, #180	@ 0xb4
 800133e:	207c      	movs	r0, #124	@ 0x7c
 8001340:	f7ff feba 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(131,180,'s');
 8001344:	2273      	movs	r2, #115	@ 0x73
 8001346:	21b4      	movs	r1, #180	@ 0xb4
 8001348:	2083      	movs	r0, #131	@ 0x83
 800134a:	f7ff feb5 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(136,180,':');
 800134e:	223a      	movs	r2, #58	@ 0x3a
 8001350:	21b4      	movs	r1, #180	@ 0xb4
 8001352:	2088      	movs	r0, #136	@ 0x88
 8001354:	f7ff feb0 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(142,180,(char)(48+((singles/10)%10)));
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	4a92      	ldr	r2, [pc, #584]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b8f      	ldr	r3, [pc, #572]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 8001366:	fba3 1302 	umull	r1, r3, r3, r2
 800136a:	08d9      	lsrs	r1, r3, #3
 800136c:	460b      	mov	r3, r1
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	440b      	add	r3, r1
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29b      	uxth	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	3330      	adds	r3, #48	@ 0x30
 800137c:	b2db      	uxtb	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	21b4      	movs	r1, #180	@ 0xb4
 8001382:	208e      	movs	r0, #142	@ 0x8e
 8001384:	f7ff fe98 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(148,180,(char)(48+(singles%10)));
 8001388:	88fa      	ldrh	r2, [r7, #6]
 800138a:	4b86      	ldr	r3, [pc, #536]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 800138c:	fba3 1302 	umull	r1, r3, r3, r2
 8001390:	08d9      	lsrs	r1, r3, #3
 8001392:	460b      	mov	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	440b      	add	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3330      	adds	r3, #48	@ 0x30
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	21b4      	movs	r1, #180	@ 0xb4
 80013a8:	2094      	movs	r0, #148	@ 0x94
 80013aa:	f7ff fe85 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(92,192,'D');
 80013ae:	2244      	movs	r2, #68	@ 0x44
 80013b0:	21c0      	movs	r1, #192	@ 0xc0
 80013b2:	205c      	movs	r0, #92	@ 0x5c
 80013b4:	f7ff fe80 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(100,192,'o');
 80013b8:	226f      	movs	r2, #111	@ 0x6f
 80013ba:	21c0      	movs	r1, #192	@ 0xc0
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f7ff fe7b 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(107,192,'u');
 80013c2:	2275      	movs	r2, #117	@ 0x75
 80013c4:	21c0      	movs	r1, #192	@ 0xc0
 80013c6:	206b      	movs	r0, #107	@ 0x6b
 80013c8:	f7ff fe76 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(115,192,'b');
 80013cc:	2262      	movs	r2, #98	@ 0x62
 80013ce:	21c0      	movs	r1, #192	@ 0xc0
 80013d0:	2073      	movs	r0, #115	@ 0x73
 80013d2:	f7ff fe71 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(123,192,'l');
 80013d6:	226c      	movs	r2, #108	@ 0x6c
 80013d8:	21c0      	movs	r1, #192	@ 0xc0
 80013da:	207b      	movs	r0, #123	@ 0x7b
 80013dc:	f7ff fe6c 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(126,192,'e');
 80013e0:	2265      	movs	r2, #101	@ 0x65
 80013e2:	21c0      	movs	r1, #192	@ 0xc0
 80013e4:	207e      	movs	r0, #126	@ 0x7e
 80013e6:	f7ff fe67 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(133,192,'s');
 80013ea:	2273      	movs	r2, #115	@ 0x73
 80013ec:	21c0      	movs	r1, #192	@ 0xc0
 80013ee:	2085      	movs	r0, #133	@ 0x85
 80013f0:	f7ff fe62 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(137,192,':');
 80013f4:	223a      	movs	r2, #58	@ 0x3a
 80013f6:	21c0      	movs	r1, #192	@ 0xc0
 80013f8:	2089      	movs	r0, #137	@ 0x89
 80013fa:	f7ff fe5d 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(142,192,(char)(48+((doubles/10)%10)));
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	4a68      	ldr	r2, [pc, #416]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	b29a      	uxth	r2, r3
 800140a:	4b66      	ldr	r3, [pc, #408]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 800140c:	fba3 1302 	umull	r1, r3, r3, r2
 8001410:	08d9      	lsrs	r1, r3, #3
 8001412:	460b      	mov	r3, r1
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	b29b      	uxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	3330      	adds	r3, #48	@ 0x30
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	21c0      	movs	r1, #192	@ 0xc0
 8001428:	208e      	movs	r0, #142	@ 0x8e
 800142a:	f7ff fe45 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(148,192,(char)(48+(doubles%10)));
 800142e:	88ba      	ldrh	r2, [r7, #4]
 8001430:	4b5c      	ldr	r3, [pc, #368]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 8001432:	fba3 1302 	umull	r1, r3, r3, r2
 8001436:	08d9      	lsrs	r1, r3, #3
 8001438:	460b      	mov	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3330      	adds	r3, #48	@ 0x30
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	21c0      	movs	r1, #192	@ 0xc0
 800144e:	2094      	movs	r0, #148	@ 0x94
 8001450:	f7ff fe32 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(92,204,'T');
 8001454:	2254      	movs	r2, #84	@ 0x54
 8001456:	21cc      	movs	r1, #204	@ 0xcc
 8001458:	205c      	movs	r0, #92	@ 0x5c
 800145a:	f7ff fe2d 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(99,204,'r');
 800145e:	2272      	movs	r2, #114	@ 0x72
 8001460:	21cc      	movs	r1, #204	@ 0xcc
 8001462:	2063      	movs	r0, #99	@ 0x63
 8001464:	f7ff fe28 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(104,204,'i');
 8001468:	2269      	movs	r2, #105	@ 0x69
 800146a:	21cc      	movs	r1, #204	@ 0xcc
 800146c:	2068      	movs	r0, #104	@ 0x68
 800146e:	f7ff fe23 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(108,204,'p');
 8001472:	2270      	movs	r2, #112	@ 0x70
 8001474:	21cc      	movs	r1, #204	@ 0xcc
 8001476:	206c      	movs	r0, #108	@ 0x6c
 8001478:	f7ff fe1e 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(116,204,'p');
 800147c:	2270      	movs	r2, #112	@ 0x70
 800147e:	21cc      	movs	r1, #204	@ 0xcc
 8001480:	2074      	movs	r0, #116	@ 0x74
 8001482:	f7ff fe19 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(124,204,'l');
 8001486:	226c      	movs	r2, #108	@ 0x6c
 8001488:	21cc      	movs	r1, #204	@ 0xcc
 800148a:	207c      	movs	r0, #124	@ 0x7c
 800148c:	f7ff fe14 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(127,204,'e');
 8001490:	2265      	movs	r2, #101	@ 0x65
 8001492:	21cc      	movs	r1, #204	@ 0xcc
 8001494:	207f      	movs	r0, #127	@ 0x7f
 8001496:	f7ff fe0f 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(134,204,'s');
 800149a:	2273      	movs	r2, #115	@ 0x73
 800149c:	21cc      	movs	r1, #204	@ 0xcc
 800149e:	2086      	movs	r0, #134	@ 0x86
 80014a0:	f7ff fe0a 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(138,204,':');
 80014a4:	223a      	movs	r2, #58	@ 0x3a
 80014a6:	21cc      	movs	r1, #204	@ 0xcc
 80014a8:	208a      	movs	r0, #138	@ 0x8a
 80014aa:	f7ff fe05 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(142,204,(char)(48+((tripples/10)%10)));
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4a3c      	ldr	r2, [pc, #240]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 80014bc:	fba3 1302 	umull	r1, r3, r3, r2
 80014c0:	08d9      	lsrs	r1, r3, #3
 80014c2:	460b      	mov	r3, r1
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	3330      	adds	r3, #48	@ 0x30
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	21cc      	movs	r1, #204	@ 0xcc
 80014d8:	208e      	movs	r0, #142	@ 0x8e
 80014da:	f7ff fded 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(148,204,(char)(48+(tripples%10)));
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 80014e2:	fba3 1302 	umull	r1, r3, r3, r2
 80014e6:	08d9      	lsrs	r1, r3, #3
 80014e8:	460b      	mov	r3, r1
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3330      	adds	r3, #48	@ 0x30
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	21cc      	movs	r1, #204	@ 0xcc
 80014fe:	2094      	movs	r0, #148	@ 0x94
 8001500:	f7ff fdda 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(92,216,'T');
 8001504:	2254      	movs	r2, #84	@ 0x54
 8001506:	21d8      	movs	r1, #216	@ 0xd8
 8001508:	205c      	movs	r0, #92	@ 0x5c
 800150a:	f7ff fdd5 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(99,216,'e');
 800150e:	2265      	movs	r2, #101	@ 0x65
 8001510:	21d8      	movs	r1, #216	@ 0xd8
 8001512:	2063      	movs	r0, #99	@ 0x63
 8001514:	f7ff fdd0 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(107,216,'t');
 8001518:	2274      	movs	r2, #116	@ 0x74
 800151a:	21d8      	movs	r1, #216	@ 0xd8
 800151c:	206b      	movs	r0, #107	@ 0x6b
 800151e:	f7ff fdcb 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(113,216,'r');
 8001522:	2272      	movs	r2, #114	@ 0x72
 8001524:	21d8      	movs	r1, #216	@ 0xd8
 8001526:	2071      	movs	r0, #113	@ 0x71
 8001528:	f7ff fdc6 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(119,216,'i');
 800152c:	2269      	movs	r2, #105	@ 0x69
 800152e:	21d8      	movs	r1, #216	@ 0xd8
 8001530:	2077      	movs	r0, #119	@ 0x77
 8001532:	f7ff fdc1 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(123,216,':');
 8001536:	223a      	movs	r2, #58	@ 0x3a
 8001538:	21d8      	movs	r1, #216	@ 0xd8
 800153a:	207b      	movs	r0, #123	@ 0x7b
 800153c:	f7ff fdbc 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(142,216,(char)(48+((tetri/10)%10)));
 8001540:	883b      	ldrh	r3, [r7, #0]
 8001542:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 800154e:	fba3 1302 	umull	r1, r3, r3, r2
 8001552:	08d9      	lsrs	r1, r3, #3
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	3330      	adds	r3, #48	@ 0x30
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	21d8      	movs	r1, #216	@ 0xd8
 800156a:	208e      	movs	r0, #142	@ 0x8e
 800156c:	f7ff fda4 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(148,216,(char)(48+(tetri%10)));
 8001570:	883a      	ldrh	r2, [r7, #0]
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <LCD_Draw_Lines_Cleared+0x2c8>)
 8001574:	fba3 1302 	umull	r1, r3, r3, r2
 8001578:	08d9      	lsrs	r1, r3, #3
 800157a:	460b      	mov	r3, r1
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	440b      	add	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3330      	adds	r3, #48	@ 0x30
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	21d8      	movs	r1, #216	@ 0xd8
 8001590:	2094      	movs	r0, #148	@ 0x94
 8001592:	f7ff fd91 	bl	80010b8 <LCD_DisplayChar>
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	cccccccd 	.word	0xcccccccd

080015a8 <LCD_Draw_Play_Icon>:
void LCD_Draw_Play_Icon(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80015ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80015b0:	f7ff fcf4 	bl	8000f9c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80015b4:	4829      	ldr	r0, [pc, #164]	@ (800165c <LCD_Draw_Play_Icon+0xb4>)
 80015b6:	f7ff fd01 	bl	8000fbc <LCD_SetFont>
	LCD_DisplayChar(100,150,'P');
 80015ba:	2250      	movs	r2, #80	@ 0x50
 80015bc:	2196      	movs	r1, #150	@ 0x96
 80015be:	2064      	movs	r0, #100	@ 0x64
 80015c0:	f7ff fd7a 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'L');
 80015c4:	224c      	movs	r2, #76	@ 0x4c
 80015c6:	2196      	movs	r1, #150	@ 0x96
 80015c8:	206e      	movs	r0, #110	@ 0x6e
 80015ca:	f7ff fd75 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'A');
 80015ce:	2241      	movs	r2, #65	@ 0x41
 80015d0:	2196      	movs	r1, #150	@ 0x96
 80015d2:	2078      	movs	r0, #120	@ 0x78
 80015d4:	f7ff fd70 	bl	80010b8 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'Y');
 80015d8:	2259      	movs	r2, #89	@ 0x59
 80015da:	2196      	movs	r1, #150	@ 0x96
 80015dc:	2082      	movs	r0, #130	@ 0x82
 80015de:	f7ff fd6b 	bl	80010b8 <LCD_DisplayChar>
	LCD_Draw_Vertical_Line(95,150,20,LCD_COLOR_WHITE);
 80015e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015e6:	2214      	movs	r2, #20
 80015e8:	2196      	movs	r1, #150	@ 0x96
 80015ea:	205f      	movs	r0, #95	@ 0x5f
 80015ec:	f7ff fc28 	bl	8000e40 <LCD_Draw_Vertical_Line>
	LCD_Draw_Vertical_Line(149,150,20,LCD_COLOR_WHITE);
 80015f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015f4:	2214      	movs	r2, #20
 80015f6:	2196      	movs	r1, #150	@ 0x96
 80015f8:	2095      	movs	r0, #149	@ 0x95
 80015fa:	f7ff fc21 	bl	8000e40 <LCD_Draw_Vertical_Line>
	LCD_Draw_Horizontal_Line(100,146,45,LCD_COLOR_WHITE);
 80015fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001602:	222d      	movs	r2, #45	@ 0x2d
 8001604:	2192      	movs	r1, #146	@ 0x92
 8001606:	2064      	movs	r0, #100	@ 0x64
 8001608:	f7ff fc41 	bl	8000e8e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Horizontal_Line(100,170,45,LCD_COLOR_WHITE);
 800160c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001610:	222d      	movs	r2, #45	@ 0x2d
 8001612:	21aa      	movs	r1, #170	@ 0xaa
 8001614:	2064      	movs	r0, #100	@ 0x64
 8001616:	f7ff fc3a 	bl	8000e8e <LCD_Draw_Horizontal_Line>
	LCD_Draw_Square(0,0,15,LCD_COLOR_WHITE);
 800161a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800161e:	220f      	movs	r2, #15
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fc5a 	bl	8000edc <LCD_Draw_Square>
	LCD_Draw_Square(224,0,15,LCD_COLOR_WHITE);
 8001628:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800162c:	220f      	movs	r2, #15
 800162e:	2100      	movs	r1, #0
 8001630:	20e0      	movs	r0, #224	@ 0xe0
 8001632:	f7ff fc53 	bl	8000edc <LCD_Draw_Square>
	LCD_Draw_Square(0,304,15,LCD_COLOR_WHITE);
 8001636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800163a:	220f      	movs	r2, #15
 800163c:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fc4b 	bl	8000edc <LCD_Draw_Square>
	LCD_Draw_Square(224,304,15,LCD_COLOR_WHITE);
 8001646:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800164a:	220f      	movs	r2, #15
 800164c:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001650:	20e0      	movs	r0, #224	@ 0xe0
 8001652:	f7ff fc43 	bl	8000edc <LCD_Draw_Square>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000004 	.word	0x20000004

08001660 <LCD_Draw_Homescreen_Blocks>:
void LCD_Draw_Homescreen_Blocks(){
 8001660:	b580      	push	{r7, lr}
 8001662:	b09c      	sub	sp, #112	@ 0x70
 8001664:	af00      	add	r7, sp, #0
	bool sqr[4][4] = {{1,1},{1,1}};
 8001666:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001686:	2301      	movs	r3, #1
 8001688:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	bool rl[4][4] = {{1,1},{1},{1}};
 800168c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	2301      	movs	r3, #1
 800169c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80016a0:	2301      	movs	r3, #1
 80016a2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80016a6:	2301      	movs	r3, #1
 80016a8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80016ac:	2301      	movs	r3, #1
 80016ae:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
	bool l[4][4] = {{1,1},{0,1},{0,1}};
 80016b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80016d2:	2301      	movs	r3, #1
 80016d4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	bool rs[4][4] = {{1,1},{0,1,1}};
 80016d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	2301      	movs	r3, #1
 80016e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80016f8:	2301      	movs	r3, #1
 80016fa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	bool s[4][4] = {{0,1,1},{1,1}};
 80016fe:	f107 0320 	add.w	r3, r7, #32
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	2301      	movs	r3, #1
 800170e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001712:	2301      	movs	r3, #1
 8001714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001718:	2301      	movs	r3, #1
 800171a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	bool t[4][4] = {{0,1},{1,1,1}};
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	2301      	movs	r3, #1
 8001734:	747b      	strb	r3, [r7, #17]
 8001736:	2301      	movs	r3, #1
 8001738:	753b      	strb	r3, [r7, #20]
 800173a:	2301      	movs	r3, #1
 800173c:	757b      	strb	r3, [r7, #21]
 800173e:	2301      	movs	r3, #1
 8001740:	75bb      	strb	r3, [r7, #22]
	bool line[4][4] = {{1,1,1,1}};
 8001742:	463b      	mov	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	2301      	movs	r3, #1
 8001750:	703b      	strb	r3, [r7, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	707b      	strb	r3, [r7, #1]
 8001756:	2301      	movs	r3, #1
 8001758:	70bb      	strb	r3, [r7, #2]
 800175a:	2301      	movs	r3, #1
 800175c:	70fb      	strb	r3, [r7, #3]
	LCD_Update_Block_Location(3,2,line,LCD_COLOR_WHITE);
 800175e:	463a      	mov	r2, r7
 8001760:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001764:	2102      	movs	r1, #2
 8001766:	2003      	movs	r0, #3
 8001768:	f000 f859 	bl	800181e <LCD_Update_Block_Location>
	LCD_Update_Block_Location(1,5,rl,LCD_COLOR_WHITE);
 800176c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8001770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001774:	2105      	movs	r1, #5
 8001776:	2001      	movs	r0, #1
 8001778:	f000 f851 	bl	800181e <LCD_Update_Block_Location>
	LCD_Update_Block_Location(7,5,l,LCD_COLOR_WHITE);
 800177c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001780:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001784:	2105      	movs	r1, #5
 8001786:	2007      	movs	r0, #7
 8001788:	f000 f849 	bl	800181e <LCD_Update_Block_Location>
	LCD_Update_Block_Location(0,11,rs,LCD_COLOR_WHITE);
 800178c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001794:	210b      	movs	r1, #11
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f841 	bl	800181e <LCD_Update_Block_Location>
	LCD_Update_Block_Location(7,11,s,LCD_COLOR_WHITE);
 800179c:	f107 0220 	add.w	r2, r7, #32
 80017a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017a4:	210b      	movs	r1, #11
 80017a6:	2007      	movs	r0, #7
 80017a8:	f000 f839 	bl	800181e <LCD_Update_Block_Location>
	LCD_Update_Block_Location(2,15,sqr,LCD_COLOR_WHITE);
 80017ac:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 80017b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b4:	210f      	movs	r1, #15
 80017b6:	2002      	movs	r0, #2
 80017b8:	f000 f831 	bl	800181e <LCD_Update_Block_Location>
	LCD_Update_Block_Location(6,15,t,LCD_COLOR_WHITE);
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017c4:	210f      	movs	r1, #15
 80017c6:	2006      	movs	r0, #6
 80017c8:	f000 f829 	bl	800181e <LCD_Update_Block_Location>
}
 80017cc:	bf00      	nop
 80017ce:	3770      	adds	r7, #112	@ 0x70
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <LCD_Draw_Board_Background>:
void LCD_Draw_Board_Background(){ //board is 10x20, so 100x200 centered 120,160, so starting at 70 and 60
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
	for(int i = 0; i < LCD_GAME_START_X;i++){
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	e016      	b.n	800180e <LCD_Draw_Board_Background+0x3a>
		LCD_Draw_Vertical_Line(i,0,LCD_PIXEL_HEIGHT,LCD_COLOR_BCKRND);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	b298      	uxth	r0, r3
 80017e4:	f241 134f 	movw	r3, #4431	@ 0x114f
 80017e8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017ec:	2100      	movs	r1, #0
 80017ee:	f7ff fb27 	bl	8000e40 <LCD_Draw_Vertical_Line>
		LCD_Draw_Vertical_Line(LCD_GAME_END_X+i,0,LCD_PIXEL_HEIGHT,LCD_COLOR_BCKRND);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	33c8      	adds	r3, #200	@ 0xc8
 80017f8:	b298      	uxth	r0, r3
 80017fa:	f241 134f 	movw	r3, #4431	@ 0x114f
 80017fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001802:	2100      	movs	r1, #0
 8001804:	f7ff fb1c 	bl	8000e40 <LCD_Draw_Vertical_Line>
	for(int i = 0; i < LCD_GAME_START_X;i++){
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b27      	cmp	r3, #39	@ 0x27
 8001812:	dde5      	ble.n	80017e0 <LCD_Draw_Board_Background+0xc>
	}
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <LCD_Update_Block_Location>:
void LCD_Update_Block_Location(uint8_t row, uint8_t col, bool shape[4][4], uint16_t color){
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	603a      	str	r2, [r7, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	460b      	mov	r3, r1
 800182e:	71bb      	strb	r3, [r7, #6]
 8001830:	4613      	mov	r3, r2
 8001832:	80bb      	strh	r3, [r7, #4]
	uint8_t squareLength = 15;
 8001834:	230f      	movs	r3, #15
 8001836:	73fb      	strb	r3, [r7, #15]
	uint8_t startX = row*squareLength+40+row;
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3301      	adds	r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	79fa      	ldrb	r2, [r7, #7]
 8001840:	fb12 f303 	smulbb	r3, r2, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3328      	adds	r3, #40	@ 0x28
 8001848:	73bb      	strb	r3, [r7, #14]
	uint16_t startY = col*squareLength+col;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	79bb      	ldrb	r3, [r7, #6]
 8001854:	b29b      	uxth	r3, r3
 8001856:	fb12 f303 	smulbb	r3, r2, r3
 800185a:	81bb      	strh	r3, [r7, #12]
	for(int i=0; i<4;i++){
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	e032      	b.n	80018c8 <LCD_Update_Block_Location+0xaa>
		for(int j = 0; j<4;j++){
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	e029      	b.n	80018bc <LCD_Update_Block_Location+0x9e>
			if(shape[i][j]){
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	441a      	add	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4413      	add	r3, r2
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d01d      	beq.n	80018b6 <LCD_Update_Block_Location+0x98>
				LCD_Draw_Square((squareLength*j)+j+startX,(squareLength*i)+i+startY,squareLength,color);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b29b      	uxth	r3, r3
 800187e:	3301      	adds	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	b29b      	uxth	r3, r3
 8001886:	fb12 f303 	smulbb	r3, r2, r3
 800188a:	b29a      	uxth	r2, r3
 800188c:	7bbb      	ldrb	r3, [r7, #14]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b298      	uxth	r0, r3
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	b29b      	uxth	r3, r3
 8001898:	3301      	adds	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	fb12 f303 	smulbb	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	b299      	uxth	r1, r3
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	88bb      	ldrh	r3, [r7, #4]
 80018b2:	f7ff fb13 	bl	8000edc <LCD_Draw_Square>
		for(int j = 0; j<4;j++){
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	3301      	adds	r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	ddd2      	ble.n	8001868 <LCD_Update_Block_Location+0x4a>
	for(int i=0; i<4;i++){
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	ddc9      	ble.n	8001862 <LCD_Update_Block_Location+0x44>
			}
		}
	}
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80018dc:	f002 ff19 	bl	8004712 <STMPE811_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d001      	beq.n	80018ea <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <InitializeLCDTouch+0xe>
  }
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}

080018ee <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f002 ffc3 	bl	8004882 <STMPE811_ReadTouch>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <RNG_init>:
#include "RNG.h"//this has not been initialized correctly

static HAL_StatusTypeDef RNGState;
static RNG_HandleTypeDef RNGConfig;

void RNG_init(){
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	RNGConfig.Instance = RNG;
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <RNG_init+0x30>)
 800190e:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <RNG_init+0x34>)
 8001910:	601a      	str	r2, [r3, #0]
	__HAL_RNG_ENABLE(&RNGConfig);
 8001912:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <RNG_init+0x30>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <RNG_init+0x30>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0204 	orr.w	r2, r2, #4
 8001920:	601a      	str	r2, [r3, #0]
	RNGState = HAL_RNG_Init(&RNGConfig);
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <RNG_init+0x30>)
 8001924:	f006 f850 	bl	80079c8 <HAL_RNG_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <RNG_init+0x38>)
 800192e:	701a      	strb	r2, [r3, #0]
	RNG_Check_Hal_Status();
 8001930:	f000 f80c 	bl	800194c <RNG_Check_Hal_Status>
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20025980 	.word	0x20025980
 800193c:	50060800 	.word	0x50060800
 8001940:	2002597c 	.word	0x2002597c

08001944 <RNG_Error_Handler>:


void RNG_Error_Handler(){
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	while(1);;
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <RNG_Error_Handler+0x4>

0800194c <RNG_Check_Hal_Status>:
}
void RNG_Check_Hal_Status(){
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	if(RNGState!=HAL_OK){
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <RNG_Check_Hal_Status+0x14>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <RNG_Check_Hal_Status+0x10>
		RNG_Error_Handler();
 8001958:	f7ff fff4 	bl	8001944 <RNG_Error_Handler>
	}
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2002597c 	.word	0x2002597c

08001964 <RNG_getRandom>:
uint32_t RNG_getRandom(){
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	//uint32_t randomNum = HAL_RNG_GetRandomNumber(&RNGConfig);//add the thing
	uint32_t randomNum = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
	RNGState = HAL_RNG_GenerateRandomNumber(&RNGConfig,&randomNum);
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4808      	ldr	r0, [pc, #32]	@ (8001994 <RNG_getRandom+0x30>)
 8001974:	f006 f852 	bl	8007a1c <HAL_RNG_GenerateRandomNumber>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <RNG_getRandom+0x34>)
 800197e:	701a      	strb	r2, [r3, #0]
	if(randomNum==0U){
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <RNG_getRandom+0x26>
		RNG_Error_Handler();
 8001986:	f7ff ffdd 	bl	8001944 <RNG_Error_Handler>
	}
	return randomNum;
 800198a:	687b      	ldr	r3, [r7, #4]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20025980 	.word	0x20025980
 8001998:	2002597c 	.word	0x2002597c

0800199c <Timer_Config>:
#include "Timer_Driver.h"

static TIM_HandleTypeDef htim2;//their is a chance that this code will not work due to it attmepting to write on a buissy bus
static TIM_HandleTypeDef htim3;

void Timer_Config(uint8_t timer){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	if(timer==2){
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d119      	bne.n	80019e0 <Timer_Config+0x44>
		htim2.Instance = TIM2;
 80019ac:	4b25      	ldr	r3, [pc, #148]	@ (8001a44 <Timer_Config+0xa8>)
 80019ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b2:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = TIM2_PRESCALER;
 80019b4:	4b23      	ldr	r3, [pc, #140]	@ (8001a44 <Timer_Config+0xa8>)
 80019b6:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 80019ba:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b21      	ldr	r3, [pc, #132]	@ (8001a44 <Timer_Config+0xa8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 4294967295;
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <Timer_Config+0xa8>)
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <Timer_Config+0xa8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <Timer_Config+0xa8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
		Timer_Change_IT(timer,1);
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2101      	movs	r1, #1
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f8e4 	bl	8001ba8 <Timer_Change_IT>
	}
	if(timer==3){
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d129      	bne.n	8001a3a <Timer_Config+0x9e>
		htim3.Instance = TIM3;
 80019e6:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <Timer_Config+0xac>)
 80019e8:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <Timer_Config+0xb0>)
 80019ea:	601a      	str	r2, [r3, #0]
		htim3.Init.Prescaler = TIM3_PRESCALER;
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <Timer_Config+0xac>)
 80019ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80019f2:	605a      	str	r2, [r3, #4]
		htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <Timer_Config+0xac>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
		htim3.Init.Period = 65535;
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <Timer_Config+0xac>)
 80019fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a00:	60da      	str	r2, [r3, #12]
		htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <Timer_Config+0xac>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
		htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <Timer_Config+0xac>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
		__HAL_TIM_SET_AUTORELOAD(&htim3, (uint32_t)(TIM3_AUTORELOAD));
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <Timer_Config+0xac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f246 2270 	movw	r2, #25200	@ 0x6270
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <Timer_Config+0xac>)
 8001a1a:	f246 2270 	movw	r2, #25200	@ 0x6270
 8001a1e:	60da      	str	r2, [r3, #12]
		__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <Timer_Config+0xac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <Timer_Config+0xac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]
		Timer_Change_IT(timer,1);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f8b7 	bl	8001ba8 <Timer_Change_IT>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20025990 	.word	0x20025990
 8001a48:	200259d8 	.word	0x200259d8
 8001a4c:	40000400 	.word	0x40000400

08001a50 <Timer_Pause>:
void Timer_Pause(uint8_t timer){
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	if(timer==2){
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d118      	bne.n	8001a92 <Timer_Pause+0x42>
		__HAL_TIM_DISABLE(&htim2);
 8001a60:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <Timer_Pause+0x8c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d12c      	bne.n	8001aca <Timer_Pause+0x7a>
 8001a70:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <Timer_Pause+0x8c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	f240 4344 	movw	r3, #1092	@ 0x444
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d124      	bne.n	8001aca <Timer_Pause+0x7a>
 8001a80:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <Timer_Pause+0x8c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <Timer_Pause+0x8c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0201 	bic.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
		return;
 8001a90:	e01b      	b.n	8001aca <Timer_Pause+0x7a>
	}
	if(timer==3){
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d11b      	bne.n	8001ad0 <Timer_Pause+0x80>
		__HAL_TIM_DISABLE(&htim3);
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <Timer_Pause+0x90>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d112      	bne.n	8001ace <Timer_Pause+0x7e>
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <Timer_Pause+0x90>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	f240 4344 	movw	r3, #1092	@ 0x444
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <Timer_Pause+0x7e>
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <Timer_Pause+0x90>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <Timer_Pause+0x90>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
		return;
 8001ac8:	e001      	b.n	8001ace <Timer_Pause+0x7e>
		return;
 8001aca:	bf00      	nop
 8001acc:	e000      	b.n	8001ad0 <Timer_Pause+0x80>
		return;
 8001ace:	bf00      	nop
	}
}
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20025990 	.word	0x20025990
 8001ae0:	200259d8 	.word	0x200259d8

08001ae4 <Timer_Start>:
void Timer_Start(uint8_t timer){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	if(timer==2){
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d108      	bne.n	8001b06 <Timer_Start+0x22>
		__HAL_TIM_ENABLE(&htim2);
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <Timer_Start+0x44>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <Timer_Start+0x44>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
		return;
 8001b04:	e00b      	b.n	8001b1e <Timer_Start+0x3a>
	}
	if(timer==3){
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d108      	bne.n	8001b1e <Timer_Start+0x3a>
		__HAL_TIM_ENABLE(&htim3);
 8001b0c:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <Timer_Start+0x48>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <Timer_Start+0x48>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
		return;
 8001b1c:	bf00      	nop
	}
}
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	20025990 	.word	0x20025990
 8001b2c:	200259d8 	.word	0x200259d8

08001b30 <Timer_Reset>:
void Timer_Reset(uint8_t timer){
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	if(timer==2){
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d104      	bne.n	8001b4a <Timer_Reset+0x1a>
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001b40:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <Timer_Reset+0x34>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 8001b48:	e007      	b.n	8001b5a <Timer_Reset+0x2a>
	}
	if(timer==3){
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d104      	bne.n	8001b5a <Timer_Reset+0x2a>
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <Timer_Reset+0x38>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24
		return;
 8001b58:	bf00      	nop
	}
}
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20025990 	.word	0x20025990
 8001b68:	200259d8 	.word	0x200259d8

08001b6c <Timer_Get_Value>:
uint32_t Timer_Get_Value(uint8_t timer){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	if(timer==2){
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d103      	bne.n	8001b84 <Timer_Get_Value+0x18>
		return __HAL_TIM_GET_COUNTER(&htim2);
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <Timer_Get_Value+0x34>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	e007      	b.n	8001b94 <Timer_Get_Value+0x28>
	}
	if(timer==3){
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d103      	bne.n	8001b92 <Timer_Get_Value+0x26>
		return __HAL_TIM_GET_COUNTER(&htim3);
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <Timer_Get_Value+0x38>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	e000      	b.n	8001b94 <Timer_Get_Value+0x28>
	}
	return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	20025990 	.word	0x20025990
 8001ba4:	200259d8 	.word	0x200259d8

08001ba8 <Timer_Change_IT>:
void Timer_Change_IT(uint8_t timer, uint8_t state){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	460a      	mov	r2, r1
 8001bb2:	71fb      	strb	r3, [r7, #7]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	71bb      	strb	r3, [r7, #6]
	if(timer==2){
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d10a      	bne.n	8001bd4 <Timer_Change_IT+0x2c>
		state ? IRQ_Enable(TIM2_IRQ_NUMBER): IRQ_Disable(TIM2_IRQ_NUMBER);
 8001bbe:	79bb      	ldrb	r3, [r7, #6]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <Timer_Change_IT+0x24>
 8001bc4:	201c      	movs	r0, #28
 8001bc6:	f7fe ff21 	bl	8000a0c <IRQ_Enable>
		return;
 8001bca:	e011      	b.n	8001bf0 <Timer_Change_IT+0x48>
		state ? IRQ_Enable(TIM2_IRQ_NUMBER): IRQ_Disable(TIM2_IRQ_NUMBER);
 8001bcc:	201c      	movs	r0, #28
 8001bce:	f7fe ff45 	bl	8000a5c <IRQ_Disable>
		return;
 8001bd2:	e00d      	b.n	8001bf0 <Timer_Change_IT+0x48>
	}
	if(timer==3){
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d10a      	bne.n	8001bf0 <Timer_Change_IT+0x48>
		state ? IRQ_Enable(TIM3_IRQ_NUMBER): IRQ_Disable(TIM3_IRQ_NUMBER);
 8001bda:	79bb      	ldrb	r3, [r7, #6]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <Timer_Change_IT+0x40>
 8001be0:	201d      	movs	r0, #29
 8001be2:	f7fe ff13 	bl	8000a0c <IRQ_Enable>
		return;
 8001be6:	e002      	b.n	8001bee <Timer_Change_IT+0x46>
		state ? IRQ_Enable(TIM3_IRQ_NUMBER): IRQ_Disable(TIM3_IRQ_NUMBER);
 8001be8:	201d      	movs	r0, #29
 8001bea:	f7fe ff37 	bl	8000a5c <IRQ_Disable>
		return;
 8001bee:	bf00      	nop
	}
}
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <Timer_Added2RemoveSRcuzItStartsOnHere>:
void Timer_Added2RemoveSRcuzItStartsOnHere(){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	TIMR_Clear_Pending(INTERRUPT_TIM3);
 8001bfc:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <Timer_Added2RemoveSRcuzItStartsOnHere+0x14>)
 8001bfe:	f7fe ff6b 	bl	8000ad8 <TIMR_Clear_Pending>
	IRQ_Enable(TIM3_IRQ_NUMBER);
 8001c02:	201d      	movs	r0, #29
 8001c04:	f7fe ff02 	bl	8000a0c <IRQ_Enable>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40000400 	.word	0x40000400

08001c10 <Game_init>:
static uint16_t singleClears =0;
static uint16_t doubleClears =0;
static uint16_t trippleClears =0;
static uint16_t tetrisClears =0;

void Game_init(){
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 8001c16:	af06      	add	r7, sp, #24
	for(int i = 0; i<19;i++){
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8001c1e:	e00e      	b.n	8001c3e <Game_init+0x2e>
		AllBlocks[i]=(Game_Block *)malloc(sizeof(Game_Block));
 8001c20:	201c      	movs	r0, #28
 8001c22:	f006 fd09 	bl	8008638 <malloc>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <Game_init+0x4c>)
 8001c2c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001c30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<19;i++){
 8001c34:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8001c3e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	ddec      	ble.n	8001c20 <Game_init+0x10>
	}
	for(int i = 0; i<SHAPE_ARR_SIZE; i++){
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 8001c4c:	f000 bd7a 	b.w	8002744 <Game_init+0xb34>
		for(int j = 0; j<SHAPE_ARR_SIZE;j++){
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8001c56:	f000 bd68 	b.w	800272a <Game_init+0xb1a>
 8001c5a:	bf00      	nop
 8001c5c:	20025af0 	.word	0x20025af0
			AllBlocks[SQUARE_NUM]->Shape[i][j]=SQUARE_BLOCK.Shape[i][j];
 8001c60:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001c64:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c68:	461a      	mov	r2, r3
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	6053      	str	r3, [r2, #4]
 8001c70:	6093      	str	r3, [r2, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
 8001c74:	6113      	str	r3, [r2, #16]
 8001c76:	6153      	str	r3, [r2, #20]
 8001c78:	6193      	str	r3, [r2, #24]
 8001c7a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001c7e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001c8a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c8e:	2201      	movs	r2, #1
 8001c90:	705a      	strb	r2, [r3, #1]
 8001c92:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001c96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	711a      	strb	r2, [r3, #4]
 8001c9e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001ca2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	715a      	strb	r2, [r3, #5]
 8001caa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001cae:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	741a      	strb	r2, [r3, #16]
 8001cb6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001cba:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	745a      	strb	r2, [r3, #17]
 8001cc2:	4bdf      	ldr	r3, [pc, #892]	@ (8002040 <Game_init+0x430>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001cca:	f5a3 710f 	sub.w	r1, r3, #572	@ 0x23c
 8001cce:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4419      	add	r1, r3
 8001cd6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001cda:	440b      	add	r3, r1
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	441a      	add	r2, r3
 8001ce6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001cea:	4413      	add	r3, r2
 8001cec:	460a      	mov	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]

			AllBlocks[LINE_NUM]->Shape[i][j]=LINE_BLOCK.Shape[i][j];
 8001cf0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001cf4:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	6053      	str	r3, [r2, #4]
 8001d00:	6093      	str	r3, [r2, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
 8001d04:	6113      	str	r3, [r2, #16]
 8001d06:	6153      	str	r3, [r2, #20]
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d0e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d1a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
 8001d22:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d26:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	709a      	strb	r2, [r3, #2]
 8001d2e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d32:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d36:	2201      	movs	r2, #1
 8001d38:	70da      	strb	r2, [r3, #3]
 8001d3a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d3e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d42:	2204      	movs	r2, #4
 8001d44:	741a      	strb	r2, [r3, #16]
 8001d46:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d4a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d4e:	2201      	movs	r2, #1
 8001d50:	745a      	strb	r2, [r3, #17]
 8001d52:	4bbb      	ldr	r3, [pc, #748]	@ (8002040 <Game_init+0x430>)
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d5a:	f5a3 7116 	sub.w	r1, r3, #600	@ 0x258
 8001d5e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4419      	add	r1, r3
 8001d66:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001d6a:	440b      	add	r3, r1
 8001d6c:	7819      	ldrb	r1, [r3, #0]
 8001d6e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	441a      	add	r2, r3
 8001d76:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001d7a:	4413      	add	r3, r2
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	701a      	strb	r2, [r3, #0]
			AllBlocks[LINE_NUM_VERT]->Shape[i][j]=LINE_BLOCK_VERT.Shape[i][j];
 8001d80:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d84:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	6053      	str	r3, [r2, #4]
 8001d90:	6093      	str	r3, [r2, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
 8001d94:	6113      	str	r3, [r2, #16]
 8001d96:	6153      	str	r3, [r2, #20]
 8001d98:	6193      	str	r3, [r2, #24]
 8001d9a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001d9e:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
 8001da6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001daa:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001dae:	2201      	movs	r2, #1
 8001db0:	711a      	strb	r2, [r3, #4]
 8001db2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001db6:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001dba:	2201      	movs	r2, #1
 8001dbc:	721a      	strb	r2, [r3, #8]
 8001dbe:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001dc2:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	731a      	strb	r2, [r3, #12]
 8001dca:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001dce:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	741a      	strb	r2, [r3, #16]
 8001dd6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001dda:	f5a3 731d 	sub.w	r3, r3, #628	@ 0x274
 8001dde:	2204      	movs	r2, #4
 8001de0:	745a      	strb	r2, [r3, #17]
 8001de2:	4b97      	ldr	r3, [pc, #604]	@ (8002040 <Game_init+0x430>)
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001dea:	f5a3 711d 	sub.w	r1, r3, #628	@ 0x274
 8001dee:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4419      	add	r1, r3
 8001df6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001dfa:	440b      	add	r3, r1
 8001dfc:	7819      	ldrb	r1, [r3, #0]
 8001dfe:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	441a      	add	r2, r3
 8001e06:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001e0a:	4413      	add	r3, r2
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]

			AllBlocks[RL_NUM]->Shape[i][j]=RL_BLOCK.Shape[i][j];
 8001e10:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e14:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	6053      	str	r3, [r2, #4]
 8001e20:	6093      	str	r3, [r2, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
 8001e24:	6113      	str	r3, [r2, #16]
 8001e26:	6153      	str	r3, [r2, #20]
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e2e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e3a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e3e:	2201      	movs	r2, #1
 8001e40:	705a      	strb	r2, [r3, #1]
 8001e42:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e46:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	709a      	strb	r2, [r3, #2]
 8001e4e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e52:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e56:	2201      	movs	r2, #1
 8001e58:	719a      	strb	r2, [r3, #6]
 8001e5a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e5e:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e62:	2203      	movs	r2, #3
 8001e64:	741a      	strb	r2, [r3, #16]
 8001e66:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e6a:	f5a3 7324 	sub.w	r3, r3, #656	@ 0x290
 8001e6e:	2202      	movs	r2, #2
 8001e70:	745a      	strb	r2, [r3, #17]
 8001e72:	4b73      	ldr	r3, [pc, #460]	@ (8002040 <Game_init+0x430>)
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001e7a:	f5a3 7124 	sub.w	r1, r3, #656	@ 0x290
 8001e7e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4419      	add	r1, r3
 8001e86:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001e8a:	440b      	add	r3, r1
 8001e8c:	7819      	ldrb	r1, [r3, #0]
 8001e8e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	441a      	add	r2, r3
 8001e96:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001e9a:	4413      	add	r3, r2
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	701a      	strb	r2, [r3, #0]
			AllBlocks[RL_NUM_90]->Shape[i][j]=RL_BLOCK_90.Shape[i][j];
 8001ea0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001ea4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	6053      	str	r3, [r2, #4]
 8001eb0:	6093      	str	r3, [r2, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
 8001eb4:	6113      	str	r3, [r2, #16]
 8001eb6:	6153      	str	r3, [r2, #20]
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001ebe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	705a      	strb	r2, [r3, #1]
 8001ec6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001eca:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ece:	2201      	movs	r2, #1
 8001ed0:	715a      	strb	r2, [r3, #5]
 8001ed2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001ed6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001eda:	2201      	movs	r2, #1
 8001edc:	721a      	strb	r2, [r3, #8]
 8001ede:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001ee2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	725a      	strb	r2, [r3, #9]
 8001eea:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001eee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	741a      	strb	r2, [r3, #16]
 8001ef6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001efa:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001efe:	2203      	movs	r2, #3
 8001f00:	745a      	strb	r2, [r3, #17]
 8001f02:	4b4f      	ldr	r3, [pc, #316]	@ (8002040 <Game_init+0x430>)
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f0a:	f5a3 712b 	sub.w	r1, r3, #684	@ 0x2ac
 8001f0e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4419      	add	r1, r3
 8001f16:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001f1a:	440b      	add	r3, r1
 8001f1c:	7819      	ldrb	r1, [r3, #0]
 8001f1e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	441a      	add	r2, r3
 8001f26:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	701a      	strb	r2, [r3, #0]
			AllBlocks[RL_NUM_180]->Shape[i][j]=RL_BLOCK_180.Shape[i][j];
 8001f30:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f34:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	6053      	str	r3, [r2, #4]
 8001f40:	6093      	str	r3, [r2, #8]
 8001f42:	60d3      	str	r3, [r2, #12]
 8001f44:	6113      	str	r3, [r2, #16]
 8001f46:	6153      	str	r3, [r2, #20]
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f4e:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f5a:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f5e:	2201      	movs	r2, #1
 8001f60:	711a      	strb	r2, [r3, #4]
 8001f62:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f66:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	715a      	strb	r2, [r3, #5]
 8001f6e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f72:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f76:	2201      	movs	r2, #1
 8001f78:	719a      	strb	r2, [r3, #6]
 8001f7a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f7e:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f82:	2203      	movs	r2, #3
 8001f84:	741a      	strb	r2, [r3, #16]
 8001f86:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f8a:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 8001f8e:	2202      	movs	r2, #2
 8001f90:	745a      	strb	r2, [r3, #17]
 8001f92:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <Game_init+0x430>)
 8001f94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f96:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001f9a:	f5a3 7132 	sub.w	r1, r3, #712	@ 0x2c8
 8001f9e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4419      	add	r1, r3
 8001fa6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001faa:	440b      	add	r3, r1
 8001fac:	7819      	ldrb	r1, [r3, #0]
 8001fae:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	441a      	add	r2, r3
 8001fb6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001fba:	4413      	add	r3, r2
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	701a      	strb	r2, [r3, #0]
			AllBlocks[RL_NUM_270]->Shape[i][j]=RL_BLOCK_270.Shape[i][j];
 8001fc0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001fc4:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	6053      	str	r3, [r2, #4]
 8001fd0:	6093      	str	r3, [r2, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
 8001fd4:	6113      	str	r3, [r2, #16]
 8001fd6:	6153      	str	r3, [r2, #20]
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001fde:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001fea:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001fee:	2201      	movs	r2, #1
 8001ff0:	705a      	strb	r2, [r3, #1]
 8001ff2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001ff6:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	711a      	strb	r2, [r3, #4]
 8001ffe:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002002:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8002006:	2201      	movs	r2, #1
 8002008:	721a      	strb	r2, [r3, #8]
 800200a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800200e:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 8002012:	2202      	movs	r2, #2
 8002014:	741a      	strb	r2, [r3, #16]
 8002016:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800201a:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 800201e:	2203      	movs	r2, #3
 8002020:	745a      	strb	r2, [r3, #17]
 8002022:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <Game_init+0x430>)
 8002024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002026:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800202a:	f5a3 7139 	sub.w	r1, r3, #740	@ 0x2e4
 800202e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4419      	add	r1, r3
 8002036:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800203a:	440b      	add	r3, r1
 800203c:	e002      	b.n	8002044 <Game_init+0x434>
 800203e:	bf00      	nop
 8002040:	20025af0 	.word	0x20025af0
 8002044:	7819      	ldrb	r1, [r3, #0]
 8002046:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002052:	4413      	add	r3, r2
 8002054:	460a      	mov	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]

			AllBlocks[L_NUM]->Shape[i][j]=L_BLOCK.Shape[i][j];
 8002058:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800205c:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8002060:	461a      	mov	r2, r3
 8002062:	2300      	movs	r3, #0
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	6053      	str	r3, [r2, #4]
 8002068:	6093      	str	r3, [r2, #8]
 800206a:	60d3      	str	r3, [r2, #12]
 800206c:	6113      	str	r3, [r2, #16]
 800206e:	6153      	str	r3, [r2, #20]
 8002070:	6193      	str	r3, [r2, #24]
 8002072:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002076:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002082:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8002086:	2201      	movs	r2, #1
 8002088:	705a      	strb	r2, [r3, #1]
 800208a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800208e:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8002092:	2201      	movs	r2, #1
 8002094:	709a      	strb	r2, [r3, #2]
 8002096:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800209a:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 800209e:	2201      	movs	r2, #1
 80020a0:	711a      	strb	r2, [r3, #4]
 80020a2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80020a6:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80020aa:	2203      	movs	r2, #3
 80020ac:	741a      	strb	r2, [r3, #16]
 80020ae:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80020b2:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80020b6:	2202      	movs	r2, #2
 80020b8:	745a      	strb	r2, [r3, #17]
 80020ba:	4bdf      	ldr	r3, [pc, #892]	@ (8002438 <Game_init+0x828>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80020c2:	f5a3 7140 	sub.w	r1, r3, #768	@ 0x300
 80020c6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4419      	add	r1, r3
 80020ce:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80020d2:	440b      	add	r3, r1
 80020d4:	7819      	ldrb	r1, [r3, #0]
 80020d6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	441a      	add	r2, r3
 80020de:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80020e2:	4413      	add	r3, r2
 80020e4:	460a      	mov	r2, r1
 80020e6:	701a      	strb	r2, [r3, #0]
			AllBlocks[L_NUM_90]->Shape[i][j]=L_BLOCK_90.Shape[i][j];
 80020e8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80020ec:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 80020f0:	461a      	mov	r2, r3
 80020f2:	2300      	movs	r3, #0
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	6053      	str	r3, [r2, #4]
 80020f8:	6093      	str	r3, [r2, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
 80020fc:	6113      	str	r3, [r2, #16]
 80020fe:	6153      	str	r3, [r2, #20]
 8002100:	6193      	str	r3, [r2, #24]
 8002102:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002106:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002112:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002116:	2201      	movs	r2, #1
 8002118:	705a      	strb	r2, [r3, #1]
 800211a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800211e:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002122:	2201      	movs	r2, #1
 8002124:	715a      	strb	r2, [r3, #5]
 8002126:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800212a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800212e:	2201      	movs	r2, #1
 8002130:	725a      	strb	r2, [r3, #9]
 8002132:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002136:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 800213a:	2202      	movs	r2, #2
 800213c:	741a      	strb	r2, [r3, #16]
 800213e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002142:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002146:	2203      	movs	r2, #3
 8002148:	745a      	strb	r2, [r3, #17]
 800214a:	4bbb      	ldr	r3, [pc, #748]	@ (8002438 <Game_init+0x828>)
 800214c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002152:	f5a3 7147 	sub.w	r1, r3, #796	@ 0x31c
 8002156:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4419      	add	r1, r3
 800215e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002162:	440b      	add	r3, r1
 8002164:	7819      	ldrb	r1, [r3, #0]
 8002166:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002172:	4413      	add	r3, r2
 8002174:	460a      	mov	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
			AllBlocks[L_NUM_180]->Shape[i][j]=L_BLOCK_180.Shape[i][j];
 8002178:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800217c:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002180:	461a      	mov	r2, r3
 8002182:	2300      	movs	r3, #0
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	6053      	str	r3, [r2, #4]
 8002188:	6093      	str	r3, [r2, #8]
 800218a:	60d3      	str	r3, [r2, #12]
 800218c:	6113      	str	r3, [r2, #16]
 800218e:	6153      	str	r3, [r2, #20]
 8002190:	6193      	str	r3, [r2, #24]
 8002192:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002196:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 800219a:	2201      	movs	r2, #1
 800219c:	709a      	strb	r2, [r3, #2]
 800219e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80021a2:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021a6:	2201      	movs	r2, #1
 80021a8:	711a      	strb	r2, [r3, #4]
 80021aa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80021ae:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021b2:	2201      	movs	r2, #1
 80021b4:	715a      	strb	r2, [r3, #5]
 80021b6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80021ba:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021be:	2201      	movs	r2, #1
 80021c0:	719a      	strb	r2, [r3, #6]
 80021c2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80021c6:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021ca:	2203      	movs	r2, #3
 80021cc:	741a      	strb	r2, [r3, #16]
 80021ce:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80021d2:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80021d6:	2202      	movs	r2, #2
 80021d8:	745a      	strb	r2, [r3, #17]
 80021da:	4b97      	ldr	r3, [pc, #604]	@ (8002438 <Game_init+0x828>)
 80021dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021de:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80021e2:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 80021e6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4419      	add	r1, r3
 80021ee:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80021f2:	440b      	add	r3, r1
 80021f4:	7819      	ldrb	r1, [r3, #0]
 80021f6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002202:	4413      	add	r3, r2
 8002204:	460a      	mov	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
			AllBlocks[L_NUM_270]->Shape[i][j]=L_BLOCK_270.Shape[i][j];
 8002208:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800220c:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002210:	461a      	mov	r2, r3
 8002212:	2300      	movs	r3, #0
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	6053      	str	r3, [r2, #4]
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	60d3      	str	r3, [r2, #12]
 800221c:	6113      	str	r3, [r2, #16]
 800221e:	6153      	str	r3, [r2, #20]
 8002220:	6193      	str	r3, [r2, #24]
 8002222:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002226:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002232:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002236:	2201      	movs	r2, #1
 8002238:	711a      	strb	r2, [r3, #4]
 800223a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800223e:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002242:	2201      	movs	r2, #1
 8002244:	721a      	strb	r2, [r3, #8]
 8002246:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800224a:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800224e:	2201      	movs	r2, #1
 8002250:	725a      	strb	r2, [r3, #9]
 8002252:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002256:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800225a:	2202      	movs	r2, #2
 800225c:	741a      	strb	r2, [r3, #16]
 800225e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002262:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002266:	2203      	movs	r2, #3
 8002268:	745a      	strb	r2, [r3, #17]
 800226a:	4b73      	ldr	r3, [pc, #460]	@ (8002438 <Game_init+0x828>)
 800226c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800226e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002272:	f5a3 7155 	sub.w	r1, r3, #852	@ 0x354
 8002276:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4419      	add	r1, r3
 800227e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002282:	440b      	add	r3, r1
 8002284:	7819      	ldrb	r1, [r3, #0]
 8002286:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	441a      	add	r2, r3
 800228e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002292:	4413      	add	r3, r2
 8002294:	460a      	mov	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]

			AllBlocks[RS_NUM]->Shape[i][j]=RS_BLOCK.Shape[i][j];
 8002298:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800229c:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	6053      	str	r3, [r2, #4]
 80022a8:	6093      	str	r3, [r2, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
 80022ac:	6113      	str	r3, [r2, #16]
 80022ae:	6153      	str	r3, [r2, #20]
 80022b0:	6193      	str	r3, [r2, #24]
 80022b2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022b6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022c2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
 80022ca:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022ce:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022d2:	2201      	movs	r2, #1
 80022d4:	715a      	strb	r2, [r3, #5]
 80022d6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022da:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022de:	2201      	movs	r2, #1
 80022e0:	719a      	strb	r2, [r3, #6]
 80022e2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022e6:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022ea:	2203      	movs	r2, #3
 80022ec:	741a      	strb	r2, [r3, #16]
 80022ee:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80022f2:	f5a3 735c 	sub.w	r3, r3, #880	@ 0x370
 80022f6:	2202      	movs	r2, #2
 80022f8:	745a      	strb	r2, [r3, #17]
 80022fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <Game_init+0x828>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002302:	f5a3 715c 	sub.w	r1, r3, #880	@ 0x370
 8002306:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4419      	add	r1, r3
 800230e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002312:	440b      	add	r3, r1
 8002314:	7819      	ldrb	r1, [r3, #0]
 8002316:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002322:	4413      	add	r3, r2
 8002324:	460a      	mov	r2, r1
 8002326:	701a      	strb	r2, [r3, #0]
			AllBlocks[RS_NUM_VERT]->Shape[i][j]=RS_BLOCK_VERT.Shape[i][j];
 8002328:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800232c:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8002330:	461a      	mov	r2, r3
 8002332:	2300      	movs	r3, #0
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	6053      	str	r3, [r2, #4]
 8002338:	6093      	str	r3, [r2, #8]
 800233a:	60d3      	str	r3, [r2, #12]
 800233c:	6113      	str	r3, [r2, #16]
 800233e:	6153      	str	r3, [r2, #20]
 8002340:	6193      	str	r3, [r2, #24]
 8002342:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002346:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 800234a:	2201      	movs	r2, #1
 800234c:	705a      	strb	r2, [r3, #1]
 800234e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002352:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8002356:	2201      	movs	r2, #1
 8002358:	711a      	strb	r2, [r3, #4]
 800235a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800235e:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8002362:	2201      	movs	r2, #1
 8002364:	715a      	strb	r2, [r3, #5]
 8002366:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800236a:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 800236e:	2201      	movs	r2, #1
 8002370:	721a      	strb	r2, [r3, #8]
 8002372:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002376:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 800237a:	2202      	movs	r2, #2
 800237c:	741a      	strb	r2, [r3, #16]
 800237e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002382:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8002386:	2203      	movs	r2, #3
 8002388:	745a      	strb	r2, [r3, #17]
 800238a:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <Game_init+0x828>)
 800238c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800238e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002392:	f5a3 7163 	sub.w	r1, r3, #908	@ 0x38c
 8002396:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4419      	add	r1, r3
 800239e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80023a2:	440b      	add	r3, r1
 80023a4:	7819      	ldrb	r1, [r3, #0]
 80023a6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	441a      	add	r2, r3
 80023ae:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80023b2:	4413      	add	r3, r2
 80023b4:	460a      	mov	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]

			AllBlocks[S_NUM]->Shape[i][j]=S_BLOCK.Shape[i][j];
 80023b8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80023bc:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80023c0:	461a      	mov	r2, r3
 80023c2:	2300      	movs	r3, #0
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	6053      	str	r3, [r2, #4]
 80023c8:	6093      	str	r3, [r2, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
 80023cc:	6113      	str	r3, [r2, #16]
 80023ce:	6153      	str	r3, [r2, #20]
 80023d0:	6193      	str	r3, [r2, #24]
 80023d2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80023d6:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80023da:	2201      	movs	r2, #1
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80023e2:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80023e6:	2201      	movs	r2, #1
 80023e8:	709a      	strb	r2, [r3, #2]
 80023ea:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80023ee:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80023f2:	2201      	movs	r2, #1
 80023f4:	711a      	strb	r2, [r3, #4]
 80023f6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80023fa:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80023fe:	2201      	movs	r2, #1
 8002400:	715a      	strb	r2, [r3, #5]
 8002402:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002406:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800240a:	2203      	movs	r2, #3
 800240c:	741a      	strb	r2, [r3, #16]
 800240e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002412:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8002416:	2202      	movs	r2, #2
 8002418:	745a      	strb	r2, [r3, #17]
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <Game_init+0x828>)
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002422:	f5a3 716a 	sub.w	r1, r3, #936	@ 0x3a8
 8002426:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4419      	add	r1, r3
 800242e:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002432:	440b      	add	r3, r1
 8002434:	e002      	b.n	800243c <Game_init+0x82c>
 8002436:	bf00      	nop
 8002438:	20025af0 	.word	0x20025af0
 800243c:	7819      	ldrb	r1, [r3, #0]
 800243e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800244a:	4413      	add	r3, r2
 800244c:	460a      	mov	r2, r1
 800244e:	701a      	strb	r2, [r3, #0]
			AllBlocks[S_NUM_VERT]->Shape[i][j]=S_BLOCK_VERT.Shape[i][j];
 8002450:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002454:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8002458:	461a      	mov	r2, r3
 800245a:	2300      	movs	r3, #0
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	6053      	str	r3, [r2, #4]
 8002460:	6093      	str	r3, [r2, #8]
 8002462:	60d3      	str	r3, [r2, #12]
 8002464:	6113      	str	r3, [r2, #16]
 8002466:	6153      	str	r3, [r2, #20]
 8002468:	6193      	str	r3, [r2, #24]
 800246a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800246e:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800247a:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 800247e:	2201      	movs	r2, #1
 8002480:	711a      	strb	r2, [r3, #4]
 8002482:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002486:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 800248a:	2201      	movs	r2, #1
 800248c:	715a      	strb	r2, [r3, #5]
 800248e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002492:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8002496:	2201      	movs	r2, #1
 8002498:	725a      	strb	r2, [r3, #9]
 800249a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800249e:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80024a2:	2202      	movs	r2, #2
 80024a4:	741a      	strb	r2, [r3, #16]
 80024a6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80024aa:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 80024ae:	2203      	movs	r2, #3
 80024b0:	745a      	strb	r2, [r3, #17]
 80024b2:	4ba3      	ldr	r3, [pc, #652]	@ (8002740 <Game_init+0xb30>)
 80024b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024b6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80024ba:	f5a3 7171 	sub.w	r1, r3, #964	@ 0x3c4
 80024be:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4419      	add	r1, r3
 80024c6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80024ca:	440b      	add	r3, r1
 80024cc:	7819      	ldrb	r1, [r3, #0]
 80024ce:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80024da:	4413      	add	r3, r2
 80024dc:	460a      	mov	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]

			AllBlocks[T_NUM]->Shape[i][j]=T_BLOCK.Shape[i][j];
 80024e0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80024e4:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 80024e8:	461a      	mov	r2, r3
 80024ea:	2300      	movs	r3, #0
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	6053      	str	r3, [r2, #4]
 80024f0:	6093      	str	r3, [r2, #8]
 80024f2:	60d3      	str	r3, [r2, #12]
 80024f4:	6113      	str	r3, [r2, #16]
 80024f6:	6153      	str	r3, [r2, #20]
 80024f8:	6193      	str	r3, [r2, #24]
 80024fa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80024fe:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800250a:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 800250e:	2201      	movs	r2, #1
 8002510:	705a      	strb	r2, [r3, #1]
 8002512:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002516:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 800251a:	2201      	movs	r2, #1
 800251c:	709a      	strb	r2, [r3, #2]
 800251e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002522:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8002526:	2201      	movs	r2, #1
 8002528:	715a      	strb	r2, [r3, #5]
 800252a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800252e:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 8002532:	2203      	movs	r2, #3
 8002534:	741a      	strb	r2, [r3, #16]
 8002536:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800253a:	f5a3 7378 	sub.w	r3, r3, #992	@ 0x3e0
 800253e:	2202      	movs	r2, #2
 8002540:	745a      	strb	r2, [r3, #17]
 8002542:	4b7f      	ldr	r3, [pc, #508]	@ (8002740 <Game_init+0xb30>)
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800254a:	f5a3 7178 	sub.w	r1, r3, #992	@ 0x3e0
 800254e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4419      	add	r1, r3
 8002556:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800255a:	440b      	add	r3, r1
 800255c:	7819      	ldrb	r1, [r3, #0]
 800255e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	441a      	add	r2, r3
 8002566:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800256a:	4413      	add	r3, r2
 800256c:	460a      	mov	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
			AllBlocks[T_NUM_90]->Shape[i][j]=T_BLOCK_90.Shape[i][j];
 8002570:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002574:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002578:	461a      	mov	r2, r3
 800257a:	2300      	movs	r3, #0
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	6053      	str	r3, [r2, #4]
 8002580:	6093      	str	r3, [r2, #8]
 8002582:	60d3      	str	r3, [r2, #12]
 8002584:	6113      	str	r3, [r2, #16]
 8002586:	6153      	str	r3, [r2, #20]
 8002588:	6193      	str	r3, [r2, #24]
 800258a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800258e:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 8002592:	2201      	movs	r2, #1
 8002594:	705a      	strb	r2, [r3, #1]
 8002596:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800259a:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 800259e:	2201      	movs	r2, #1
 80025a0:	711a      	strb	r2, [r3, #4]
 80025a2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80025a6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025aa:	2201      	movs	r2, #1
 80025ac:	715a      	strb	r2, [r3, #5]
 80025ae:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80025b2:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025b6:	2201      	movs	r2, #1
 80025b8:	725a      	strb	r2, [r3, #9]
 80025ba:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80025be:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025c2:	2202      	movs	r2, #2
 80025c4:	741a      	strb	r2, [r3, #16]
 80025c6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80025ca:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80025ce:	2203      	movs	r2, #3
 80025d0:	745a      	strb	r2, [r3, #17]
 80025d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002740 <Game_init+0xb30>)
 80025d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025d6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80025da:	f5a3 717f 	sub.w	r1, r3, #1020	@ 0x3fc
 80025de:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4419      	add	r1, r3
 80025e6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80025ea:	440b      	add	r3, r1
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	441a      	add	r2, r3
 80025f6:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 80025fa:	4413      	add	r3, r2
 80025fc:	460a      	mov	r2, r1
 80025fe:	701a      	strb	r2, [r3, #0]
			AllBlocks[T_NUM_180]->Shape[i][j]=T_BLOCK_180.Shape[i][j];
 8002600:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002604:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8002608:	461a      	mov	r2, r3
 800260a:	2300      	movs	r3, #0
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	6053      	str	r3, [r2, #4]
 8002610:	6093      	str	r3, [r2, #8]
 8002612:	60d3      	str	r3, [r2, #12]
 8002614:	6113      	str	r3, [r2, #16]
 8002616:	6153      	str	r3, [r2, #20]
 8002618:	6193      	str	r3, [r2, #24]
 800261a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800261e:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8002622:	2201      	movs	r2, #1
 8002624:	705a      	strb	r2, [r3, #1]
 8002626:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800262a:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800262e:	2201      	movs	r2, #1
 8002630:	711a      	strb	r2, [r3, #4]
 8002632:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002636:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800263a:	2201      	movs	r2, #1
 800263c:	715a      	strb	r2, [r3, #5]
 800263e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002642:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8002646:	2201      	movs	r2, #1
 8002648:	719a      	strb	r2, [r3, #6]
 800264a:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800264e:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8002652:	2203      	movs	r2, #3
 8002654:	741a      	strb	r2, [r3, #16]
 8002656:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800265a:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 800265e:	2202      	movs	r2, #2
 8002660:	745a      	strb	r2, [r3, #17]
 8002662:	4b37      	ldr	r3, [pc, #220]	@ (8002740 <Game_init+0xb30>)
 8002664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002666:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 800266a:	f5a3 6183 	sub.w	r1, r3, #1048	@ 0x418
 800266e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4419      	add	r1, r3
 8002676:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800267a:	440b      	add	r3, r1
 800267c:	7819      	ldrb	r1, [r3, #0]
 800267e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800268a:	4413      	add	r3, r2
 800268c:	460a      	mov	r2, r1
 800268e:	701a      	strb	r2, [r3, #0]
			AllBlocks[T_NUM_270]->Shape[i][j]=T_BLOCK_270.Shape[i][j];
 8002690:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002694:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8002698:	461a      	mov	r2, r3
 800269a:	2300      	movs	r3, #0
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	6053      	str	r3, [r2, #4]
 80026a0:	6093      	str	r3, [r2, #8]
 80026a2:	60d3      	str	r3, [r2, #12]
 80026a4:	6113      	str	r3, [r2, #16]
 80026a6:	6153      	str	r3, [r2, #20]
 80026a8:	6193      	str	r3, [r2, #24]
 80026aa:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026ae:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026ba:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80026be:	2201      	movs	r2, #1
 80026c0:	711a      	strb	r2, [r3, #4]
 80026c2:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026c6:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80026ca:	2201      	movs	r2, #1
 80026cc:	715a      	strb	r2, [r3, #5]
 80026ce:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026d2:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80026d6:	2201      	movs	r2, #1
 80026d8:	721a      	strb	r2, [r3, #8]
 80026da:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026de:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80026e2:	2202      	movs	r2, #2
 80026e4:	741a      	strb	r2, [r3, #16]
 80026e6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026ea:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 80026ee:	2203      	movs	r2, #3
 80026f0:	745a      	strb	r2, [r3, #17]
 80026f2:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <Game_init+0xb30>)
 80026f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026f6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80026fa:	f2a3 4134 	subw	r1, r3, #1076	@ 0x434
 80026fe:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4419      	add	r1, r3
 8002706:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800270a:	440b      	add	r3, r1
 800270c:	7819      	ldrb	r1, [r3, #0]
 800270e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800271a:	4413      	add	r3, r2
 800271c:	460a      	mov	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<SHAPE_ARR_SIZE;j++){
 8002720:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8002724:	3301      	adds	r3, #1
 8002726:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800272a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 800272e:	2b03      	cmp	r3, #3
 8002730:	f77f aa96 	ble.w	8001c60 <Game_init+0x50>
	for(int i = 0; i<SHAPE_ARR_SIZE; i++){
 8002734:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002738:	3301      	adds	r3, #1
 800273a:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
 800273e:	e001      	b.n	8002744 <Game_init+0xb34>
 8002740:	20025af0 	.word	0x20025af0
 8002744:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 8002748:	2b03      	cmp	r3, #3
 800274a:	f77f aa81 	ble.w	8001c50 <Game_init+0x40>
		}
	}
	Game_Set_Block(SQUARE_NUM, SQUARE_BLOCK, SQUARE_NUM,SQUARE_NUM);
 800274e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	615a      	str	r2, [r3, #20]
 8002760:	619a      	str	r2, [r3, #24]
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3410 	strb.w	r3, [r7, #1040]	@ 0x410
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3411 	strb.w	r3, [r7, #1041]	@ 0x411
 800276e:	2301      	movs	r3, #1
 8002770:	f887 3414 	strb.w	r3, [r7, #1044]	@ 0x414
 8002774:	2301      	movs	r3, #1
 8002776:	f887 3415 	strb.w	r3, [r7, #1045]	@ 0x415
 800277a:	2302      	movs	r3, #2
 800277c:	f887 3420 	strb.w	r3, [r7, #1056]	@ 0x420
 8002780:	2302      	movs	r3, #2
 8002782:	f887 3421 	strb.w	r3, [r7, #1057]	@ 0x421
 8002786:	2300      	movs	r3, #0
 8002788:	9305      	str	r3, [sp, #20]
 800278a:	2300      	movs	r3, #0
 800278c:	9304      	str	r3, [sp, #16]
 800278e:	466c      	mov	r4, sp
 8002790:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8002794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002796:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800279a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800279e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a0:	2000      	movs	r0, #0
 80027a2:	f000 fc63 	bl	800306c <Game_Set_Block>
	Game_Set_Block(LINE_NUM, LINE_BLOCK, LINE_NUM_VERT, LINE_NUM_VERT);
 80027a6:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	615a      	str	r2, [r3, #20]
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 33f4 	strb.w	r3, [r7, #1012]	@ 0x3f4
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 33f5 	strb.w	r3, [r7, #1013]	@ 0x3f5
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 33f6 	strb.w	r3, [r7, #1014]	@ 0x3f6
 80027cc:	2301      	movs	r3, #1
 80027ce:	f887 33f7 	strb.w	r3, [r7, #1015]	@ 0x3f7
 80027d2:	2304      	movs	r3, #4
 80027d4:	f887 3404 	strb.w	r3, [r7, #1028]	@ 0x404
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 80027de:	2307      	movs	r3, #7
 80027e0:	9305      	str	r3, [sp, #20]
 80027e2:	2307      	movs	r3, #7
 80027e4:	9304      	str	r3, [sp, #16]
 80027e6:	466c      	mov	r4, sp
 80027e8:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80027ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027f2:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 80027f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f8:	2001      	movs	r0, #1
 80027fa:	f000 fc37 	bl	800306c <Game_Set_Block>
	Game_Set_Block(LINE_NUM_VERT, LINE_BLOCK_VERT, LINE_NUM, LINE_NUM);
 80027fe:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	615a      	str	r2, [r3, #20]
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	2301      	movs	r3, #1
 8002814:	f887 33d8 	strb.w	r3, [r7, #984]	@ 0x3d8
 8002818:	2301      	movs	r3, #1
 800281a:	f887 33dc 	strb.w	r3, [r7, #988]	@ 0x3dc
 800281e:	2301      	movs	r3, #1
 8002820:	f887 33e0 	strb.w	r3, [r7, #992]	@ 0x3e0
 8002824:	2301      	movs	r3, #1
 8002826:	f887 33e4 	strb.w	r3, [r7, #996]	@ 0x3e4
 800282a:	2301      	movs	r3, #1
 800282c:	f887 33e8 	strb.w	r3, [r7, #1000]	@ 0x3e8
 8002830:	2304      	movs	r3, #4
 8002832:	f887 33e9 	strb.w	r3, [r7, #1001]	@ 0x3e9
 8002836:	2301      	movs	r3, #1
 8002838:	9305      	str	r3, [sp, #20]
 800283a:	2301      	movs	r3, #1
 800283c:	9304      	str	r3, [sp, #16]
 800283e:	466c      	mov	r4, sp
 8002840:	f507 7379 	add.w	r3, r7, #996	@ 0x3e4
 8002844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800284a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	2007      	movs	r0, #7
 8002852:	f000 fc0b 	bl	800306c <Game_Set_Block>

	Game_Set_Block(RL_NUM, RL_BLOCK, RL_NUM_90, RL_NUM_270);
 8002856:	f507 736f 	add.w	r3, r7, #956	@ 0x3bc
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]
 8002866:	615a      	str	r2, [r3, #20]
 8002868:	619a      	str	r2, [r3, #24]
 800286a:	2301      	movs	r3, #1
 800286c:	f887 33bc 	strb.w	r3, [r7, #956]	@ 0x3bc
 8002870:	2301      	movs	r3, #1
 8002872:	f887 33bd 	strb.w	r3, [r7, #957]	@ 0x3bd
 8002876:	2301      	movs	r3, #1
 8002878:	f887 33be 	strb.w	r3, [r7, #958]	@ 0x3be
 800287c:	2301      	movs	r3, #1
 800287e:	f887 33c2 	strb.w	r3, [r7, #962]	@ 0x3c2
 8002882:	2303      	movs	r3, #3
 8002884:	f887 33cc 	strb.w	r3, [r7, #972]	@ 0x3cc
 8002888:	2302      	movs	r3, #2
 800288a:	f887 33cd 	strb.w	r3, [r7, #973]	@ 0x3cd
 800288e:	230a      	movs	r3, #10
 8002890:	9305      	str	r3, [sp, #20]
 8002892:	2308      	movs	r3, #8
 8002894:	9304      	str	r3, [sp, #16]
 8002896:	466c      	mov	r4, sp
 8002898:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800289c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028a2:	f507 736f 	add.w	r3, r7, #956	@ 0x3bc
 80028a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a8:	2002      	movs	r0, #2
 80028aa:	f000 fbdf 	bl	800306c <Game_Set_Block>
	Game_Set_Block(RL_NUM_90, RL_BLOCK_90, RL_NUM_180, RL_NUM);
 80028ae:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	611a      	str	r2, [r3, #16]
 80028be:	615a      	str	r2, [r3, #20]
 80028c0:	619a      	str	r2, [r3, #24]
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 33a1 	strb.w	r3, [r7, #929]	@ 0x3a1
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 33a5 	strb.w	r3, [r7, #933]	@ 0x3a5
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 33a8 	strb.w	r3, [r7, #936]	@ 0x3a8
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 33a9 	strb.w	r3, [r7, #937]	@ 0x3a9
 80028da:	2302      	movs	r3, #2
 80028dc:	f887 33b0 	strb.w	r3, [r7, #944]	@ 0x3b0
 80028e0:	2303      	movs	r3, #3
 80028e2:	f887 33b1 	strb.w	r3, [r7, #945]	@ 0x3b1
 80028e6:	2302      	movs	r3, #2
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	2309      	movs	r3, #9
 80028ec:	9304      	str	r3, [sp, #16]
 80028ee:	466c      	mov	r4, sp
 80028f0:	f507 736b 	add.w	r3, r7, #940	@ 0x3ac
 80028f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028fa:	f507 7368 	add.w	r3, r7, #928	@ 0x3a0
 80028fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002900:	2008      	movs	r0, #8
 8002902:	f000 fbb3 	bl	800306c <Game_Set_Block>
	Game_Set_Block(RL_NUM_180, RL_BLOCK_180, RL_NUM_270, RL_NUM_90);
 8002906:	f507 7361 	add.w	r3, r7, #900	@ 0x384
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	615a      	str	r2, [r3, #20]
 8002918:	619a      	str	r2, [r3, #24]
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3384 	strb.w	r3, [r7, #900]	@ 0x384
 8002920:	2301      	movs	r3, #1
 8002922:	f887 3388 	strb.w	r3, [r7, #904]	@ 0x388
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3389 	strb.w	r3, [r7, #905]	@ 0x389
 800292c:	2301      	movs	r3, #1
 800292e:	f887 338a 	strb.w	r3, [r7, #906]	@ 0x38a
 8002932:	2303      	movs	r3, #3
 8002934:	f887 3394 	strb.w	r3, [r7, #916]	@ 0x394
 8002938:	2302      	movs	r3, #2
 800293a:	f887 3395 	strb.w	r3, [r7, #917]	@ 0x395
 800293e:	2308      	movs	r3, #8
 8002940:	9305      	str	r3, [sp, #20]
 8002942:	230a      	movs	r3, #10
 8002944:	9304      	str	r3, [sp, #16]
 8002946:	466c      	mov	r4, sp
 8002948:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 800294c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800294e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002952:	f507 7361 	add.w	r3, r7, #900	@ 0x384
 8002956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002958:	2009      	movs	r0, #9
 800295a:	f000 fb87 	bl	800306c <Game_Set_Block>
	Game_Set_Block(RL_NUM_270, RL_BLOCK_270, RL_NUM, RL_NUM_180);
 800295e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	611a      	str	r2, [r3, #16]
 800296e:	615a      	str	r2, [r3, #20]
 8002970:	619a      	str	r2, [r3, #24]
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3368 	strb.w	r3, [r7, #872]	@ 0x368
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3369 	strb.w	r3, [r7, #873]	@ 0x369
 800297e:	2301      	movs	r3, #1
 8002980:	f887 336c 	strb.w	r3, [r7, #876]	@ 0x36c
 8002984:	2301      	movs	r3, #1
 8002986:	f887 3370 	strb.w	r3, [r7, #880]	@ 0x370
 800298a:	2302      	movs	r3, #2
 800298c:	f887 3378 	strb.w	r3, [r7, #888]	@ 0x378
 8002990:	2303      	movs	r3, #3
 8002992:	f887 3379 	strb.w	r3, [r7, #889]	@ 0x379
 8002996:	2309      	movs	r3, #9
 8002998:	9305      	str	r3, [sp, #20]
 800299a:	2302      	movs	r3, #2
 800299c:	9304      	str	r3, [sp, #16]
 800299e:	466c      	mov	r4, sp
 80029a0:	f507 735d 	add.w	r3, r7, #884	@ 0x374
 80029a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029aa:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	200a      	movs	r0, #10
 80029b2:	f000 fb5b 	bl	800306c <Game_Set_Block>

	Game_Set_Block(L_NUM, L_BLOCK, L_NUM_90, L_NUM_270);
 80029b6:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	615a      	str	r2, [r3, #20]
 80029c8:	619a      	str	r2, [r3, #24]
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 334c 	strb.w	r3, [r7, #844]	@ 0x34c
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 334d 	strb.w	r3, [r7, #845]	@ 0x34d
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 334e 	strb.w	r3, [r7, #846]	@ 0x34e
 80029dc:	2301      	movs	r3, #1
 80029de:	f887 3350 	strb.w	r3, [r7, #848]	@ 0x350
 80029e2:	2303      	movs	r3, #3
 80029e4:	f887 335c 	strb.w	r3, [r7, #860]	@ 0x35c
 80029e8:	2302      	movs	r3, #2
 80029ea:	f887 335d 	strb.w	r3, [r7, #861]	@ 0x35d
 80029ee:	230d      	movs	r3, #13
 80029f0:	9305      	str	r3, [sp, #20]
 80029f2:	230b      	movs	r3, #11
 80029f4:	9304      	str	r3, [sp, #16]
 80029f6:	466c      	mov	r4, sp
 80029f8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80029fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a02:	f507 7353 	add.w	r3, r7, #844	@ 0x34c
 8002a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 fb2f 	bl	800306c <Game_Set_Block>
	Game_Set_Block(L_NUM_90, L_BLOCK_90, L_NUM_180, L_NUM);
 8002a0e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a16:	461a      	mov	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	6053      	str	r3, [r2, #4]
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	60d3      	str	r3, [r2, #12]
 8002a22:	6113      	str	r3, [r2, #16]
 8002a24:	6153      	str	r3, [r2, #20]
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	705a      	strb	r2, [r3, #1]
 8002a40:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a48:	2201      	movs	r2, #1
 8002a4a:	715a      	strb	r2, [r3, #5]
 8002a4c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a54:	2201      	movs	r2, #1
 8002a56:	725a      	strb	r2, [r3, #9]
 8002a58:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a60:	2202      	movs	r2, #2
 8002a62:	741a      	strb	r2, [r3, #16]
 8002a64:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	745a      	strb	r2, [r3, #17]
 8002a70:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a74:	f5a3 7484 	sub.w	r4, r3, #264	@ 0x108
 8002a78:	2303      	movs	r3, #3
 8002a7a:	9305      	str	r3, [sp, #20]
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	9304      	str	r3, [sp, #16]
 8002a80:	466d      	mov	r5, sp
 8002a82:	f104 030c 	add.w	r3, r4, #12
 8002a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a88:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002a8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002a90:	200b      	movs	r0, #11
 8002a92:	f000 faeb 	bl	800306c <Game_Set_Block>
	Game_Set_Block(L_NUM_180, L_BLOCK_180, L_NUM_270, L_NUM_90);
 8002a96:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002a9a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	6053      	str	r3, [r2, #4]
 8002aa6:	6093      	str	r3, [r2, #8]
 8002aa8:	60d3      	str	r3, [r2, #12]
 8002aaa:	6113      	str	r3, [r2, #16]
 8002aac:	6153      	str	r3, [r2, #20]
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ab4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ab8:	2201      	movs	r2, #1
 8002aba:	709a      	strb	r2, [r3, #2]
 8002abc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ac0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	711a      	strb	r2, [r3, #4]
 8002ac8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002acc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	715a      	strb	r2, [r3, #5]
 8002ad4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ad8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002adc:	2201      	movs	r2, #1
 8002ade:	719a      	strb	r2, [r3, #6]
 8002ae0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ae4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ae8:	2203      	movs	r2, #3
 8002aea:	741a      	strb	r2, [r3, #16]
 8002aec:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002af0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002af4:	2202      	movs	r2, #2
 8002af6:	745a      	strb	r2, [r3, #17]
 8002af8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002afc:	f5a3 7492 	sub.w	r4, r3, #292	@ 0x124
 8002b00:	230b      	movs	r3, #11
 8002b02:	9305      	str	r3, [sp, #20]
 8002b04:	230d      	movs	r3, #13
 8002b06:	9304      	str	r3, [sp, #16]
 8002b08:	466d      	mov	r5, sp
 8002b0a:	f104 030c 	add.w	r3, r4, #12
 8002b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b14:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002b18:	200c      	movs	r0, #12
 8002b1a:	f000 faa7 	bl	800306c <Game_Set_Block>
	Game_Set_Block(L_NUM_270, L_BLOCK_270, L_NUM, L_NUM_180);
 8002b1e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b22:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b26:	461a      	mov	r2, r3
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	6053      	str	r3, [r2, #4]
 8002b2e:	6093      	str	r3, [r2, #8]
 8002b30:	60d3      	str	r3, [r2, #12]
 8002b32:	6113      	str	r3, [r2, #16]
 8002b34:	6153      	str	r3, [r2, #20]
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b3c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	711a      	strb	r2, [r3, #4]
 8002b50:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b58:	2201      	movs	r2, #1
 8002b5a:	721a      	strb	r2, [r3, #8]
 8002b5c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b64:	2201      	movs	r2, #1
 8002b66:	725a      	strb	r2, [r3, #9]
 8002b68:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b70:	2202      	movs	r2, #2
 8002b72:	741a      	strb	r2, [r3, #16]
 8002b74:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	745a      	strb	r2, [r3, #17]
 8002b80:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002b84:	f5a3 74a0 	sub.w	r4, r3, #320	@ 0x140
 8002b88:	230c      	movs	r3, #12
 8002b8a:	9305      	str	r3, [sp, #20]
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	9304      	str	r3, [sp, #16]
 8002b90:	466d      	mov	r5, sp
 8002b92:	f104 030c 	add.w	r3, r4, #12
 8002b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002b9c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002ba0:	200d      	movs	r0, #13
 8002ba2:	f000 fa63 	bl	800306c <Game_Set_Block>

	Game_Set_Block(RS_NUM, RS_BLOCK, RS_NUM_VERT, RS_NUM_VERT);
 8002ba6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002baa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	6053      	str	r3, [r2, #4]
 8002bb6:	6093      	str	r3, [r2, #8]
 8002bb8:	60d3      	str	r3, [r2, #12]
 8002bba:	6113      	str	r3, [r2, #16]
 8002bbc:	6153      	str	r3, [r2, #20]
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002bc4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002bd0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	705a      	strb	r2, [r3, #1]
 8002bd8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002bdc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002be0:	2201      	movs	r2, #1
 8002be2:	715a      	strb	r2, [r3, #5]
 8002be4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002be8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002bec:	2201      	movs	r2, #1
 8002bee:	719a      	strb	r2, [r3, #6]
 8002bf0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002bf4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	741a      	strb	r2, [r3, #16]
 8002bfc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c00:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002c04:	2202      	movs	r2, #2
 8002c06:	745a      	strb	r2, [r3, #17]
 8002c08:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c0c:	f5a3 74ae 	sub.w	r4, r3, #348	@ 0x15c
 8002c10:	230f      	movs	r3, #15
 8002c12:	9305      	str	r3, [sp, #20]
 8002c14:	230f      	movs	r3, #15
 8002c16:	9304      	str	r3, [sp, #16]
 8002c18:	466d      	mov	r5, sp
 8002c1a:	f104 030c 	add.w	r3, r4, #12
 8002c1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002c28:	2005      	movs	r0, #5
 8002c2a:	f000 fa1f 	bl	800306c <Game_Set_Block>
	Game_Set_Block(RS_NUM_VERT, RS_BLOCK_VERT, RS_NUM, RS_NUM);
 8002c2e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c32:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c36:	461a      	mov	r2, r3
 8002c38:	2300      	movs	r3, #0
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	6053      	str	r3, [r2, #4]
 8002c3e:	6093      	str	r3, [r2, #8]
 8002c40:	60d3      	str	r3, [r2, #12]
 8002c42:	6113      	str	r3, [r2, #16]
 8002c44:	6153      	str	r3, [r2, #20]
 8002c46:	6193      	str	r3, [r2, #24]
 8002c48:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c4c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c50:	2201      	movs	r2, #1
 8002c52:	705a      	strb	r2, [r3, #1]
 8002c54:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c58:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	711a      	strb	r2, [r3, #4]
 8002c60:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c64:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c68:	2201      	movs	r2, #1
 8002c6a:	715a      	strb	r2, [r3, #5]
 8002c6c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c70:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c74:	2201      	movs	r2, #1
 8002c76:	721a      	strb	r2, [r3, #8]
 8002c78:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c7c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c80:	2202      	movs	r2, #2
 8002c82:	741a      	strb	r2, [r3, #16]
 8002c84:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c88:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	745a      	strb	r2, [r3, #17]
 8002c90:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002c94:	f5a3 74bc 	sub.w	r4, r3, #376	@ 0x178
 8002c98:	2305      	movs	r3, #5
 8002c9a:	9305      	str	r3, [sp, #20]
 8002c9c:	2305      	movs	r3, #5
 8002c9e:	9304      	str	r3, [sp, #16]
 8002ca0:	466d      	mov	r5, sp
 8002ca2:	f104 030c 	add.w	r3, r4, #12
 8002ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002cac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002cb0:	200f      	movs	r0, #15
 8002cb2:	f000 f9db 	bl	800306c <Game_Set_Block>

	Game_Set_Block(S_NUM, S_BLOCK, S_NUM_VERT, S_NUM_VERT);
 8002cb6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002cba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	6053      	str	r3, [r2, #4]
 8002cc6:	6093      	str	r3, [r2, #8]
 8002cc8:	60d3      	str	r3, [r2, #12]
 8002cca:	6113      	str	r3, [r2, #16]
 8002ccc:	6153      	str	r3, [r2, #20]
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002cd4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cd8:	2201      	movs	r2, #1
 8002cda:	705a      	strb	r2, [r3, #1]
 8002cdc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ce0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	709a      	strb	r2, [r3, #2]
 8002ce8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002cec:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	711a      	strb	r2, [r3, #4]
 8002cf4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002cf8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	715a      	strb	r2, [r3, #5]
 8002d00:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d04:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d08:	2203      	movs	r2, #3
 8002d0a:	741a      	strb	r2, [r3, #16]
 8002d0c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d10:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002d14:	2202      	movs	r2, #2
 8002d16:	745a      	strb	r2, [r3, #17]
 8002d18:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d1c:	f5a3 74ca 	sub.w	r4, r3, #404	@ 0x194
 8002d20:	230e      	movs	r3, #14
 8002d22:	9305      	str	r3, [sp, #20]
 8002d24:	230e      	movs	r3, #14
 8002d26:	9304      	str	r3, [sp, #16]
 8002d28:	466d      	mov	r5, sp
 8002d2a:	f104 030c 	add.w	r3, r4, #12
 8002d2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002d34:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002d38:	2004      	movs	r0, #4
 8002d3a:	f000 f997 	bl	800306c <Game_Set_Block>
	Game_Set_Block(S_NUM_VERT, S_BLOCK_VERT, S_NUM, S_NUM);
 8002d3e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d42:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d46:	461a      	mov	r2, r3
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	6053      	str	r3, [r2, #4]
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	60d3      	str	r3, [r2, #12]
 8002d52:	6113      	str	r3, [r2, #16]
 8002d54:	6153      	str	r3, [r2, #20]
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d5c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d68:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	711a      	strb	r2, [r3, #4]
 8002d70:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d74:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d78:	2201      	movs	r2, #1
 8002d7a:	715a      	strb	r2, [r3, #5]
 8002d7c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d84:	2201      	movs	r2, #1
 8002d86:	725a      	strb	r2, [r3, #9]
 8002d88:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d8c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d90:	2202      	movs	r2, #2
 8002d92:	741a      	strb	r2, [r3, #16]
 8002d94:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002d98:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	745a      	strb	r2, [r3, #17]
 8002da0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002da4:	f5a3 74d8 	sub.w	r4, r3, #432	@ 0x1b0
 8002da8:	2304      	movs	r3, #4
 8002daa:	9305      	str	r3, [sp, #20]
 8002dac:	2304      	movs	r3, #4
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	466d      	mov	r5, sp
 8002db2:	f104 030c 	add.w	r3, r4, #12
 8002db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002db8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002dbc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002dc0:	200e      	movs	r0, #14
 8002dc2:	f000 f953 	bl	800306c <Game_Set_Block>

	Game_Set_Block(T_NUM, T_BLOCK, T_NUM_90, T_NUM_270);
 8002dc6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002dca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	6053      	str	r3, [r2, #4]
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	60d3      	str	r3, [r2, #12]
 8002dda:	6113      	str	r3, [r2, #16]
 8002ddc:	6153      	str	r3, [r2, #20]
 8002dde:	6193      	str	r3, [r2, #24]
 8002de0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002de4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002de8:	2201      	movs	r2, #1
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002df0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002dfc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002e00:	2201      	movs	r2, #1
 8002e02:	709a      	strb	r2, [r3, #2]
 8002e04:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e08:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	715a      	strb	r2, [r3, #5]
 8002e10:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e14:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002e18:	2203      	movs	r2, #3
 8002e1a:	741a      	strb	r2, [r3, #16]
 8002e1c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e20:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8002e24:	2202      	movs	r2, #2
 8002e26:	745a      	strb	r2, [r3, #17]
 8002e28:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e2c:	f5a3 74e6 	sub.w	r4, r3, #460	@ 0x1cc
 8002e30:	2312      	movs	r3, #18
 8002e32:	9305      	str	r3, [sp, #20]
 8002e34:	2310      	movs	r3, #16
 8002e36:	9304      	str	r3, [sp, #16]
 8002e38:	466d      	mov	r5, sp
 8002e3a:	f104 030c 	add.w	r3, r4, #12
 8002e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002e44:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002e48:	2006      	movs	r0, #6
 8002e4a:	f000 f90f 	bl	800306c <Game_Set_Block>
	Game_Set_Block(T_NUM_90, T_BLOCK_90, T_NUM_180, T_NUM);
 8002e4e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e52:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e56:	461a      	mov	r2, r3
 8002e58:	2300      	movs	r3, #0
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	6053      	str	r3, [r2, #4]
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	60d3      	str	r3, [r2, #12]
 8002e62:	6113      	str	r3, [r2, #16]
 8002e64:	6153      	str	r3, [r2, #20]
 8002e66:	6193      	str	r3, [r2, #24]
 8002e68:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e6c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e70:	2201      	movs	r2, #1
 8002e72:	705a      	strb	r2, [r3, #1]
 8002e74:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e78:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	711a      	strb	r2, [r3, #4]
 8002e80:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e84:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e88:	2201      	movs	r2, #1
 8002e8a:	715a      	strb	r2, [r3, #5]
 8002e8c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e90:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002e94:	2201      	movs	r2, #1
 8002e96:	725a      	strb	r2, [r3, #9]
 8002e98:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002e9c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	741a      	strb	r2, [r3, #16]
 8002ea4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ea8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002eac:	2203      	movs	r2, #3
 8002eae:	745a      	strb	r2, [r3, #17]
 8002eb0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002eb4:	f5a3 74f4 	sub.w	r4, r3, #488	@ 0x1e8
 8002eb8:	2306      	movs	r3, #6
 8002eba:	9305      	str	r3, [sp, #20]
 8002ebc:	2311      	movs	r3, #17
 8002ebe:	9304      	str	r3, [sp, #16]
 8002ec0:	466d      	mov	r5, sp
 8002ec2:	f104 030c 	add.w	r3, r4, #12
 8002ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002ecc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002ed0:	2010      	movs	r0, #16
 8002ed2:	f000 f8cb 	bl	800306c <Game_Set_Block>
	Game_Set_Block(T_NUM_180, T_BLOCK_180, T_NUM_270, T_NUM_90);
 8002ed6:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	6053      	str	r3, [r2, #4]
 8002ee6:	6093      	str	r3, [r2, #8]
 8002ee8:	60d3      	str	r3, [r2, #12]
 8002eea:	6113      	str	r3, [r2, #16]
 8002eec:	6153      	str	r3, [r2, #20]
 8002eee:	6193      	str	r3, [r2, #24]
 8002ef0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002ef4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ef8:	2201      	movs	r2, #1
 8002efa:	705a      	strb	r2, [r3, #1]
 8002efc:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f04:	2201      	movs	r2, #1
 8002f06:	711a      	strb	r2, [r3, #4]
 8002f08:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f10:	2201      	movs	r2, #1
 8002f12:	715a      	strb	r2, [r3, #5]
 8002f14:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	719a      	strb	r2, [r3, #6]
 8002f20:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f28:	2203      	movs	r2, #3
 8002f2a:	741a      	strb	r2, [r3, #16]
 8002f2c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f30:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f34:	2202      	movs	r2, #2
 8002f36:	745a      	strb	r2, [r3, #17]
 8002f38:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f3c:	f5a3 7401 	sub.w	r4, r3, #516	@ 0x204
 8002f40:	2310      	movs	r3, #16
 8002f42:	9305      	str	r3, [sp, #20]
 8002f44:	2312      	movs	r3, #18
 8002f46:	9304      	str	r3, [sp, #16]
 8002f48:	466d      	mov	r5, sp
 8002f4a:	f104 030c 	add.w	r3, r4, #12
 8002f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f50:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002f54:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002f58:	2011      	movs	r0, #17
 8002f5a:	f000 f887 	bl	800306c <Game_Set_Block>
	Game_Set_Block(T_NUM_270, T_BLOCK_270, T_NUM, T_NUM_180);
 8002f5e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f62:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f66:	461a      	mov	r2, r3
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	6053      	str	r3, [r2, #4]
 8002f6e:	6093      	str	r3, [r2, #8]
 8002f70:	60d3      	str	r3, [r2, #12]
 8002f72:	6113      	str	r3, [r2, #16]
 8002f74:	6153      	str	r3, [r2, #20]
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f7c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f88:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	711a      	strb	r2, [r3, #4]
 8002f90:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002f94:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002f98:	2201      	movs	r2, #1
 8002f9a:	715a      	strb	r2, [r3, #5]
 8002f9c:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002fa0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	721a      	strb	r2, [r3, #8]
 8002fa8:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002fac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	741a      	strb	r2, [r3, #16]
 8002fb4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002fb8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	745a      	strb	r2, [r3, #17]
 8002fc0:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8002fc4:	f5a3 7408 	sub.w	r4, r3, #544	@ 0x220
 8002fc8:	2311      	movs	r3, #17
 8002fca:	9305      	str	r3, [sp, #20]
 8002fcc:	2306      	movs	r3, #6
 8002fce:	9304      	str	r3, [sp, #16]
 8002fd0:	466d      	mov	r5, sp
 8002fd2:	f104 030c 	add.w	r3, r4, #12
 8002fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fd8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002fdc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002fe0:	2012      	movs	r0, #18
 8002fe2:	f000 f843 	bl	800306c <Game_Set_Block>

	Alive=1;
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <Game_init+0x13ec>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
	CurrentBlockNum=7;
 8002fec:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <Game_init+0x13f0>)
 8002fee:	2207      	movs	r2, #7
 8002ff0:	701a      	strb	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	f507 6787 	add.w	r7, r7, #1080	@ 0x438
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffc:	20000014 	.word	0x20000014
 8003000:	20025aea 	.word	0x20025aea

08003004 <Game_Start>:
void Game_Start(){
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
	for(int x = 0; x<10; x++){
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	e016      	b.n	800303e <Game_Start+0x3a>
		for(int y = 0; y<20; y++){
 8003010:	2300      	movs	r3, #0
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	e00d      	b.n	8003032 <Game_Start+0x2e>
			GameState[x][y]=false;
 8003016:	4912      	ldr	r1, [pc, #72]	@ (8003060 <Game_Start+0x5c>)
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	18ca      	adds	r2, r1, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	4413      	add	r3, r2
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
		for(int y = 0; y<20; y++){
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b13      	cmp	r3, #19
 8003036:	ddee      	ble.n	8003016 <Game_Start+0x12>
	for(int x = 0; x<10; x++){
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3301      	adds	r3, #1
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b09      	cmp	r3, #9
 8003042:	dde5      	ble.n	8003010 <Game_Start+0xc>
		}
	}
	Game_Reset_Clears();
 8003044:	f000 fb08 	bl	8003658 <Game_Reset_Clears>
	CurrentBlockNum=7;
 8003048:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <Game_Start+0x60>)
 800304a:	2207      	movs	r2, #7
 800304c:	701a      	strb	r2, [r3, #0]
	Alive = 1;
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <Game_Start+0x64>)
 8003050:	2201      	movs	r2, #1
 8003052:	701a      	strb	r2, [r3, #0]
	Game_Spawn_Block();
 8003054:	f000 f91e 	bl	8003294 <Game_Spawn_Block>
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20025a20 	.word	0x20025a20
 8003064:	20025aea 	.word	0x20025aea
 8003068:	20000014 	.word	0x20000014

0800306c <Game_Set_Block>:

void Game_Set_Block(uint8_t blockNum, Game_Block block, uint8_t nextBlockNum, uint8_t prevBlockNum){
 800306c:	b084      	sub	sp, #16
 800306e:	b490      	push	{r4, r7}
 8003070:	b082      	sub	sp, #8
 8003072:	af00      	add	r7, sp, #0
 8003074:	4604      	mov	r4, r0
 8003076:	f107 0014 	add.w	r0, r7, #20
 800307a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800307e:	4623      	mov	r3, r4
 8003080:	71fb      	strb	r3, [r7, #7]
	AllBlocks[blockNum]->height=block.height;
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a13      	ldr	r2, [pc, #76]	@ (80030d4 <Game_Set_Block+0x68>)
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800308e:	745a      	strb	r2, [r3, #17]
	AllBlocks[blockNum]->length=block.length;
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	4a10      	ldr	r2, [pc, #64]	@ (80030d4 <Game_Set_Block+0x68>)
 8003094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003098:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800309c:	741a      	strb	r2, [r3, #16]
	AllBlocks[blockNum]->NextBlock=AllBlocks[nextBlockNum];
 800309e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	490b      	ldr	r1, [pc, #44]	@ (80030d4 <Game_Set_Block+0x68>)
 80030a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030aa:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <Game_Set_Block+0x68>)
 80030ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80030b0:	615a      	str	r2, [r3, #20]
	AllBlocks[blockNum]->PrevBlock=AllBlocks[prevBlockNum];
 80030b2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4906      	ldr	r1, [pc, #24]	@ (80030d4 <Game_Set_Block+0x68>)
 80030ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030be:	4905      	ldr	r1, [pc, #20]	@ (80030d4 <Game_Set_Block+0x68>)
 80030c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc90      	pop	{r4, r7}
 80030ce:	b004      	add	sp, #16
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20025af0 	.word	0x20025af0

080030d8 <Game_Move_Left>:
void Game_Move_Left(){
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	if(!Game_Check_Collision(CurrentBlockPos[0]-1,CurrentBlockPos[1])){
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <Game_Move_Left+0x34>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4a09      	ldr	r2, [pc, #36]	@ (800310c <Game_Move_Left+0x34>)
 80030e6:	7852      	ldrb	r2, [r2, #1]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f9e2 	bl	80034b4 <Game_Check_Collision>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f083 0301 	eor.w	r3, r3, #1
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <Game_Move_Left+0x30>
		CurrentBlockPos[0]--;
 80030fc:	4b03      	ldr	r3, [pc, #12]	@ (800310c <Game_Move_Left+0x34>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	3b01      	subs	r3, #1
 8003102:	b2da      	uxtb	r2, r3
 8003104:	4b01      	ldr	r3, [pc, #4]	@ (800310c <Game_Move_Left+0x34>)
 8003106:	701a      	strb	r2, [r3, #0]
	}
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	20025ae8 	.word	0x20025ae8

08003110 <Game_Move_Right>:
void Game_Move_Right(){
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
	if(!Game_Check_Collision(CurrentBlockPos[0]+1,CurrentBlockPos[1])){
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <Game_Move_Right+0x34>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4a09      	ldr	r2, [pc, #36]	@ (8003144 <Game_Move_Right+0x34>)
 800311e:	7852      	ldrb	r2, [r2, #1]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f9c6 	bl	80034b4 <Game_Check_Collision>
 8003128:	4603      	mov	r3, r0
 800312a:	f083 0301 	eor.w	r3, r3, #1
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <Game_Move_Right+0x30>
		CurrentBlockPos[0]++;
 8003134:	4b03      	ldr	r3, [pc, #12]	@ (8003144 <Game_Move_Right+0x34>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b01      	ldr	r3, [pc, #4]	@ (8003144 <Game_Move_Right+0x34>)
 800313e:	701a      	strb	r2, [r3, #0]
	}
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20025ae8 	.word	0x20025ae8

08003148 <Game_Rotate_Clock>:
void Game_Rotate_Clock(){
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
	CurrentBlock=CurrentBlock->NextBlock;
 800314c:	4b0b      	ldr	r3, [pc, #44]	@ (800317c <Game_Rotate_Clock+0x34>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <Game_Rotate_Clock+0x34>)
 8003154:	6013      	str	r3, [r2, #0]
	if(Game_Check_Collision(CurrentBlockPos[0],CurrentBlockPos[1])){
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <Game_Rotate_Clock+0x38>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	4a09      	ldr	r2, [pc, #36]	@ (8003180 <Game_Rotate_Clock+0x38>)
 800315c:	7852      	ldrb	r2, [r2, #1]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f9a7 	bl	80034b4 <Game_Check_Collision>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <Game_Rotate_Clock+0x2e>
		CurrentBlock=CurrentBlock->PrevBlock;
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <Game_Rotate_Clock+0x34>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	4a02      	ldr	r2, [pc, #8]	@ (800317c <Game_Rotate_Clock+0x34>)
 8003174:	6013      	str	r3, [r2, #0]
	}
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20025aec 	.word	0x20025aec
 8003180:	20025ae8 	.word	0x20025ae8

08003184 <Game_Rotate_Counter_Clock>:
void Game_Rotate_Counter_Clock(){
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	CurrentBlock=CurrentBlock->PrevBlock;
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <Game_Rotate_Counter_Clock+0x34>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	4a0a      	ldr	r2, [pc, #40]	@ (80031b8 <Game_Rotate_Counter_Clock+0x34>)
 8003190:	6013      	str	r3, [r2, #0]
	if(Game_Check_Collision(CurrentBlockPos[0],CurrentBlockPos[1])){
 8003192:	4b0a      	ldr	r3, [pc, #40]	@ (80031bc <Game_Rotate_Counter_Clock+0x38>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	4a09      	ldr	r2, [pc, #36]	@ (80031bc <Game_Rotate_Counter_Clock+0x38>)
 8003198:	7852      	ldrb	r2, [r2, #1]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f989 	bl	80034b4 <Game_Check_Collision>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <Game_Rotate_Counter_Clock+0x2e>
		CurrentBlock=CurrentBlock->NextBlock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	@ (80031b8 <Game_Rotate_Counter_Clock+0x34>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	4a02      	ldr	r2, [pc, #8]	@ (80031b8 <Game_Rotate_Counter_Clock+0x34>)
 80031b0:	6013      	str	r3, [r2, #0]
	}
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20025aec 	.word	0x20025aec
 80031bc:	20025ae8 	.word	0x20025ae8

080031c0 <Game_Drop_Block>:
bool Game_Drop_Block(){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	if(!Game_Check_Collision(CurrentBlockPos[0],CurrentBlockPos[1]+1)){
 80031c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003200 <Game_Drop_Block+0x40>)
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <Game_Drop_Block+0x40>)
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 f96e 	bl	80034b4 <Game_Check_Collision>
 80031d8:	4603      	mov	r3, r0
 80031da:	f083 0301 	eor.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <Game_Drop_Block+0x34>
		CurrentBlockPos[1]++;
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <Game_Drop_Block+0x40>)
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	3301      	adds	r3, #1
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4b04      	ldr	r3, [pc, #16]	@ (8003200 <Game_Drop_Block+0x40>)
 80031ee:	705a      	strb	r2, [r3, #1]
		return true;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e002      	b.n	80031fa <Game_Drop_Block+0x3a>
	}
	Game_Lock_Block();
 80031f4:	f000 f806 	bl	8003204 <Game_Lock_Block>
	return false;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20025ae8 	.word	0x20025ae8

08003204 <Game_Lock_Block>:
void Game_Lock_Block(){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	for(int x = 0; x<CurrentBlock->length; x++){
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
 800320e:	e02c      	b.n	800326a <Game_Lock_Block+0x66>
		for(int y = 0; y<CurrentBlock->height;y++){
 8003210:	2300      	movs	r3, #0
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	e01f      	b.n	8003256 <Game_Lock_Block+0x52>
			if(CurrentBlock->Shape[y][x]){
 8003216:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <Game_Lock_Block+0x84>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d012      	beq.n	8003250 <Game_Lock_Block+0x4c>
				GameState[CurrentBlockPos[0]+x][CurrentBlockPos[1]+y]=true;
 800322a:	4b18      	ldr	r3, [pc, #96]	@ (800328c <Game_Lock_Block+0x88>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	441a      	add	r2, r3
 8003234:	4b15      	ldr	r3, [pc, #84]	@ (800328c <Game_Lock_Block+0x88>)
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	4619      	mov	r1, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	4419      	add	r1, r3
 800323e:	4814      	ldr	r0, [pc, #80]	@ (8003290 <Game_Lock_Block+0x8c>)
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4403      	add	r3, r0
 800324a:	440b      	add	r3, r1
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		for(int y = 0; y<CurrentBlock->height;y++){
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <Game_Lock_Block+0x84>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	7c5b      	ldrb	r3, [r3, #17]
 800325c:	461a      	mov	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	4293      	cmp	r3, r2
 8003262:	dbd8      	blt.n	8003216 <Game_Lock_Block+0x12>
	for(int x = 0; x<CurrentBlock->length; x++){
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3301      	adds	r3, #1
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	4b07      	ldr	r3, [pc, #28]	@ (8003288 <Game_Lock_Block+0x84>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	7c1b      	ldrb	r3, [r3, #16]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4293      	cmp	r3, r2
 8003276:	dbcb      	blt.n	8003210 <Game_Lock_Block+0xc>
			}
		}
	}
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20025aec 	.word	0x20025aec
 800328c:	20025ae8 	.word	0x20025ae8
 8003290:	20025a20 	.word	0x20025a20

08003294 <Game_Spawn_Block>:
void Game_Spawn_Block(){//could have this return a bool in order to not have the alive bool
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
#if ONLY_LINE_PEICES
	uint8_t blockToSpawn = 1;
#else
	uint8_t blockToSpawn = (uint8_t)(RNG_getRandom()%8);
 800329a:	f7fe fb63 	bl	8001964 <RNG_getRandom>
 800329e:	4603      	mov	r3, r0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	71fb      	strb	r3, [r7, #7]
	if(blockToSpawn == CurrentBlockNum||blockToSpawn == BLOCK_OVERFLOW_NUM){
 80032a8:	4b1c      	ldr	r3, [pc, #112]	@ (800331c <Game_Spawn_Block+0x88>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	79fa      	ldrb	r2, [r7, #7]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d002      	beq.n	80032b8 <Game_Spawn_Block+0x24>
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	2b07      	cmp	r3, #7
 80032b6:	d10f      	bne.n	80032d8 <Game_Spawn_Block+0x44>
		blockToSpawn = (uint8_t)(RNG_getRandom()%7);
 80032b8:	f7fe fb54 	bl	8001964 <RNG_getRandom>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b18      	ldr	r3, [pc, #96]	@ (8003320 <Game_Spawn_Block+0x8c>)
 80032c0:	fba3 1302 	umull	r1, r3, r3, r2
 80032c4:	1ad1      	subs	r1, r2, r3
 80032c6:	0849      	lsrs	r1, r1, #1
 80032c8:	440b      	add	r3, r1
 80032ca:	0899      	lsrs	r1, r3, #2
 80032cc:	460b      	mov	r3, r1
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	1a5b      	subs	r3, r3, r1
 80032d2:	1ad1      	subs	r1, r2, r3
 80032d4:	460b      	mov	r3, r1
 80032d6:	71fb      	strb	r3, [r7, #7]
	}
#endif
	CurrentBlockNum = blockToSpawn;
 80032d8:	4a10      	ldr	r2, [pc, #64]	@ (800331c <Game_Spawn_Block+0x88>)
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	7013      	strb	r3, [r2, #0]
	CurrentBlock = AllBlocks[blockToSpawn];
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	4a10      	ldr	r2, [pc, #64]	@ (8003324 <Game_Spawn_Block+0x90>)
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	4a10      	ldr	r2, [pc, #64]	@ (8003328 <Game_Spawn_Block+0x94>)
 80032e8:	6013      	str	r3, [r2, #0]
	CurrentBlockPos[0]=4;
 80032ea:	4b10      	ldr	r3, [pc, #64]	@ (800332c <Game_Spawn_Block+0x98>)
 80032ec:	2204      	movs	r2, #4
 80032ee:	701a      	strb	r2, [r3, #0]
	CurrentBlockPos[1]=0;
 80032f0:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <Game_Spawn_Block+0x98>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	705a      	strb	r2, [r3, #1]
	if(Game_Check_Collision(CurrentBlockPos[0],CurrentBlockPos[1])){
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <Game_Spawn_Block+0x98>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4a0c      	ldr	r2, [pc, #48]	@ (800332c <Game_Spawn_Block+0x98>)
 80032fc:	7852      	ldrb	r2, [r2, #1]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f8d7 	bl	80034b4 <Game_Check_Collision>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <Game_Spawn_Block+0x7e>
		Alive = false;
 800330c:	4b08      	ldr	r3, [pc, #32]	@ (8003330 <Game_Spawn_Block+0x9c>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
	}
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20025aea 	.word	0x20025aea
 8003320:	24924925 	.word	0x24924925
 8003324:	20025af0 	.word	0x20025af0
 8003328:	20025aec 	.word	0x20025aec
 800332c:	20025ae8 	.word	0x20025ae8
 8003330:	20000014 	.word	0x20000014

08003334 <Game_Find_Clear_Lines>:
void Game_Find_Clear_Lines(){
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
	uint8_t numLines = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
	uint8_t minHeight = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	73bb      	strb	r3, [r7, #14]
	uint8_t numLinesCleared = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	737b      	strb	r3, [r7, #13]
	for(int i = 19; i>=minHeight;i--){
 8003346:	2313      	movs	r3, #19
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	e032      	b.n	80033b2 <Game_Find_Clear_Lines+0x7e>
		bool fullLine = true;
 800334c:	2301      	movs	r3, #1
 800334e:	71fb      	strb	r3, [r7, #7]
		for(int j=0;j<10;j++){
 8003350:	2300      	movs	r3, #0
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	e013      	b.n	800337e <Game_Find_Clear_Lines+0x4a>
			if(!GameState[j][i]){
 8003356:	492e      	ldr	r1, [pc, #184]	@ (8003410 <Game_Find_Clear_Lines+0xdc>)
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	18ca      	adds	r2, r1, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4413      	add	r3, r2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <Game_Find_Clear_Lines+0x44>
				fullLine = false;
 8003374:	2300      	movs	r3, #0
 8003376:	71fb      	strb	r3, [r7, #7]
		for(int j=0;j<10;j++){
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3301      	adds	r3, #1
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b09      	cmp	r3, #9
 8003382:	dde8      	ble.n	8003356 <Game_Find_Clear_Lines+0x22>
			}
		}
		if(fullLine){
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <Game_Find_Clear_Lines+0x78>
			numLines++;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	3301      	adds	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
			Game_Clear_Line(i);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f845 	bl	8003424 <Game_Clear_Line>
			numLinesCleared++;
 800339a:	7b7b      	ldrb	r3, [r7, #13]
 800339c:	3301      	adds	r3, #1
 800339e:	737b      	strb	r3, [r7, #13]
			minHeight++;
 80033a0:	7bbb      	ldrb	r3, [r7, #14]
 80033a2:	3301      	adds	r3, #1
 80033a4:	73bb      	strb	r3, [r7, #14]
			i++;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
	for(int i = 19; i>=minHeight;i--){
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	7bbb      	ldrb	r3, [r7, #14]
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	dac8      	bge.n	800334c <Game_Find_Clear_Lines+0x18>
		}
	}
	if(numLinesCleared==1){
 80033ba:	7b7b      	ldrb	r3, [r7, #13]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <Game_Find_Clear_Lines+0x9a>
		singleClears++;
 80033c0:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <Game_Find_Clear_Lines+0xe0>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <Game_Find_Clear_Lines+0xe0>)
 80033ca:	801a      	strh	r2, [r3, #0]
		return;
 80033cc:	e01d      	b.n	800340a <Game_Find_Clear_Lines+0xd6>
	}
	if(numLinesCleared==2){
 80033ce:	7b7b      	ldrb	r3, [r7, #13]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d106      	bne.n	80033e2 <Game_Find_Clear_Lines+0xae>
		doubleClears++;
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <Game_Find_Clear_Lines+0xe4>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <Game_Find_Clear_Lines+0xe4>)
 80033de:	801a      	strh	r2, [r3, #0]
		return;
 80033e0:	e013      	b.n	800340a <Game_Find_Clear_Lines+0xd6>
	}
	if(numLinesCleared==3){
 80033e2:	7b7b      	ldrb	r3, [r7, #13]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d106      	bne.n	80033f6 <Game_Find_Clear_Lines+0xc2>
		trippleClears++;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <Game_Find_Clear_Lines+0xe8>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	4b0a      	ldr	r3, [pc, #40]	@ (800341c <Game_Find_Clear_Lines+0xe8>)
 80033f2:	801a      	strh	r2, [r3, #0]
		return;
 80033f4:	e009      	b.n	800340a <Game_Find_Clear_Lines+0xd6>
	}
	if(numLinesCleared==4){
 80033f6:	7b7b      	ldrb	r3, [r7, #13]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d106      	bne.n	800340a <Game_Find_Clear_Lines+0xd6>
		tetrisClears++;
 80033fc:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <Game_Find_Clear_Lines+0xec>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <Game_Find_Clear_Lines+0xec>)
 8003406:	801a      	strh	r2, [r3, #0]
		return;
 8003408:	bf00      	nop
	}

}
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20025a20 	.word	0x20025a20
 8003414:	20025b3c 	.word	0x20025b3c
 8003418:	20025b3e 	.word	0x20025b3e
 800341c:	20025b40 	.word	0x20025b40
 8003420:	20025b42 	.word	0x20025b42

08003424 <Game_Clear_Line>:
void Game_Clear_Line(uint8_t lineNum){
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
	for(int i = lineNum; i>0;i--){
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e021      	b.n	8003478 <Game_Clear_Line+0x54>
		for(int j = 0; j<10; j++){
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e018      	b.n	800346c <Game_Clear_Line+0x48>
			GameState[j][i]=GameState[j][i-1];
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	481c      	ldr	r0, [pc, #112]	@ (80034b0 <Game_Clear_Line+0x8c>)
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4403      	add	r3, r0
 800344c:	440b      	add	r3, r1
 800344e:	7818      	ldrb	r0, [r3, #0]
 8003450:	4917      	ldr	r1, [pc, #92]	@ (80034b0 <Game_Clear_Line+0x8c>)
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	18ca      	adds	r2, r1, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	4413      	add	r3, r2
 8003462:	4602      	mov	r2, r0
 8003464:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<10; j++){
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	3301      	adds	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b09      	cmp	r3, #9
 8003470:	dde3      	ble.n	800343a <Game_Clear_Line+0x16>
	for(int i = lineNum; i>0;i--){
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3b01      	subs	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	dcda      	bgt.n	8003434 <Game_Clear_Line+0x10>
		}
	}
	for(int i = 0; i<10; i++){
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e00b      	b.n	800349c <Game_Clear_Line+0x78>
		GameState[i][0]=false;
 8003484:	490a      	ldr	r1, [pc, #40]	@ (80034b0 <Game_Clear_Line+0x8c>)
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	2200      	movs	r2, #0
 8003494:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10; i++){
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b09      	cmp	r3, #9
 80034a0:	ddf0      	ble.n	8003484 <Game_Clear_Line+0x60>
	}
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	20025a20 	.word	0x20025a20

080034b4 <Game_Check_Collision>:
bool Game_Check_Collision(uint8_t newX, uint8_t newY){
 80034b4:	b490      	push	{r4, r7}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	460a      	mov	r2, r1
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	4613      	mov	r3, r2
 80034c2:	71bb      	strb	r3, [r7, #6]
	//out of bounds
	if(newX<0||(newX+CurrentBlock->length)>10||(newY+CurrentBlock->height)>20){
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	4a25      	ldr	r2, [pc, #148]	@ (800355c <Game_Check_Collision+0xa8>)
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	7c12      	ldrb	r2, [r2, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	2b0a      	cmp	r3, #10
 80034d0:	dc06      	bgt.n	80034e0 <Game_Check_Collision+0x2c>
 80034d2:	79bb      	ldrb	r3, [r7, #6]
 80034d4:	4a21      	ldr	r2, [pc, #132]	@ (800355c <Game_Check_Collision+0xa8>)
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	7c52      	ldrb	r2, [r2, #17]
 80034da:	4413      	add	r3, r2
 80034dc:	2b14      	cmp	r3, #20
 80034de:	dd01      	ble.n	80034e4 <Game_Check_Collision+0x30>
		return true;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e036      	b.n	8003552 <Game_Check_Collision+0x9e>
	}
	//collision w/ blocks
	for(int x = 0; x<CurrentBlock->length; x++){
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e02b      	b.n	8003542 <Game_Check_Collision+0x8e>
		for(int y = 0; y<CurrentBlock->height;y++){
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	e01e      	b.n	800352e <Game_Check_Collision+0x7a>
			if(CurrentBlock->Shape[y][x]&GameState[newX+x][newY+y]){
 80034f0:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <Game_Check_Collision+0xa8>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	441a      	add	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461c      	mov	r4, r3
 8003502:	79fa      	ldrb	r2, [r7, #7]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	441a      	add	r2, r3
 8003508:	79b9      	ldrb	r1, [r7, #6]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4419      	add	r1, r3
 800350e:	4814      	ldr	r0, [pc, #80]	@ (8003560 <Game_Check_Collision+0xac>)
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4403      	add	r3, r0
 800351a:	440b      	add	r3, r1
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4023      	ands	r3, r4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <Game_Check_Collision+0x74>
				return true;
 8003524:	2301      	movs	r3, #1
 8003526:	e014      	b.n	8003552 <Game_Check_Collision+0x9e>
		for(int y = 0; y<CurrentBlock->height;y++){
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <Game_Check_Collision+0xa8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	7c5b      	ldrb	r3, [r3, #17]
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4293      	cmp	r3, r2
 800353a:	dbd9      	blt.n	80034f0 <Game_Check_Collision+0x3c>
	for(int x = 0; x<CurrentBlock->length; x++){
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <Game_Check_Collision+0xa8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	7c1b      	ldrb	r3, [r3, #16]
 8003548:	461a      	mov	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4293      	cmp	r3, r2
 800354e:	dbcc      	blt.n	80034ea <Game_Check_Collision+0x36>
			}
		}
	}
	return false;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bc90      	pop	{r4, r7}
 800355a:	4770      	bx	lr
 800355c:	20025aec 	.word	0x20025aec
 8003560:	20025a20 	.word	0x20025a20

08003564 <Game_Check_Alive>:
bool Game_Check_Alive(){
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
	return Alive;
 8003568:	4b03      	ldr	r3, [pc, #12]	@ (8003578 <Game_Check_Alive+0x14>)
 800356a:	781b      	ldrb	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000014 	.word	0x20000014

0800357c <Game_get_Xcord>:
uint8_t Game_get_Xcord(){
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
	return CurrentBlockPos[0];
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <Game_get_Xcord+0x14>)
 8003582:	781b      	ldrb	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20025ae8 	.word	0x20025ae8

08003594 <Game_get_Ycord>:
uint8_t Game_get_Ycord(){
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
	return CurrentBlockPos[1];
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <Game_get_Ycord+0x14>)
 800359a:	785b      	ldrb	r3, [r3, #1]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20025ae8 	.word	0x20025ae8

080035ac <Game_get_Current_Block>:
Game_Block *Game_get_Current_Block(){
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	return CurrentBlock;
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <Game_get_Current_Block+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20025aec 	.word	0x20025aec

080035c4 <Game_get_State_At>:
bool Game_get_State_At(uint8_t x, uint8_t y){
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	460a      	mov	r2, r1
 80035ce:	71fb      	strb	r3, [r7, #7]
 80035d0:	4613      	mov	r3, r2
 80035d2:	71bb      	strb	r3, [r7, #6]
	return GameState[x][y];
 80035d4:	79fa      	ldrb	r2, [r7, #7]
 80035d6:	79b9      	ldrb	r1, [r7, #6]
 80035d8:	4806      	ldr	r0, [pc, #24]	@ (80035f4 <Game_get_State_At+0x30>)
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4403      	add	r3, r0
 80035e4:	440b      	add	r3, r1
 80035e6:	781b      	ldrb	r3, [r3, #0]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	20025a20 	.word	0x20025a20

080035f8 <Game_get_Single_Clears>:
uint16_t Game_get_Single_Clears(){
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
	return singleClears;
 80035fc:	4b03      	ldr	r3, [pc, #12]	@ (800360c <Game_get_Single_Clears+0x14>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20025b3c 	.word	0x20025b3c

08003610 <Game_get_Double_Clears>:
uint16_t Game_get_Double_Clears(){
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	return doubleClears;
 8003614:	4b03      	ldr	r3, [pc, #12]	@ (8003624 <Game_get_Double_Clears+0x14>)
 8003616:	881b      	ldrh	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20025b3e 	.word	0x20025b3e

08003628 <Game_get_Tripple_Clears>:
uint16_t Game_get_Tripple_Clears(){
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	return trippleClears;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <Game_get_Tripple_Clears+0x14>)
 800362e:	881b      	ldrh	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20025b40 	.word	0x20025b40

08003640 <Game_get_Tetris_Clears>:
uint16_t Game_get_Tetris_Clears(){
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	return tetrisClears;
 8003644:	4b03      	ldr	r3, [pc, #12]	@ (8003654 <Game_get_Tetris_Clears+0x14>)
 8003646:	881b      	ldrh	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20025b42 	.word	0x20025b42

08003658 <Game_Reset_Clears>:
void Game_Reset_Clears(){
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	singleClears=0;
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <Game_Reset_Clears+0x28>)
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
	doubleClears=0;
 8003662:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <Game_Reset_Clears+0x2c>)
 8003664:	2200      	movs	r2, #0
 8003666:	801a      	strh	r2, [r3, #0]
	trippleClears=0;
 8003668:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <Game_Reset_Clears+0x30>)
 800366a:	2200      	movs	r2, #0
 800366c:	801a      	strh	r2, [r3, #0]
	tetrisClears=0;
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <Game_Reset_Clears+0x34>)
 8003670:	2200      	movs	r2, #0
 8003672:	801a      	strh	r2, [r3, #0]
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20025b3c 	.word	0x20025b3c
 8003684:	20025b3e 	.word	0x20025b3e
 8003688:	20025b40 	.word	0x20025b40
 800368c:	20025b42 	.word	0x20025b42

08003690 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8003694:	f000 f9fe 	bl	8003a94 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8003698:	20ca      	movs	r0, #202	@ 0xca
 800369a:	f000 f943 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800369e:	20c3      	movs	r0, #195	@ 0xc3
 80036a0:	f000 f94d 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80036a4:	2008      	movs	r0, #8
 80036a6:	f000 f94a 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80036aa:	2050      	movs	r0, #80	@ 0x50
 80036ac:	f000 f947 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80036b0:	20cf      	movs	r0, #207	@ 0xcf
 80036b2:	f000 f937 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80036b6:	2000      	movs	r0, #0
 80036b8:	f000 f941 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80036bc:	20c1      	movs	r0, #193	@ 0xc1
 80036be:	f000 f93e 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80036c2:	2030      	movs	r0, #48	@ 0x30
 80036c4:	f000 f93b 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80036c8:	20ed      	movs	r0, #237	@ 0xed
 80036ca:	f000 f92b 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80036ce:	2064      	movs	r0, #100	@ 0x64
 80036d0:	f000 f935 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80036d4:	2003      	movs	r0, #3
 80036d6:	f000 f932 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80036da:	2012      	movs	r0, #18
 80036dc:	f000 f92f 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80036e0:	2081      	movs	r0, #129	@ 0x81
 80036e2:	f000 f92c 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80036e6:	20e8      	movs	r0, #232	@ 0xe8
 80036e8:	f000 f91c 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80036ec:	2085      	movs	r0, #133	@ 0x85
 80036ee:	f000 f926 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f000 f923 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80036f8:	2078      	movs	r0, #120	@ 0x78
 80036fa:	f000 f920 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80036fe:	20cb      	movs	r0, #203	@ 0xcb
 8003700:	f000 f910 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8003704:	2039      	movs	r0, #57	@ 0x39
 8003706:	f000 f91a 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800370a:	202c      	movs	r0, #44	@ 0x2c
 800370c:	f000 f917 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003710:	2000      	movs	r0, #0
 8003712:	f000 f914 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8003716:	2034      	movs	r0, #52	@ 0x34
 8003718:	f000 f911 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 800371c:	2002      	movs	r0, #2
 800371e:	f000 f90e 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8003722:	20f7      	movs	r0, #247	@ 0xf7
 8003724:	f000 f8fe 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8003728:	2020      	movs	r0, #32
 800372a:	f000 f908 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 800372e:	20ea      	movs	r0, #234	@ 0xea
 8003730:	f000 f8f8 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003734:	2000      	movs	r0, #0
 8003736:	f000 f902 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800373a:	2000      	movs	r0, #0
 800373c:	f000 f8ff 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8003740:	20b1      	movs	r0, #177	@ 0xb1
 8003742:	f000 f8ef 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003746:	2000      	movs	r0, #0
 8003748:	f000 f8f9 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800374c:	201b      	movs	r0, #27
 800374e:	f000 f8f6 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8003752:	20b6      	movs	r0, #182	@ 0xb6
 8003754:	f000 f8e6 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8003758:	200a      	movs	r0, #10
 800375a:	f000 f8f0 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800375e:	20a2      	movs	r0, #162	@ 0xa2
 8003760:	f000 f8ed 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8003764:	20c0      	movs	r0, #192	@ 0xc0
 8003766:	f000 f8dd 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800376a:	2010      	movs	r0, #16
 800376c:	f000 f8e7 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8003770:	20c1      	movs	r0, #193	@ 0xc1
 8003772:	f000 f8d7 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8003776:	2010      	movs	r0, #16
 8003778:	f000 f8e1 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800377c:	20c5      	movs	r0, #197	@ 0xc5
 800377e:	f000 f8d1 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8003782:	2045      	movs	r0, #69	@ 0x45
 8003784:	f000 f8db 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8003788:	2015      	movs	r0, #21
 800378a:	f000 f8d8 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800378e:	20c7      	movs	r0, #199	@ 0xc7
 8003790:	f000 f8c8 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8003794:	2090      	movs	r0, #144	@ 0x90
 8003796:	f000 f8d2 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800379a:	2036      	movs	r0, #54	@ 0x36
 800379c:	f000 f8c2 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80037a0:	20c8      	movs	r0, #200	@ 0xc8
 80037a2:	f000 f8cc 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80037a6:	20f2      	movs	r0, #242	@ 0xf2
 80037a8:	f000 f8bc 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f000 f8c6 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80037b2:	20b0      	movs	r0, #176	@ 0xb0
 80037b4:	f000 f8b6 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80037b8:	20c2      	movs	r0, #194	@ 0xc2
 80037ba:	f000 f8c0 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80037be:	20b6      	movs	r0, #182	@ 0xb6
 80037c0:	f000 f8b0 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80037c4:	200a      	movs	r0, #10
 80037c6:	f000 f8ba 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80037ca:	20a7      	movs	r0, #167	@ 0xa7
 80037cc:	f000 f8b7 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80037d0:	2027      	movs	r0, #39	@ 0x27
 80037d2:	f000 f8b4 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80037d6:	2004      	movs	r0, #4
 80037d8:	f000 f8b1 	bl	800393e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80037dc:	202a      	movs	r0, #42	@ 0x2a
 80037de:	f000 f8a1 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80037e2:	2000      	movs	r0, #0
 80037e4:	f000 f8ab 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f000 f8a8 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80037ee:	2000      	movs	r0, #0
 80037f0:	f000 f8a5 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80037f4:	20ef      	movs	r0, #239	@ 0xef
 80037f6:	f000 f8a2 	bl	800393e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80037fa:	202b      	movs	r0, #43	@ 0x2b
 80037fc:	f000 f892 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8003800:	2000      	movs	r0, #0
 8003802:	f000 f89c 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003806:	2000      	movs	r0, #0
 8003808:	f000 f899 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800380c:	2001      	movs	r0, #1
 800380e:	f000 f896 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8003812:	203f      	movs	r0, #63	@ 0x3f
 8003814:	f000 f893 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8003818:	20f6      	movs	r0, #246	@ 0xf6
 800381a:	f000 f883 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800381e:	2001      	movs	r0, #1
 8003820:	f000 f88d 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8003824:	2000      	movs	r0, #0
 8003826:	f000 f88a 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800382a:	2006      	movs	r0, #6
 800382c:	f000 f887 	bl	800393e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8003830:	202c      	movs	r0, #44	@ 0x2c
 8003832:	f000 f877 	bl	8003924 <ili9341_Write_Reg>
  LCD_Delay(200);
 8003836:	20c8      	movs	r0, #200	@ 0xc8
 8003838:	f000 f9e8 	bl	8003c0c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800383c:	2026      	movs	r0, #38	@ 0x26
 800383e:	f000 f871 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8003842:	2001      	movs	r0, #1
 8003844:	f000 f87b 	bl	800393e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8003848:	20e0      	movs	r0, #224	@ 0xe0
 800384a:	f000 f86b 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800384e:	200f      	movs	r0, #15
 8003850:	f000 f875 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8003854:	2029      	movs	r0, #41	@ 0x29
 8003856:	f000 f872 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800385a:	2024      	movs	r0, #36	@ 0x24
 800385c:	f000 f86f 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8003860:	200c      	movs	r0, #12
 8003862:	f000 f86c 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8003866:	200e      	movs	r0, #14
 8003868:	f000 f869 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800386c:	2009      	movs	r0, #9
 800386e:	f000 f866 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8003872:	204e      	movs	r0, #78	@ 0x4e
 8003874:	f000 f863 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8003878:	2078      	movs	r0, #120	@ 0x78
 800387a:	f000 f860 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800387e:	203c      	movs	r0, #60	@ 0x3c
 8003880:	f000 f85d 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8003884:	2009      	movs	r0, #9
 8003886:	f000 f85a 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800388a:	2013      	movs	r0, #19
 800388c:	f000 f857 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8003890:	2005      	movs	r0, #5
 8003892:	f000 f854 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8003896:	2017      	movs	r0, #23
 8003898:	f000 f851 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800389c:	2011      	movs	r0, #17
 800389e:	f000 f84e 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80038a2:	2000      	movs	r0, #0
 80038a4:	f000 f84b 	bl	800393e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80038a8:	20e1      	movs	r0, #225	@ 0xe1
 80038aa:	f000 f83b 	bl	8003924 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f000 f845 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80038b4:	2016      	movs	r0, #22
 80038b6:	f000 f842 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80038ba:	201b      	movs	r0, #27
 80038bc:	f000 f83f 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80038c0:	2004      	movs	r0, #4
 80038c2:	f000 f83c 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80038c6:	2011      	movs	r0, #17
 80038c8:	f000 f839 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80038cc:	2007      	movs	r0, #7
 80038ce:	f000 f836 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80038d2:	2031      	movs	r0, #49	@ 0x31
 80038d4:	f000 f833 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80038d8:	2033      	movs	r0, #51	@ 0x33
 80038da:	f000 f830 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80038de:	2042      	movs	r0, #66	@ 0x42
 80038e0:	f000 f82d 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80038e4:	2005      	movs	r0, #5
 80038e6:	f000 f82a 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80038ea:	200c      	movs	r0, #12
 80038ec:	f000 f827 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80038f0:	200a      	movs	r0, #10
 80038f2:	f000 f824 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80038f6:	2028      	movs	r0, #40	@ 0x28
 80038f8:	f000 f821 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80038fc:	202f      	movs	r0, #47	@ 0x2f
 80038fe:	f000 f81e 	bl	800393e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8003902:	200f      	movs	r0, #15
 8003904:	f000 f81b 	bl	800393e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8003908:	2011      	movs	r0, #17
 800390a:	f000 f80b 	bl	8003924 <ili9341_Write_Reg>
  LCD_Delay(200);
 800390e:	20c8      	movs	r0, #200	@ 0xc8
 8003910:	f000 f97c 	bl	8003c0c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8003914:	2029      	movs	r0, #41	@ 0x29
 8003916:	f000 f805 	bl	8003924 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800391a:	202c      	movs	r0, #44	@ 0x2c
 800391c:	f000 f802 	bl	8003924 <ili9341_Write_Reg>
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}

08003924 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f949 	bl	8003bc8 <LCD_IO_WriteReg>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f91a 	bl	8003b84 <LCD_IO_WriteData>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800395c:	4819      	ldr	r0, [pc, #100]	@ (80039c4 <SPI_Init+0x6c>)
 800395e:	f004 faa8 	bl	8007eb2 <HAL_SPI_GetState>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d12b      	bne.n	80039c0 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8003968:	4b16      	ldr	r3, [pc, #88]	@ (80039c4 <SPI_Init+0x6c>)
 800396a:	4a17      	ldr	r2, [pc, #92]	@ (80039c8 <SPI_Init+0x70>)
 800396c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800396e:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <SPI_Init+0x6c>)
 8003970:	2218      	movs	r2, #24
 8003972:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003974:	4b13      	ldr	r3, [pc, #76]	@ (80039c4 <SPI_Init+0x6c>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800397a:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <SPI_Init+0x6c>)
 800397c:	2200      	movs	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003980:	4b10      	ldr	r3, [pc, #64]	@ (80039c4 <SPI_Init+0x6c>)
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003986:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <SPI_Init+0x6c>)
 8003988:	2200      	movs	r2, #0
 800398a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800398c:	4b0d      	ldr	r3, [pc, #52]	@ (80039c4 <SPI_Init+0x6c>)
 800398e:	2207      	movs	r2, #7
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003992:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <SPI_Init+0x6c>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003998:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <SPI_Init+0x6c>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800399e:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <SPI_Init+0x6c>)
 80039a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80039a6:	4b07      	ldr	r3, [pc, #28]	@ (80039c4 <SPI_Init+0x6c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <SPI_Init+0x6c>)
 80039ae:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039b2:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80039b4:	4803      	ldr	r0, [pc, #12]	@ (80039c4 <SPI_Init+0x6c>)
 80039b6:	f000 f833 	bl	8003a20 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80039ba:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <SPI_Init+0x6c>)
 80039bc:	f004 f884 	bl	8007ac8 <HAL_SPI_Init>
  }
}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20025b44 	.word	0x20025b44
 80039c8:	40015000 	.word	0x40015000

080039cc <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <SPI_Write+0x34>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1db9      	adds	r1, r7, #6
 80039e0:	2201      	movs	r2, #1
 80039e2:	4808      	ldr	r0, [pc, #32]	@ (8003a04 <SPI_Write+0x38>)
 80039e4:	f004 f921 	bl	8007c2a <HAL_SPI_Transmit>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80039f2:	f000 f809 	bl	8003a08 <SPI_Error>
  }
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000018 	.word	0x20000018
 8003a04:	20025b44 	.word	0x20025b44

08003a08 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003a0c:	4803      	ldr	r0, [pc, #12]	@ (8003a1c <SPI_Error+0x14>)
 8003a0e:	f004 f8e4 	bl	8007bda <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8003a12:	f7ff ffa1 	bl	8003958 <SPI_Init>
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20025b44 	.word	0x20025b44

08003a20 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	@ 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	4b17      	ldr	r3, [pc, #92]	@ (8003a8c <SPI_MspInit+0x6c>)
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <SPI_MspInit+0x6c>)
 8003a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a36:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a38:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <SPI_MspInit+0x6c>)
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <SPI_MspInit+0x6c>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8003a8c <SPI_MspInit+0x6c>)
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a54:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <SPI_MspInit+0x6c>)
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	60fb      	str	r3, [r7, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8003a60:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003a66:	2302      	movs	r3, #2
 8003a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8003a72:	2305      	movs	r3, #5
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4804      	ldr	r0, [pc, #16]	@ (8003a90 <SPI_MspInit+0x70>)
 8003a7e:	f001 fb87 	bl	8005190 <HAL_GPIO_Init>
}
 8003a82:	bf00      	nop
 8003a84:	3728      	adds	r7, #40	@ 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40021400 	.word	0x40021400

08003a94 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8003a9a:	4b36      	ldr	r3, [pc, #216]	@ (8003b74 <LCD_IO_Init+0xe0>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d164      	bne.n	8003b6c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8003aa2:	4b34      	ldr	r3, [pc, #208]	@ (8003b74 <LCD_IO_Init+0xe0>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	4b32      	ldr	r3, [pc, #200]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003ac4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003aca:	2301      	movs	r3, #1
 8003acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4619      	mov	r1, r3
 8003adc:	4827      	ldr	r0, [pc, #156]	@ (8003b7c <LCD_IO_Init+0xe8>)
 8003ade:	f001 fb57 	bl	8005190 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003aec:	f043 0308 	orr.w	r3, r3, #8
 8003af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af2:	4b21      	ldr	r3, [pc, #132]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003b10:	f107 030c 	add.w	r3, r7, #12
 8003b14:	4619      	mov	r1, r3
 8003b16:	4819      	ldr	r0, [pc, #100]	@ (8003b7c <LCD_IO_Init+0xe8>)
 8003b18:	f001 fb3a 	bl	8005190 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b24:	4a14      	ldr	r2, [pc, #80]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003b26:	f043 0304 	orr.w	r3, r3, #4
 8003b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <LCD_IO_Init+0xe4>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003b44:	2302      	movs	r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	480c      	ldr	r0, [pc, #48]	@ (8003b80 <LCD_IO_Init+0xec>)
 8003b50:	f001 fb1e 	bl	8005190 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003b54:	2200      	movs	r2, #0
 8003b56:	2104      	movs	r1, #4
 8003b58:	4809      	ldr	r0, [pc, #36]	@ (8003b80 <LCD_IO_Init+0xec>)
 8003b5a:	f001 fdd1 	bl	8005700 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2104      	movs	r1, #4
 8003b62:	4807      	ldr	r0, [pc, #28]	@ (8003b80 <LCD_IO_Init+0xec>)
 8003b64:	f001 fdcc 	bl	8005700 <HAL_GPIO_WritePin>

    SPI_Init();
 8003b68:	f7ff fef6 	bl	8003958 <SPI_Init>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20025b9c 	.word	0x20025b9c
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020c00 	.word	0x40020c00
 8003b80:	40020800 	.word	0x40020800

08003b84 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b94:	480a      	ldr	r0, [pc, #40]	@ (8003bc0 <LCD_IO_WriteData+0x3c>)
 8003b96:	f001 fdb3 	bl	8005700 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	4809      	ldr	r0, [pc, #36]	@ (8003bc4 <LCD_IO_WriteData+0x40>)
 8003ba0:	f001 fdae 	bl	8005700 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff10 	bl	80039cc <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003bac:	2201      	movs	r2, #1
 8003bae:	2104      	movs	r1, #4
 8003bb0:	4804      	ldr	r0, [pc, #16]	@ (8003bc4 <LCD_IO_WriteData+0x40>)
 8003bb2:	f001 fda5 	bl	8005700 <HAL_GPIO_WritePin>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40020800 	.word	0x40020800

08003bc8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bd8:	480a      	ldr	r0, [pc, #40]	@ (8003c04 <LCD_IO_WriteReg+0x3c>)
 8003bda:	f001 fd91 	bl	8005700 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003bde:	2200      	movs	r2, #0
 8003be0:	2104      	movs	r1, #4
 8003be2:	4809      	ldr	r0, [pc, #36]	@ (8003c08 <LCD_IO_WriteReg+0x40>)
 8003be4:	f001 fd8c 	bl	8005700 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff feed 	bl	80039cc <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	4804      	ldr	r0, [pc, #16]	@ (8003c08 <LCD_IO_WriteReg+0x40>)
 8003bf8:	f001 fd82 	bl	8005700 <HAL_GPIO_WritePin>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40020800 	.word	0x40020800

08003c0c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 f9b1 	bl	8004f7c <HAL_Delay>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <main>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);


int main(void)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	af00      	add	r7, sp, #0
  HAL_Init();
 8003c26:	f001 f937 	bl	8004e98 <HAL_Init>
  //SystemClock_Config();
  SystemClockOverride();
 8003c2a:	f000 fa61 	bl	80040f0 <SystemClockOverride>
  MX_GPIO_Init();
 8003c2e:	f000 f9f9 	bl	8004024 <MX_GPIO_Init>
  MX_LTDC_Init();
 8003c32:	f000 f85d 	bl	8003cf0 <MX_LTDC_Init>
  MX_RNG_Init();
 8003c36:	f000 f90d 	bl	8003e54 <MX_RNG_Init>
  MX_I2C3_Init();
 8003c3a:	f000 f819 	bl	8003c70 <MX_I2C3_Init>
  MX_SPI5_Init();
 8003c3e:	f000 f91d 	bl	8003e7c <MX_SPI5_Init>
  MX_TIM2_Init();
 8003c42:	f000 f951 	bl	8003ee8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c46:	f000 f99d 	bl	8003f84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit();
 8003c4a:	f7fc fc89 	bl	8000560 <ApplicationInit>

  Display_Play_Screen();
 8003c4e:	f7fc fcc3 	bl	80005d8 <Display_Play_Screen>

  while (1)
  {
    if(Check_Play_Pressed()){
 8003c52:	f7fc fd15 	bl	8000680 <Check_Play_Pressed>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0fa      	beq.n	8003c52 <main+0x30>
    	PlayGame();
 8003c5c:	f000 fa88 	bl	8004170 <PlayGame>
    	Clear_LCD_Screen();
 8003c60:	f7fc fd1e 	bl	80006a0 <Clear_LCD_Screen>
    	Display_Play_Screen();
 8003c64:	f7fc fcb8 	bl	80005d8 <Display_Play_Screen>
    	HAL_Delay(200);
 8003c68:	20c8      	movs	r0, #200	@ 0xc8
 8003c6a:	f001 f987 	bl	8004f7c <HAL_Delay>
    if(Check_Play_Pressed()){
 8003c6e:	e7f0      	b.n	8003c52 <main+0x30>

08003c70 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <MX_I2C3_Init+0x78>)
 8003c78:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <MX_I2C3_Init+0x7c>)
 8003c7e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c80:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003c86:	4b17      	ldr	r3, [pc, #92]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c92:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c94:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003c9a:	4b12      	ldr	r3, [pc, #72]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ca0:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003cac:	480d      	ldr	r0, [pc, #52]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003cae:	f001 fd41 	bl	8005734 <HAL_I2C_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003cb8:	f000 fa14 	bl	80040e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4809      	ldr	r0, [pc, #36]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003cc0:	f002 fd5c 	bl	800677c <HAL_I2CEx_ConfigAnalogFilter>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8003cca:	f000 fa0b 	bl	80040e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4804      	ldr	r0, [pc, #16]	@ (8003ce4 <MX_I2C3_Init+0x74>)
 8003cd2:	f002 fd8f 	bl	80067f4 <HAL_I2CEx_ConfigDigitalFilter>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8003cdc:	f000 fa02 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20025ba0 	.word	0x20025ba0
 8003ce8:	40005c00 	.word	0x40005c00
 8003cec:	000186a0 	.word	0x000186a0

08003cf0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b09a      	sub	sp, #104	@ 0x68
 8003cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003cf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003cfa:	2234      	movs	r2, #52	@ 0x34
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fd50 	bl	80087a4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8003d04:	463b      	mov	r3, r7
 8003d06:	2234      	movs	r2, #52	@ 0x34
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 fd4a 	bl	80087a4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003d10:	4b4e      	ldr	r3, [pc, #312]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d12:	4a4f      	ldr	r2, [pc, #316]	@ (8003e50 <MX_LTDC_Init+0x160>)
 8003d14:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003d16:	4b4d      	ldr	r3, [pc, #308]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003d1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003d22:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003d28:	4b48      	ldr	r3, [pc, #288]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8003d34:	4b45      	ldr	r3, [pc, #276]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d36:	2203      	movs	r2, #3
 8003d38:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8003d3a:	4b44      	ldr	r3, [pc, #272]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d3c:	220e      	movs	r2, #14
 8003d3e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8003d40:	4b42      	ldr	r3, [pc, #264]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d42:	2205      	movs	r2, #5
 8003d44:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8003d46:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d48:	f240 228e 	movw	r2, #654	@ 0x28e
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8003d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d50:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8003d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8003d56:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d58:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8003d5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d60:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8003d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003d66:	4b39      	ldr	r3, [pc, #228]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003d6e:	4b37      	ldr	r3, [pc, #220]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003d76:	4b35      	ldr	r3, [pc, #212]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003d7e:	4833      	ldr	r0, [pc, #204]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003d80:	f002 fd78 	bl	8006874 <HAL_LTDC_Init>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8003d8a:	f000 f9ab 	bl	80040e4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dae:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003db0:	2305      	movs	r3, #5
 8003db2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003dd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4619      	mov	r1, r3
 8003dda:	481c      	ldr	r0, [pc, #112]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003ddc:	f002 fe1a 	bl	8006a14 <HAL_LTDC_ConfigLayer>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8003de6:	f000 f97d 	bl	80040e4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003e06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8003e0c:	2305      	movs	r3, #5
 8003e0e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8003e2e:	463b      	mov	r3, r7
 8003e30:	2201      	movs	r2, #1
 8003e32:	4619      	mov	r1, r3
 8003e34:	4805      	ldr	r0, [pc, #20]	@ (8003e4c <MX_LTDC_Init+0x15c>)
 8003e36:	f002 fded 	bl	8006a14 <HAL_LTDC_ConfigLayer>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8003e40:	f000 f950 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003e44:	bf00      	nop
 8003e46:	3768      	adds	r7, #104	@ 0x68
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20025bf4 	.word	0x20025bf4
 8003e50:	40016800 	.word	0x40016800

08003e54 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003e58:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <MX_RNG_Init+0x20>)
 8003e5a:	4a07      	ldr	r2, [pc, #28]	@ (8003e78 <MX_RNG_Init+0x24>)
 8003e5c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003e5e:	4805      	ldr	r0, [pc, #20]	@ (8003e74 <MX_RNG_Init+0x20>)
 8003e60:	f003 fdb2 	bl	80079c8 <HAL_RNG_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003e6a:	f000 f93b 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20025c9c 	.word	0x20025c9c
 8003e78:	50060800 	.word	0x50060800

08003e7c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003e80:	4b17      	ldr	r3, [pc, #92]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <MX_SPI5_Init+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003e86:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003e88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e8c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003e8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e94:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003eac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003ec8:	220a      	movs	r2, #10
 8003eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003ecc:	4804      	ldr	r0, [pc, #16]	@ (8003ee0 <MX_SPI5_Init+0x64>)
 8003ece:	f003 fdfb 	bl	8007ac8 <HAL_SPI_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003ed8:	f000 f904 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20025cac 	.word	0x20025cac
 8003ee4:	40015000 	.word	0x40015000

08003ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eee:	f107 0308 	add.w	r3, r7, #8
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efc:	463b      	mov	r3, r7
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f04:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f06:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f0e:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8003f12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f22:	4b17      	ldr	r3, [pc, #92]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f28:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f2e:	4814      	ldr	r0, [pc, #80]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f30:	f004 f8aa 	bl	8008088 <HAL_TIM_Base_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003f3a:	f000 f8d3 	bl	80040e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f44:	f107 0308 	add.w	r3, r7, #8
 8003f48:	4619      	mov	r1, r3
 8003f4a:	480d      	ldr	r0, [pc, #52]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f4c:	f004 f8eb 	bl	8008126 <HAL_TIM_ConfigClockSource>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003f56:	f000 f8c5 	bl	80040e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f62:	463b      	mov	r3, r7
 8003f64:	4619      	mov	r1, r3
 8003f66:	4806      	ldr	r0, [pc, #24]	@ (8003f80 <MX_TIM2_Init+0x98>)
 8003f68:	f004 faea 	bl	8008540 <HAL_TIMEx_MasterConfigSynchronization>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003f72:	f000 f8b7 	bl	80040e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f76:	bf00      	nop
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20025d04 	.word	0x20025d04

08003f84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f98:	463b      	mov	r3, r7
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8004020 <MX_TIM3_Init+0x9c>)
 8003fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PRESCALER;
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fa8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003fac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fae:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003fb4:	4b19      	ldr	r3, [pc, #100]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbc:	4b17      	ldr	r3, [pc, #92]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	4b16      	ldr	r3, [pc, #88]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003fc8:	4814      	ldr	r0, [pc, #80]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fca:	f004 f85d 	bl	8008088 <HAL_TIM_Base_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003fd4:	f000 f886 	bl	80040e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	480d      	ldr	r0, [pc, #52]	@ (800401c <MX_TIM3_Init+0x98>)
 8003fe6:	f004 f89e 	bl	8008126 <HAL_TIM_ConfigClockSource>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003ff0:	f000 f878 	bl	80040e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	4619      	mov	r1, r3
 8004000:	4806      	ldr	r0, [pc, #24]	@ (800401c <MX_TIM3_Init+0x98>)
 8004002:	f004 fa9d 	bl	8008540 <HAL_TIMEx_MasterConfigSynchronization>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800400c:	f000 f86a 	bl	80040e4 <Error_Handler>
  }
  Timer_Added2RemoveSRcuzItStartsOnHere();
 8004010:	f7fd fdf2 	bl	8001bf8 <Timer_Added2RemoveSRcuzItStartsOnHere>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20025d4c 	.word	0x20025d4c
 8004020:	40000400 	.word	0x40000400

08004024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	4b2c      	ldr	r3, [pc, #176]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	4a2b      	ldr	r2, [pc, #172]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004034:	f043 0320 	orr.w	r3, r3, #32
 8004038:	6313      	str	r3, [r2, #48]	@ 0x30
 800403a:	4b29      	ldr	r3, [pc, #164]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	4a24      	ldr	r2, [pc, #144]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6313      	str	r3, [r2, #48]	@ 0x30
 8004056:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b1e      	ldr	r3, [pc, #120]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	6313      	str	r3, [r2, #48]	@ 0x30
 8004072:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	4a16      	ldr	r2, [pc, #88]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	6313      	str	r3, [r2, #48]	@ 0x30
 800408e:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	4a0f      	ldr	r2, [pc, #60]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	4a08      	ldr	r2, [pc, #32]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 80040c0:	f043 0304 	orr.w	r3, r3, #4
 80040c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040c6:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <MX_GPIO_Init+0xbc>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040e8:	b672      	cpsid	i
}
 80040ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <Error_Handler+0x8>

080040f0 <SystemClockOverride>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
void SystemClockOverride(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b092      	sub	sp, #72	@ 0x48
 80040f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	603b      	str	r3, [r7, #0]
 80040fa:	4b1c      	ldr	r3, [pc, #112]	@ (800416c <SystemClockOverride+0x7c>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <SystemClockOverride+0x7c>)
 8004100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004104:	6413      	str	r3, [r2, #64]	@ 0x40
 8004106:	4b19      	ldr	r3, [pc, #100]	@ (800416c <SystemClockOverride+0x7c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	603b      	str	r3, [r7, #0]
 8004110:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004112:	2301      	movs	r3, #1
 8004114:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800411a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800411c:	2302      	movs	r3, #2
 800411e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004120:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004124:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004126:	2308      	movs	r3, #8
 8004128:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800412a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004130:	2302      	movs	r3, #2
 8004132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004134:	2307      	movs	r3, #7
 8004136:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	4618      	mov	r0, r3
 800413c:	f002 fe40 	bl	8006dc0 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004140:	230f      	movs	r3, #15
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004144:	2302      	movs	r3, #2
 8004146:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004148:	2300      	movs	r3, #0
 800414a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800414c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004150:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004156:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004158:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800415c:	2105      	movs	r1, #5
 800415e:	4618      	mov	r0, r3
 8004160:	f003 f8a6 	bl	80072b0 <HAL_RCC_ClockConfig>
}
 8004164:	bf00      	nop
 8004166:	3748      	adds	r7, #72	@ 0x48
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800

08004170 <PlayGame>:
void PlayGame(){
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	Clear_LCD_Screen();
 8004174:	f7fc fa94 	bl	80006a0 <Clear_LCD_Screen>
	Display_Game_Bckrnd();
 8004178:	f7fc fa36 	bl	80005e8 <Display_Game_Bckrnd>
	New_Game();
 800417c:	f7fc fb61 	bl	8000842 <New_Game>
	Display_Current_Square();
 8004180:	f7fc fa96 	bl	80006b0 <Display_Current_Square>
	startTimers();
 8004184:	f7fc fa0e 	bl	80005a4 <startTimers>
	while(Check_Alive()){
 8004188:	e005      	b.n	8004196 <PlayGame+0x26>
		Pull_Touch_Input();
 800418a:	f7fc fb17 	bl	80007bc <Pull_Touch_Input>
		Clear_Game_Time();
 800418e:	f7fc fa71 	bl	8000674 <Clear_Game_Time>
		Display_Game_Time();
 8004192:	f7fc fa2f 	bl	80005f4 <Display_Game_Time>
	while(Check_Alive()){
 8004196:	f7fc fb4d 	bl	8000834 <Check_Alive>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f4      	bne.n	800418a <PlayGame+0x1a>
	}
	EndGame();
 80041a0:	f000 f802 	bl	80041a8 <EndGame>
}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <EndGame>:
void EndGame(){
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
	Clear_LCD_Screen();
 80041ae:	f7fc fa77 	bl	80006a0 <Clear_LCD_Screen>
	Display_Game_Time();
 80041b2:	f7fc fa1f 	bl	80005f4 <Display_Game_Time>
	stopTimers();
 80041b6:	f7fc f9ff 	bl	80005b8 <stopTimers>
	End_Game();
 80041ba:	f7fc fb4b 	bl	8000854 <End_Game>
	bool unpressed = 1;
 80041be:	2301      	movs	r3, #1
 80041c0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(200);
 80041c2:	20c8      	movs	r0, #200	@ 0xc8
 80041c4:	f000 feda 	bl	8004f7c <HAL_Delay>
	while(unpressed){
 80041c8:	e006      	b.n	80041d8 <EndGame+0x30>
		if(Check_Play_Pressed()){
 80041ca:	f7fc fa59 	bl	8000680 <Check_Play_Pressed>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <EndGame+0x30>
			unpressed=0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	71fb      	strb	r3, [r7, #7]
	while(unpressed){
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f5      	bne.n	80041ca <EndGame+0x22>
		}
	}
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <HAL_MspInit+0x4c>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004234 <HAL_MspInit+0x4c>)
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <HAL_MspInit+0x4c>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_MspInit+0x4c>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	4a08      	ldr	r2, [pc, #32]	@ (8004234 <HAL_MspInit+0x4c>)
 8004214:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004218:	6413      	str	r3, [r2, #64]	@ 0x40
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_MspInit+0x4c>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	@ 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a29      	ldr	r2, [pc, #164]	@ (80042fc <HAL_I2C_MspInit+0xc4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d14b      	bne.n	80042f2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	4b28      	ldr	r3, [pc, #160]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 8004264:	f043 0304 	orr.w	r3, r3, #4
 8004268:	6313      	str	r3, [r2, #48]	@ 0x30
 800426a:	4b25      	ldr	r3, [pc, #148]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	4b21      	ldr	r3, [pc, #132]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	4a20      	ldr	r2, [pc, #128]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6313      	str	r3, [r2, #48]	@ 0x30
 8004286:	4b1e      	ldr	r3, [pc, #120]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004298:	2312      	movs	r3, #18
 800429a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a0:	2303      	movs	r3, #3
 80042a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80042a4:	2304      	movs	r3, #4
 80042a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	4619      	mov	r1, r3
 80042ae:	4815      	ldr	r0, [pc, #84]	@ (8004304 <HAL_I2C_MspInit+0xcc>)
 80042b0:	f000 ff6e 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ba:	2312      	movs	r3, #18
 80042bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c2:	2303      	movs	r3, #3
 80042c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80042c6:	2304      	movs	r3, #4
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ca:	f107 0314 	add.w	r3, r7, #20
 80042ce:	4619      	mov	r1, r3
 80042d0:	480d      	ldr	r0, [pc, #52]	@ (8004308 <HAL_I2C_MspInit+0xd0>)
 80042d2:	f000 ff5d 	bl	8005190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	60bb      	str	r3, [r7, #8]
 80042da:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 80042e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80042e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <HAL_I2C_MspInit+0xc8>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80042f2:	bf00      	nop
 80042f4:	3728      	adds	r7, #40	@ 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40005c00 	.word	0x40005c00
 8004300:	40023800 	.word	0x40023800
 8004304:	40020800 	.word	0x40020800
 8004308:	40020000 	.word	0x40020000

0800430c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b09a      	sub	sp, #104	@ 0x68
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004328:	2230      	movs	r2, #48	@ 0x30
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f004 fa39 	bl	80087a4 <memset>
  if(hltdc->Instance==LTDC)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a78      	ldr	r2, [pc, #480]	@ (8004518 <HAL_LTDC_MspInit+0x20c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	f040 80e9 	bne.w	8004510 <HAL_LTDC_MspInit+0x204>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800433e:	2308      	movs	r3, #8
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8004342:	2332      	movs	r3, #50	@ 0x32
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8004346:	2302      	movs	r3, #2
 8004348:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800434a:	2300      	movs	r3, #0
 800434c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800434e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004352:	4618      	mov	r0, r3
 8004354:	f003 f978 	bl	8007648 <HAL_RCCEx_PeriphCLKConfig>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800435e:	f7ff fec1 	bl	80040e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	4b6d      	ldr	r3, [pc, #436]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	4a6c      	ldr	r2, [pc, #432]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 800436c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004370:	6453      	str	r3, [r2, #68]	@ 0x44
 8004372:	4b6a      	ldr	r3, [pc, #424]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	4a65      	ldr	r2, [pc, #404]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004388:	f043 0320 	orr.w	r3, r3, #32
 800438c:	6313      	str	r3, [r2, #48]	@ 0x30
 800438e:	4b63      	ldr	r3, [pc, #396]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	4b5f      	ldr	r3, [pc, #380]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a2:	4a5e      	ldr	r2, [pc, #376]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043aa:	4b5c      	ldr	r3, [pc, #368]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	4b58      	ldr	r3, [pc, #352]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	4a57      	ldr	r2, [pc, #348]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c6:	4b55      	ldr	r3, [pc, #340]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	4b51      	ldr	r3, [pc, #324]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4a50      	ldr	r2, [pc, #320]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043dc:	f043 0310 	orr.w	r3, r3, #16
 80043e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043e2:	4b4e      	ldr	r3, [pc, #312]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4b4a      	ldr	r3, [pc, #296]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	4a49      	ldr	r2, [pc, #292]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 80043f8:	f043 0308 	orr.w	r3, r3, #8
 80043fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043fe:	4b47      	ldr	r3, [pc, #284]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	4b43      	ldr	r3, [pc, #268]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004412:	4a42      	ldr	r2, [pc, #264]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	6313      	str	r3, [r2, #48]	@ 0x30
 800441a:	4b40      	ldr	r3, [pc, #256]	@ (800451c <HAL_LTDC_MspInit+0x210>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004426:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800442a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442c:	2302      	movs	r3, #2
 800442e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004430:	2300      	movs	r3, #0
 8004432:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004434:	2300      	movs	r3, #0
 8004436:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004438:	230e      	movs	r3, #14
 800443a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800443c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004440:	4619      	mov	r1, r3
 8004442:	4837      	ldr	r0, [pc, #220]	@ (8004520 <HAL_LTDC_MspInit+0x214>)
 8004444:	f000 fea4 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8004448:	f641 0358 	movw	r3, #6232	@ 0x1858
 800444c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444e:	2302      	movs	r3, #2
 8004450:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004452:	2300      	movs	r3, #0
 8004454:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004456:	2300      	movs	r3, #0
 8004458:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800445a:	230e      	movs	r3, #14
 800445c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004462:	4619      	mov	r1, r3
 8004464:	482f      	ldr	r0, [pc, #188]	@ (8004524 <HAL_LTDC_MspInit+0x218>)
 8004466:	f000 fe93 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800446a:	2303      	movs	r3, #3
 800446c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446e:	2302      	movs	r3, #2
 8004470:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004472:	2300      	movs	r3, #0
 8004474:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004476:	2300      	movs	r3, #0
 8004478:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800447a:	2309      	movs	r3, #9
 800447c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800447e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004482:	4619      	mov	r1, r3
 8004484:	4828      	ldr	r0, [pc, #160]	@ (8004528 <HAL_LTDC_MspInit+0x21c>)
 8004486:	f000 fe83 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800448a:	f44f 4358 	mov.w	r3, #55296	@ 0xd800
 800448e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004490:	2302      	movs	r3, #2
 8004492:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004494:	2300      	movs	r3, #0
 8004496:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004498:	2300      	movs	r3, #0
 800449a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800449c:	230e      	movs	r3, #14
 800449e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044a4:	4619      	mov	r1, r3
 80044a6:	4821      	ldr	r0, [pc, #132]	@ (800452c <HAL_LTDC_MspInit+0x220>)
 80044a8:	f000 fe72 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80044ac:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80044b0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ba:	2300      	movs	r3, #0
 80044bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044be:	230e      	movs	r3, #14
 80044c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044c6:	4619      	mov	r1, r3
 80044c8:	4817      	ldr	r0, [pc, #92]	@ (8004528 <HAL_LTDC_MspInit+0x21c>)
 80044ca:	f000 fe61 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80044ce:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80044d2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044dc:	2300      	movs	r3, #0
 80044de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044e0:	230e      	movs	r3, #14
 80044e2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80044e8:	4619      	mov	r1, r3
 80044ea:	4811      	ldr	r0, [pc, #68]	@ (8004530 <HAL_LTDC_MspInit+0x224>)
 80044ec:	f000 fe50 	bl	8005190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044f0:	23c0      	movs	r3, #192	@ 0xc0
 80044f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f4:	2302      	movs	r3, #2
 80044f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004500:	230e      	movs	r3, #14
 8004502:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004508:	4619      	mov	r1, r3
 800450a:	480a      	ldr	r0, [pc, #40]	@ (8004534 <HAL_LTDC_MspInit+0x228>)
 800450c:	f000 fe40 	bl	8005190 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8004510:	bf00      	nop
 8004512:	3768      	adds	r7, #104	@ 0x68
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40016800 	.word	0x40016800
 800451c:	40023800 	.word	0x40023800
 8004520:	40021400 	.word	0x40021400
 8004524:	40020000 	.word	0x40020000
 8004528:	40020400 	.word	0x40020400
 800452c:	40021000 	.word	0x40021000
 8004530:	40020c00 	.word	0x40020c00
 8004534:	40020800 	.word	0x40020800

08004538 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0b      	ldr	r2, [pc, #44]	@ (8004574 <HAL_RNG_MspInit+0x3c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10d      	bne.n	8004566 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60fb      	str	r3, [r7, #12]
 800454e:	4b0a      	ldr	r3, [pc, #40]	@ (8004578 <HAL_RNG_MspInit+0x40>)
 8004550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004552:	4a09      	ldr	r2, [pc, #36]	@ (8004578 <HAL_RNG_MspInit+0x40>)
 8004554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004558:	6353      	str	r3, [r2, #52]	@ 0x34
 800455a:	4b07      	ldr	r3, [pc, #28]	@ (8004578 <HAL_RNG_MspInit+0x40>)
 800455c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	50060800 	.word	0x50060800
 8004578:	40023800 	.word	0x40023800

0800457c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	@ 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <HAL_SPI_MspInit+0x84>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d12c      	bne.n	80045f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	4b18      	ldr	r3, [pc, #96]	@ (8004604 <HAL_SPI_MspInit+0x88>)
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	4a17      	ldr	r2, [pc, #92]	@ (8004604 <HAL_SPI_MspInit+0x88>)
 80045a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ae:	4b15      	ldr	r3, [pc, #84]	@ (8004604 <HAL_SPI_MspInit+0x88>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <HAL_SPI_MspInit+0x88>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	4a10      	ldr	r2, [pc, #64]	@ (8004604 <HAL_SPI_MspInit+0x88>)
 80045c4:	f043 0320 	orr.w	r3, r3, #32
 80045c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <HAL_SPI_MspInit+0x88>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80045d6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80045da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	2302      	movs	r3, #2
 80045de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e4:	2303      	movs	r3, #3
 80045e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80045e8:	2305      	movs	r3, #5
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	4619      	mov	r1, r3
 80045f2:	4805      	ldr	r0, [pc, #20]	@ (8004608 <HAL_SPI_MspInit+0x8c>)
 80045f4:	f000 fdcc 	bl	8005190 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80045f8:	bf00      	nop
 80045fa:	3728      	adds	r7, #40	@ 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40015000 	.word	0x40015000
 8004604:	40023800 	.word	0x40023800
 8004608:	40021400 	.word	0x40021400

0800460c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a08      	ldr	r2, [pc, #32]	@ (800463c <HAL_SPI_MspDeInit+0x30>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10a      	bne.n	8004634 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800461e:	4b08      	ldr	r3, [pc, #32]	@ (8004640 <HAL_SPI_MspDeInit+0x34>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	4a07      	ldr	r2, [pc, #28]	@ (8004640 <HAL_SPI_MspDeInit+0x34>)
 8004624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004628:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800462a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800462e:	4805      	ldr	r0, [pc, #20]	@ (8004644 <HAL_SPI_MspDeInit+0x38>)
 8004630:	f000 ff5a 	bl	80054e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40015000 	.word	0x40015000
 8004640:	40023800 	.word	0x40023800
 8004644:	40021400 	.word	0x40021400

08004648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <HAL_TIM_Base_MspInit+0x64>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	4a12      	ldr	r2, [pc, #72]	@ (80046ac <HAL_TIM_Base_MspInit+0x64>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6413      	str	r3, [r2, #64]	@ 0x40
 800466a:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_TIM_Base_MspInit+0x64>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004676:	e012      	b.n	800469e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a0c      	ldr	r2, [pc, #48]	@ (80046b0 <HAL_TIM_Base_MspInit+0x68>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10d      	bne.n	800469e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <HAL_TIM_Base_MspInit+0x64>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <HAL_TIM_Base_MspInit+0x64>)
 800468c:	f043 0302 	orr.w	r3, r3, #2
 8004690:	6413      	str	r3, [r2, #64]	@ 0x40
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_TIM_Base_MspInit+0x64>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40000400 	.word	0x40000400

080046b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <NMI_Handler+0x4>

080046bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046c0:	bf00      	nop
 80046c2:	e7fd      	b.n	80046c0 <HardFault_Handler+0x4>

080046c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <MemManage_Handler+0x4>

080046cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046d0:	bf00      	nop
 80046d2:	e7fd      	b.n	80046d0 <BusFault_Handler+0x4>

080046d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046d8:	bf00      	nop
 80046da:	e7fd      	b.n	80046d8 <UsageFault_Handler+0x4>

080046dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046ea:	b480      	push	{r7}
 80046ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800470a:	f000 fc17 	bl	8004f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}

08004712 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8004718:	f000 f9ce 	bl	8004ab8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800471c:	f000 f98e 	bl	8004a3c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8004720:	2202      	movs	r2, #2
 8004722:	2103      	movs	r1, #3
 8004724:	2082      	movs	r0, #130	@ 0x82
 8004726:	f000 fa1b 	bl	8004b60 <I2C3_Write>
    HAL_Delay(5);
 800472a:	2005      	movs	r0, #5
 800472c:	f000 fc26 	bl	8004f7c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8004730:	2200      	movs	r2, #0
 8004732:	2103      	movs	r1, #3
 8004734:	2082      	movs	r0, #130	@ 0x82
 8004736:	f000 fa13 	bl	8004b60 <I2C3_Write>
    HAL_Delay(2);
 800473a:	2002      	movs	r0, #2
 800473c:	f000 fc1e 	bl	8004f7c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8004740:	1cba      	adds	r2, r7, #2
 8004742:	2302      	movs	r3, #2
 8004744:	2100      	movs	r1, #0
 8004746:	2082      	movs	r0, #130	@ 0x82
 8004748:	f000 fa5a 	bl	8004c00 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	b29a      	uxth	r2, r3
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	4313      	orrs	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	f640 0211 	movw	r2, #2065	@ 0x811
 8004764:	4293      	cmp	r3, r2
 8004766:	d001      	beq.n	800476c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8004768:	2303      	movs	r3, #3
 800476a:	e075      	b.n	8004858 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800476c:	2202      	movs	r2, #2
 800476e:	2103      	movs	r1, #3
 8004770:	2082      	movs	r0, #130	@ 0x82
 8004772:	f000 f9f5 	bl	8004b60 <I2C3_Write>
    HAL_Delay(5);
 8004776:	2005      	movs	r0, #5
 8004778:	f000 fc00 	bl	8004f7c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800477c:	2200      	movs	r2, #0
 800477e:	2103      	movs	r1, #3
 8004780:	2082      	movs	r0, #130	@ 0x82
 8004782:	f000 f9ed 	bl	8004b60 <I2C3_Write>
    HAL_Delay(2);
 8004786:	2002      	movs	r0, #2
 8004788:	f000 fbf8 	bl	8004f7c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800478c:	2004      	movs	r0, #4
 800478e:	f000 f867 	bl	8004860 <STMPE811_Read>
 8004792:	4603      	mov	r3, r0
 8004794:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8004796:	797b      	ldrb	r3, [r7, #5]
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800479e:	797b      	ldrb	r3, [r7, #5]
 80047a0:	461a      	mov	r2, r3
 80047a2:	2104      	movs	r1, #4
 80047a4:	2082      	movs	r0, #130	@ 0x82
 80047a6:	f000 f9db 	bl	8004b60 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80047aa:	2004      	movs	r0, #4
 80047ac:	f000 f858 	bl	8004860 <STMPE811_Read>
 80047b0:	4603      	mov	r3, r0
 80047b2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80047b4:	797b      	ldrb	r3, [r7, #5]
 80047b6:	f023 0302 	bic.w	r3, r3, #2
 80047ba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80047bc:	797b      	ldrb	r3, [r7, #5]
 80047be:	461a      	mov	r2, r3
 80047c0:	2104      	movs	r1, #4
 80047c2:	2082      	movs	r0, #130	@ 0x82
 80047c4:	f000 f9cc 	bl	8004b60 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80047c8:	2249      	movs	r2, #73	@ 0x49
 80047ca:	2120      	movs	r1, #32
 80047cc:	2082      	movs	r0, #130	@ 0x82
 80047ce:	f000 f9c7 	bl	8004b60 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80047d2:	2002      	movs	r0, #2
 80047d4:	f000 fbd2 	bl	8004f7c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80047d8:	2201      	movs	r2, #1
 80047da:	2121      	movs	r1, #33	@ 0x21
 80047dc:	2082      	movs	r0, #130	@ 0x82
 80047de:	f000 f9bf 	bl	8004b60 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80047e2:	2017      	movs	r0, #23
 80047e4:	f000 f83c 	bl	8004860 <STMPE811_Read>
 80047e8:	4603      	mov	r3, r0
 80047ea:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80047ec:	797b      	ldrb	r3, [r7, #5]
 80047ee:	f043 031e 	orr.w	r3, r3, #30
 80047f2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80047f4:	797b      	ldrb	r3, [r7, #5]
 80047f6:	461a      	mov	r2, r3
 80047f8:	2117      	movs	r1, #23
 80047fa:	2082      	movs	r0, #130	@ 0x82
 80047fc:	f000 f9b0 	bl	8004b60 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8004800:	229a      	movs	r2, #154	@ 0x9a
 8004802:	2141      	movs	r1, #65	@ 0x41
 8004804:	2082      	movs	r0, #130	@ 0x82
 8004806:	f000 f9ab 	bl	8004b60 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 800480a:	2201      	movs	r2, #1
 800480c:	214a      	movs	r1, #74	@ 0x4a
 800480e:	2082      	movs	r0, #130	@ 0x82
 8004810:	f000 f9a6 	bl	8004b60 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8004814:	2201      	movs	r2, #1
 8004816:	214b      	movs	r1, #75	@ 0x4b
 8004818:	2082      	movs	r0, #130	@ 0x82
 800481a:	f000 f9a1 	bl	8004b60 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800481e:	2200      	movs	r2, #0
 8004820:	214b      	movs	r1, #75	@ 0x4b
 8004822:	2082      	movs	r0, #130	@ 0x82
 8004824:	f000 f99c 	bl	8004b60 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8004828:	2201      	movs	r2, #1
 800482a:	2156      	movs	r1, #86	@ 0x56
 800482c:	2082      	movs	r0, #130	@ 0x82
 800482e:	f000 f997 	bl	8004b60 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8004832:	2201      	movs	r2, #1
 8004834:	2158      	movs	r1, #88	@ 0x58
 8004836:	2082      	movs	r0, #130	@ 0x82
 8004838:	f000 f992 	bl	8004b60 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800483c:	2203      	movs	r2, #3
 800483e:	2140      	movs	r1, #64	@ 0x40
 8004840:	2082      	movs	r0, #130	@ 0x82
 8004842:	f000 f98d 	bl	8004b60 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8004846:	22ff      	movs	r2, #255	@ 0xff
 8004848:	210b      	movs	r1, #11
 800484a:	2082      	movs	r0, #130	@ 0x82
 800484c:	f000 f988 	bl	8004b60 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8004850:	20c8      	movs	r0, #200	@ 0xc8
 8004852:	f000 fb93 	bl	8004f7c <HAL_Delay>

    return STMPE811_State_Ok;
 8004856:	2302      	movs	r3, #2

}
 8004858:	4618      	mov	r0, r3
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 800486a:	f107 020f 	add.w	r2, r7, #15
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	4619      	mov	r1, r3
 8004872:	2082      	movs	r0, #130	@ 0x82
 8004874:	f000 f99e 	bl	8004bb4 <I2C3_Read>

    return readData;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	791a      	ldrb	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8004892:	2040      	movs	r0, #64	@ 0x40
 8004894:	f7ff ffe4 	bl	8004860 <STMPE811_Read>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 800489c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0e      	blt.n	80048c2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80048aa:	2201      	movs	r2, #1
 80048ac:	214b      	movs	r1, #75	@ 0x4b
 80048ae:	2082      	movs	r0, #130	@ 0x82
 80048b0:	f000 f956 	bl	8004b60 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80048b4:	2200      	movs	r2, #0
 80048b6:	214b      	movs	r1, #75	@ 0x4b
 80048b8:	2082      	movs	r0, #130	@ 0x82
 80048ba:	f000 f951 	bl	8004b60 <I2C3_Write>

        return STMPE811_State_Released;
 80048be:	2301      	movs	r3, #1
 80048c0:	e0a7      	b.n	8004a12 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	799b      	ldrb	r3, [r3, #6]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d117      	bne.n	80048fa <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f9b8 	bl	8004c44 <TM_STMPE811_ReadX>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	885b      	ldrh	r3, [r3, #2]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fa0b 	bl	8004d00 <TM_STMPE811_ReadY>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80048f0:	3301      	adds	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	805a      	strh	r2, [r3, #2]
 80048f8:	e048      	b.n	800498c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	799b      	ldrb	r3, [r3, #6]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d112      	bne.n	8004928 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f99c 	bl	8004c44 <TM_STMPE811_ReadX>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	885b      	ldrh	r3, [r3, #2]
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f9f1 	bl	8004d00 <TM_STMPE811_ReadY>
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	805a      	strh	r2, [r3, #2]
 8004926:	e031      	b.n	800498c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	799b      	ldrb	r3, [r3, #6]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d115      	bne.n	800495c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	885b      	ldrh	r3, [r3, #2]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 f985 	bl	8004c44 <TM_STMPE811_ReadX>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f9da 	bl	8004d00 <TM_STMPE811_ReadY>
 800494c:	4603      	mov	r3, r0
 800494e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8004952:	3301      	adds	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	801a      	strh	r2, [r3, #0]
 800495a:	e017      	b.n	800498c <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	799b      	ldrb	r3, [r3, #6]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d113      	bne.n	800498c <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f96b 	bl	8004c44 <TM_STMPE811_ReadX>
 800496e:	4603      	mov	r3, r0
 8004970:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f000 f9be 	bl	8004d00 <TM_STMPE811_ReadY>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800498c:	2201      	movs	r2, #1
 800498e:	214b      	movs	r1, #75	@ 0x4b
 8004990:	2082      	movs	r0, #130	@ 0x82
 8004992:	f000 f8e5 	bl	8004b60 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8004996:	2200      	movs	r2, #0
 8004998:	214b      	movs	r1, #75	@ 0x4b
 800499a:	2082      	movs	r0, #130	@ 0x82
 800499c:	f000 f8e0 	bl	8004b60 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	799b      	ldrb	r3, [r3, #6]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <STMPE811_ReadTouch+0x12e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	799b      	ldrb	r3, [r3, #6]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d115      	bne.n	80049dc <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d027      	beq.n	8004a08 <STMPE811_ReadTouch+0x186>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	2bee      	cmp	r3, #238	@ 0xee
 80049be:	d823      	bhi.n	8004a08 <STMPE811_ReadTouch+0x186>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	885b      	ldrh	r3, [r3, #2]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01f      	beq.n	8004a08 <STMPE811_ReadTouch+0x186>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	885b      	ldrh	r3, [r3, #2]
 80049cc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80049d0:	d81a      	bhi.n	8004a08 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80049d8:	2300      	movs	r3, #0
 80049da:	e01a      	b.n	8004a12 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <STMPE811_ReadTouch+0x188>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80049ec:	d80d      	bhi.n	8004a0a <STMPE811_ReadTouch+0x188>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	885b      	ldrh	r3, [r3, #2]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <STMPE811_ReadTouch+0x188>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	885b      	ldrh	r3, [r3, #2]
 80049fa:	2bee      	cmp	r3, #238	@ 0xee
 80049fc:	d805      	bhi.n	8004a0a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e004      	b.n	8004a12 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8004a08:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8004a10:	2301      	movs	r3, #1
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8004a20:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20025de8 	.word	0x20025de8

08004a3c <I2C3_Init>:

static void I2C3_Init()
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	4b18      	ldr	r3, [pc, #96]	@ (8004aa8 <I2C3_Init+0x6c>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	4a17      	ldr	r2, [pc, #92]	@ (8004aa8 <I2C3_Init+0x6c>)
 8004a4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <I2C3_Init+0x6c>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8004a5e:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <I2C3_Init+0x70>)
 8004a60:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <I2C3_Init+0x74>)
 8004a62:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8004a64:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <I2C3_Init+0x70>)
 8004a66:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <I2C3_Init+0x78>)
 8004a68:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <I2C3_Init+0x70>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8004a70:	4b0e      	ldr	r3, [pc, #56]	@ (8004aac <I2C3_Init+0x70>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <I2C3_Init+0x70>)
 8004a78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004a7c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004aac <I2C3_Init+0x70>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a84:	4b09      	ldr	r3, [pc, #36]	@ (8004aac <I2C3_Init+0x70>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8004a8a:	4808      	ldr	r0, [pc, #32]	@ (8004aac <I2C3_Init+0x70>)
 8004a8c:	f000 fe52 	bl	8005734 <HAL_I2C_Init>
 8004a90:	4603      	mov	r3, r0
 8004a92:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8004a9a:	bf00      	nop
 8004a9c:	e7fd      	b.n	8004a9a <I2C3_Init+0x5e>
    }
    return;
 8004a9e:	bf00      	nop
}
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	20025d94 	.word	0x20025d94
 8004ab0:	40005c00 	.word	0x40005c00
 8004ab4:	000186a0 	.word	0x000186a0

08004ab8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004abe:	f107 030c 	add.w	r3, r7, #12
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	605a      	str	r2, [r3, #4]
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	60da      	str	r2, [r3, #12]
 8004acc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <I2C3_MspInit+0x9c>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b54 <I2C3_MspInit+0x9c>)
 8004ad8:	f043 0304 	orr.w	r3, r3, #4
 8004adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ade:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <I2C3_MspInit+0x9c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <I2C3_MspInit+0x9c>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <I2C3_MspInit+0x9c>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004afa:	4b16      	ldr	r3, [pc, #88]	@ (8004b54 <I2C3_MspInit+0x9c>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8004b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b0c:	2312      	movs	r3, #18
 8004b0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b18:	2304      	movs	r3, #4
 8004b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	4619      	mov	r1, r3
 8004b22:	480d      	ldr	r0, [pc, #52]	@ (8004b58 <I2C3_MspInit+0xa0>)
 8004b24:	f000 fb34 	bl	8005190 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8004b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b2e:	2312      	movs	r3, #18
 8004b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b3a:	2304      	movs	r3, #4
 8004b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8004b3e:	f107 030c 	add.w	r3, r7, #12
 8004b42:	4619      	mov	r1, r3
 8004b44:	4805      	ldr	r0, [pc, #20]	@ (8004b5c <I2C3_MspInit+0xa4>)
 8004b46:	f000 fb23 	bl	8005190 <HAL_GPIO_Init>
    
}
 8004b4a:	bf00      	nop
 8004b4c:	3720      	adds	r7, #32
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40020800 	.word	0x40020800
 8004b5c:	40020000 	.word	0x40020000

08004b60 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af04      	add	r7, sp, #16
 8004b66:	4603      	mov	r3, r0
 8004b68:	80fb      	strh	r3, [r7, #6]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	717b      	strb	r3, [r7, #5]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8004b72:	793b      	ldrb	r3, [r7, #4]
 8004b74:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004b76:	797b      	ldrb	r3, [r7, #5]
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	88f9      	ldrh	r1, [r7, #6]
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba8 <I2C3_Write+0x48>)
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	2301      	movs	r3, #1
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	f107 030f 	add.w	r3, r7, #15
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4807      	ldr	r0, [pc, #28]	@ (8004bac <I2C3_Write+0x4c>)
 8004b8e:	f000 ff15 	bl	80059bc <HAL_I2C_Mem_Write>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <I2C3_Write+0x50>)
 8004b98:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004b9a:	f7ff ff3f 	bl	8004a1c <verifyHAL_I2C_IS_OKAY>
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	0003d090 	.word	0x0003d090
 8004bac:	20025d94 	.word	0x20025d94
 8004bb0:	20025de8 	.word	0x20025de8

08004bb4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af04      	add	r7, sp, #16
 8004bba:	4603      	mov	r3, r0
 8004bbc:	603a      	str	r2, [r7, #0]
 8004bbe:	71fb      	strb	r3, [r7, #7]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	b299      	uxth	r1, r3
 8004bc8:	79bb      	ldrb	r3, [r7, #6]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <I2C3_Read+0x40>)
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4807      	ldr	r0, [pc, #28]	@ (8004bf8 <I2C3_Read+0x44>)
 8004bdc:	f000 ffe8 	bl	8005bb0 <HAL_I2C_Mem_Read>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b05      	ldr	r3, [pc, #20]	@ (8004bfc <I2C3_Read+0x48>)
 8004be6:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8004be8:	f7ff ff18 	bl	8004a1c <verifyHAL_I2C_IS_OKAY>
}
 8004bec:	bf00      	nop
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0003d090 	.word	0x0003d090
 8004bf8:	20025d94 	.word	0x20025d94
 8004bfc:	20025de8 	.word	0x20025de8

08004c00 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af04      	add	r7, sp, #16
 8004c06:	603a      	str	r2, [r7, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	71fb      	strb	r3, [r7, #7]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	71bb      	strb	r3, [r7, #6]
 8004c12:	4613      	mov	r3, r2
 8004c14:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	b299      	uxth	r1, r3
 8004c1a:	79bb      	ldrb	r3, [r7, #6]
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <I2C3_MulitByteRead+0x3c>)
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	88bb      	ldrh	r3, [r7, #4]
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4804      	ldr	r0, [pc, #16]	@ (8004c40 <I2C3_MulitByteRead+0x40>)
 8004c2e:	f000 ffbf 	bl	8005bb0 <HAL_I2C_Mem_Read>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	0003d090 	.word	0x0003d090
 8004c40:	20025d94 	.word	0x20025d94

08004c44 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8004c4e:	204d      	movs	r0, #77	@ 0x4d
 8004c50:	f7ff fe06 	bl	8004860 <STMPE811_Read>
 8004c54:	4603      	mov	r3, r0
 8004c56:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8004c58:	204e      	movs	r0, #78	@ 0x4e
 8004c5a:	f7ff fe01 	bl	8004860 <STMPE811_Read>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8004c62:	7a7b      	ldrb	r3, [r7, #9]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	b21a      	sxth	r2, r3
 8004c68:	7a3b      	ldrb	r3, [r7, #8]
 8004c6a:	b21b      	sxth	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8004c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c74:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	dc06      	bgt.n	8004c8a <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8004c7c:	89fb      	ldrh	r3, [r7, #14]
 8004c7e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8004c82:	330c      	adds	r3, #12
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	81fb      	strh	r3, [r7, #14]
 8004c88:	e005      	b.n	8004c96 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8004c90:	3308      	adds	r3, #8
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8004c96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c9a:	4a18      	ldr	r2, [pc, #96]	@ (8004cfc <TM_STMPE811_ReadX+0xb8>)
 8004c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8004ca0:	441a      	add	r2, r3
 8004ca2:	10d2      	asrs	r2, r2, #3
 8004ca4:	17db      	asrs	r3, r3, #31
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8004caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cae:	2bef      	cmp	r3, #239	@ 0xef
 8004cb0:	dd02      	ble.n	8004cb8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8004cb2:	23ef      	movs	r3, #239	@ 0xef
 8004cb4:	81fb      	strh	r3, [r7, #14]
 8004cb6:	e005      	b.n	8004cc4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8004cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	da01      	bge.n	8004cc4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8004cc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	dd05      	ble.n	8004cda <TM_STMPE811_ReadX+0x96>
 8004cce:	89fa      	ldrh	r2, [r7, #14]
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	b21b      	sxth	r3, r3
 8004cd8:	e004      	b.n	8004ce4 <TM_STMPE811_ReadX+0xa0>
 8004cda:	89fb      	ldrh	r3, [r7, #14]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	b21b      	sxth	r3, r3
 8004ce4:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8004ce6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	dd01      	ble.n	8004cf2 <TM_STMPE811_ReadX+0xae>
        return val;
 8004cee:	89fb      	ldrh	r3, [r7, #14]
 8004cf0:	e000      	b.n	8004cf4 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	88888889 	.word	0x88888889

08004d00 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8004d0a:	204f      	movs	r0, #79	@ 0x4f
 8004d0c:	f7ff fda8 	bl	8004860 <STMPE811_Read>
 8004d10:	4603      	mov	r3, r0
 8004d12:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8004d14:	2050      	movs	r0, #80	@ 0x50
 8004d16:	f7ff fda3 	bl	8004860 <STMPE811_Read>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8004d1e:	7a7b      	ldrb	r3, [r7, #9]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	b21a      	sxth	r2, r3
 8004d24:	7a3b      	ldrb	r3, [r7, #8]
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8004d2c:	89fb      	ldrh	r3, [r7, #14]
 8004d2e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8004d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d3a:	4a19      	ldr	r2, [pc, #100]	@ (8004da0 <TM_STMPE811_ReadY+0xa0>)
 8004d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8004d40:	1052      	asrs	r2, r2, #1
 8004d42:	17db      	asrs	r3, r3, #31
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8004d48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dc02      	bgt.n	8004d56 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	81fb      	strh	r3, [r7, #14]
 8004d54:	e007      	b.n	8004d66 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8004d56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d5e:	db02      	blt.n	8004d66 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8004d60:	f240 133f 	movw	r3, #319	@ 0x13f
 8004d64:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8004d66:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	dd05      	ble.n	8004d7c <TM_STMPE811_ReadY+0x7c>
 8004d70:	89fa      	ldrh	r2, [r7, #14]
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	e004      	b.n	8004d86 <TM_STMPE811_ReadY+0x86>
 8004d7c:	89fb      	ldrh	r3, [r7, #14]
 8004d7e:	88fa      	ldrh	r2, [r7, #6]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8004d88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	dd01      	ble.n	8004d94 <TM_STMPE811_ReadY+0x94>
        return val;
 8004d90:	89fb      	ldrh	r3, [r7, #14]
 8004d92:	e000      	b.n	8004d96 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8004d94:	88fb      	ldrh	r3, [r7, #6]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2e8ba2e9 	.word	0x2e8ba2e9

08004da4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <_sbrk+0x5c>)
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <_sbrk+0x60>)
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dc8:	4b13      	ldr	r3, [pc, #76]	@ (8004e18 <_sbrk+0x64>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	@ (8004e18 <_sbrk+0x64>)
 8004dd2:	4a12      	ldr	r2, [pc, #72]	@ (8004e1c <_sbrk+0x68>)
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dd6:	4b10      	ldr	r3, [pc, #64]	@ (8004e18 <_sbrk+0x64>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d207      	bcs.n	8004df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004de4:	f003 fcf6 	bl	80087d4 <__errno>
 8004de8:	4603      	mov	r3, r0
 8004dea:	220c      	movs	r2, #12
 8004dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295
 8004df2:	e009      	b.n	8004e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004df4:	4b08      	ldr	r3, [pc, #32]	@ (8004e18 <_sbrk+0x64>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <_sbrk+0x64>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	4a05      	ldr	r2, [pc, #20]	@ (8004e18 <_sbrk+0x64>)
 8004e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20030000 	.word	0x20030000
 8004e14:	00000400 	.word	0x00000400
 8004e18:	20025dec 	.word	0x20025dec
 8004e1c:	20025f40 	.word	0x20025f40

08004e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e24:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <SystemInit+0x20>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	4a05      	ldr	r2, [pc, #20]	@ (8004e40 <SystemInit+0x20>)
 8004e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	e000ed00 	.word	0xe000ed00

08004e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e48:	f7ff ffea 	bl	8004e20 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e4c:	480c      	ldr	r0, [pc, #48]	@ (8004e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e4e:	490d      	ldr	r1, [pc, #52]	@ (8004e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e50:	4a0d      	ldr	r2, [pc, #52]	@ (8004e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e54:	e002      	b.n	8004e5c <LoopCopyDataInit>

08004e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e5a:	3304      	adds	r3, #4

08004e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e60:	d3f9      	bcc.n	8004e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e62:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e64:	4c0a      	ldr	r4, [pc, #40]	@ (8004e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e68:	e001      	b.n	8004e6e <LoopFillZerobss>

08004e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e6c:	3204      	adds	r2, #4

08004e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e70:	d3fb      	bcc.n	8004e6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004e72:	f003 fcb5 	bl	80087e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e76:	f7fe fed4 	bl	8003c22 <main>
  bx  lr    
 8004e7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004e7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004e88:	0800a33c 	.word	0x0800a33c
  ldr r2, =_sbss
 8004e8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004e90:	20025f3c 	.word	0x20025f3c

08004e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e94:	e7fe      	b.n	8004e94 <ADC_IRQHandler>
	...

08004e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed8 <HAL_Init+0x40>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <HAL_Init+0x40>)
 8004ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_Init+0x40>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed8 <HAL_Init+0x40>)
 8004eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004eb4:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <HAL_Init+0x40>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a07      	ldr	r2, [pc, #28]	@ (8004ed8 <HAL_Init+0x40>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ec0:	2003      	movs	r0, #3
 8004ec2:	f000 f931 	bl	8005128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ec6:	200f      	movs	r0, #15
 8004ec8:	f000 f808 	bl	8004edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ecc:	f7ff f98c 	bl	80041e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023c00 	.word	0x40023c00

08004edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ee4:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <HAL_InitTick+0x54>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b12      	ldr	r3, [pc, #72]	@ (8004f34 <HAL_InitTick+0x58>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	4619      	mov	r1, r3
 8004eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f93b 	bl	8005176 <HAL_SYSTICK_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e00e      	b.n	8004f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d80a      	bhi.n	8004f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f10:	2200      	movs	r2, #0
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	f000 f911 	bl	800513e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f1c:	4a06      	ldr	r2, [pc, #24]	@ (8004f38 <HAL_InitTick+0x5c>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e000      	b.n	8004f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	2000001c 	.word	0x2000001c
 8004f34:	20000024 	.word	0x20000024
 8004f38:	20000020 	.word	0x20000020

08004f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f40:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <HAL_IncTick+0x20>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	461a      	mov	r2, r3
 8004f46:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <HAL_IncTick+0x24>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	4a04      	ldr	r2, [pc, #16]	@ (8004f60 <HAL_IncTick+0x24>)
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	20000024 	.word	0x20000024
 8004f60:	20025df0 	.word	0x20025df0

08004f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return uwTick;
 8004f68:	4b03      	ldr	r3, [pc, #12]	@ (8004f78 <HAL_GetTick+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20025df0 	.word	0x20025df0

08004f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f84:	f7ff ffee 	bl	8004f64 <HAL_GetTick>
 8004f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d005      	beq.n	8004fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f96:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <HAL_Delay+0x44>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fa2:	bf00      	nop
 8004fa4:	f7ff ffde 	bl	8004f64 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d8f7      	bhi.n	8004fa4 <HAL_Delay+0x28>
  {
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000024 	.word	0x20000024

08004fc4 <__NVIC_SetPriorityGrouping>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8005008 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ff6:	4a04      	ldr	r2, [pc, #16]	@ (8005008 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	60d3      	str	r3, [r2, #12]
}
 8004ffc:	bf00      	nop
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <__NVIC_GetPriorityGrouping>:
{
 800500c:	b480      	push	{r7}
 800500e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005010:	4b04      	ldr	r3, [pc, #16]	@ (8005024 <__NVIC_GetPriorityGrouping+0x18>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	f003 0307 	and.w	r3, r3, #7
}
 800501a:	4618      	mov	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	e000ed00 	.word	0xe000ed00

08005028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	6039      	str	r1, [r7, #0]
 8005032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005038:	2b00      	cmp	r3, #0
 800503a:	db0a      	blt.n	8005052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	490c      	ldr	r1, [pc, #48]	@ (8005074 <__NVIC_SetPriority+0x4c>)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	440b      	add	r3, r1
 800504c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005050:	e00a      	b.n	8005068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	b2da      	uxtb	r2, r3
 8005056:	4908      	ldr	r1, [pc, #32]	@ (8005078 <__NVIC_SetPriority+0x50>)
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	3b04      	subs	r3, #4
 8005060:	0112      	lsls	r2, r2, #4
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	440b      	add	r3, r1
 8005066:	761a      	strb	r2, [r3, #24]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	e000e100 	.word	0xe000e100
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	@ 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f1c3 0307 	rsb	r3, r3, #7
 8005096:	2b04      	cmp	r3, #4
 8005098:	bf28      	it	cs
 800509a:	2304      	movcs	r3, #4
 800509c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3304      	adds	r3, #4
 80050a2:	2b06      	cmp	r3, #6
 80050a4:	d902      	bls.n	80050ac <NVIC_EncodePriority+0x30>
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3b03      	subs	r3, #3
 80050aa:	e000      	b.n	80050ae <NVIC_EncodePriority+0x32>
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	401a      	ands	r2, r3
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050c4:	f04f 31ff 	mov.w	r1, #4294967295
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	43d9      	mvns	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d4:	4313      	orrs	r3, r2
         );
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3724      	adds	r7, #36	@ 0x24
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050f4:	d301      	bcc.n	80050fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050f6:	2301      	movs	r3, #1
 80050f8:	e00f      	b.n	800511a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005124 <SysTick_Config+0x40>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005102:	210f      	movs	r1, #15
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	f7ff ff8e 	bl	8005028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <SysTick_Config+0x40>)
 800510e:	2200      	movs	r2, #0
 8005110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005112:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <SysTick_Config+0x40>)
 8005114:	2207      	movs	r2, #7
 8005116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	e000e010 	.word	0xe000e010

08005128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ff47 	bl	8004fc4 <__NVIC_SetPriorityGrouping>
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	4603      	mov	r3, r0
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005150:	f7ff ff5c 	bl	800500c <__NVIC_GetPriorityGrouping>
 8005154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	6978      	ldr	r0, [r7, #20]
 800515c:	f7ff ff8e 	bl	800507c <NVIC_EncodePriority>
 8005160:	4602      	mov	r2, r0
 8005162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff5d 	bl	8005028 <__NVIC_SetPriority>
}
 800516e:	bf00      	nop
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ffb0 	bl	80050e4 <SysTick_Config>
 8005184:	4603      	mov	r3, r0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005190:	b480      	push	{r7}
 8005192:	b089      	sub	sp, #36	@ 0x24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e177      	b.n	800549c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051ac:	2201      	movs	r2, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4013      	ands	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	f040 8166 	bne.w	8005496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d005      	beq.n	80051e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d130      	bne.n	8005244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	2203      	movs	r2, #3
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4013      	ands	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005218:	2201      	movs	r2, #1
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 0201 	and.w	r2, r3, #1
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	2b03      	cmp	r3, #3
 800524e:	d017      	beq.n	8005280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	2203      	movs	r2, #3
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d123      	bne.n	80052d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	08da      	lsrs	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3208      	adds	r2, #8
 8005294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	220f      	movs	r2, #15
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4013      	ands	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	08da      	lsrs	r2, r3, #3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3208      	adds	r2, #8
 80052ce:	69b9      	ldr	r1, [r7, #24]
 80052d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	2203      	movs	r2, #3
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4013      	ands	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 0203 	and.w	r2, r3, #3
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 80c0 	beq.w	8005496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	4b66      	ldr	r3, [pc, #408]	@ (80054b4 <HAL_GPIO_Init+0x324>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531e:	4a65      	ldr	r2, [pc, #404]	@ (80054b4 <HAL_GPIO_Init+0x324>)
 8005320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005324:	6453      	str	r3, [r2, #68]	@ 0x44
 8005326:	4b63      	ldr	r3, [pc, #396]	@ (80054b4 <HAL_GPIO_Init+0x324>)
 8005328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005332:	4a61      	ldr	r2, [pc, #388]	@ (80054b8 <HAL_GPIO_Init+0x328>)
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	3302      	adds	r3, #2
 800533a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	220f      	movs	r2, #15
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	43db      	mvns	r3, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4013      	ands	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a58      	ldr	r2, [pc, #352]	@ (80054bc <HAL_GPIO_Init+0x32c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d037      	beq.n	80053ce <HAL_GPIO_Init+0x23e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a57      	ldr	r2, [pc, #348]	@ (80054c0 <HAL_GPIO_Init+0x330>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d031      	beq.n	80053ca <HAL_GPIO_Init+0x23a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a56      	ldr	r2, [pc, #344]	@ (80054c4 <HAL_GPIO_Init+0x334>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02b      	beq.n	80053c6 <HAL_GPIO_Init+0x236>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a55      	ldr	r2, [pc, #340]	@ (80054c8 <HAL_GPIO_Init+0x338>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d025      	beq.n	80053c2 <HAL_GPIO_Init+0x232>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a54      	ldr	r2, [pc, #336]	@ (80054cc <HAL_GPIO_Init+0x33c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01f      	beq.n	80053be <HAL_GPIO_Init+0x22e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a53      	ldr	r2, [pc, #332]	@ (80054d0 <HAL_GPIO_Init+0x340>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d019      	beq.n	80053ba <HAL_GPIO_Init+0x22a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a52      	ldr	r2, [pc, #328]	@ (80054d4 <HAL_GPIO_Init+0x344>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d013      	beq.n	80053b6 <HAL_GPIO_Init+0x226>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a51      	ldr	r2, [pc, #324]	@ (80054d8 <HAL_GPIO_Init+0x348>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00d      	beq.n	80053b2 <HAL_GPIO_Init+0x222>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a50      	ldr	r2, [pc, #320]	@ (80054dc <HAL_GPIO_Init+0x34c>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <HAL_GPIO_Init+0x21e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a4f      	ldr	r2, [pc, #316]	@ (80054e0 <HAL_GPIO_Init+0x350>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d101      	bne.n	80053aa <HAL_GPIO_Init+0x21a>
 80053a6:	2309      	movs	r3, #9
 80053a8:	e012      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053aa:	230a      	movs	r3, #10
 80053ac:	e010      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053ae:	2308      	movs	r3, #8
 80053b0:	e00e      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053b2:	2307      	movs	r3, #7
 80053b4:	e00c      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053b6:	2306      	movs	r3, #6
 80053b8:	e00a      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053ba:	2305      	movs	r3, #5
 80053bc:	e008      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053be:	2304      	movs	r3, #4
 80053c0:	e006      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053c2:	2303      	movs	r3, #3
 80053c4:	e004      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e002      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <HAL_GPIO_Init+0x240>
 80053ce:	2300      	movs	r3, #0
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	f002 0203 	and.w	r2, r2, #3
 80053d6:	0092      	lsls	r2, r2, #2
 80053d8:	4093      	lsls	r3, r2
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4313      	orrs	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053e0:	4935      	ldr	r1, [pc, #212]	@ (80054b8 <HAL_GPIO_Init+0x328>)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	089b      	lsrs	r3, r3, #2
 80053e6:	3302      	adds	r3, #2
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ee:	4b3d      	ldr	r3, [pc, #244]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005412:	4a34      	ldr	r2, [pc, #208]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005418:	4b32      	ldr	r3, [pc, #200]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	43db      	mvns	r3, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4013      	ands	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800543c:	4a29      	ldr	r2, [pc, #164]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005442:	4b28      	ldr	r3, [pc, #160]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	43db      	mvns	r3, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005466:	4a1f      	ldr	r2, [pc, #124]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800546c:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	43db      	mvns	r3, r3
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	4013      	ands	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005490:	4a14      	ldr	r2, [pc, #80]	@ (80054e4 <HAL_GPIO_Init+0x354>)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3301      	adds	r3, #1
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	f67f ae84 	bls.w	80051ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	3724      	adds	r7, #36	@ 0x24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40013800 	.word	0x40013800
 80054bc:	40020000 	.word	0x40020000
 80054c0:	40020400 	.word	0x40020400
 80054c4:	40020800 	.word	0x40020800
 80054c8:	40020c00 	.word	0x40020c00
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40021400 	.word	0x40021400
 80054d4:	40021800 	.word	0x40021800
 80054d8:	40021c00 	.word	0x40021c00
 80054dc:	40022000 	.word	0x40022000
 80054e0:	40022400 	.word	0x40022400
 80054e4:	40013c00 	.word	0x40013c00

080054e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e0d9      	b.n	80056b8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005504:	2201      	movs	r2, #1
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4013      	ands	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	f040 80c9 	bne.w	80056b2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005520:	4a6b      	ldr	r2, [pc, #428]	@ (80056d0 <HAL_GPIO_DeInit+0x1e8>)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	089b      	lsrs	r3, r3, #2
 8005526:	3302      	adds	r3, #2
 8005528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800552c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	220f      	movs	r2, #15
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	4013      	ands	r3, r2
 8005540:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a63      	ldr	r2, [pc, #396]	@ (80056d4 <HAL_GPIO_DeInit+0x1ec>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d037      	beq.n	80055ba <HAL_GPIO_DeInit+0xd2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a62      	ldr	r2, [pc, #392]	@ (80056d8 <HAL_GPIO_DeInit+0x1f0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d031      	beq.n	80055b6 <HAL_GPIO_DeInit+0xce>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a61      	ldr	r2, [pc, #388]	@ (80056dc <HAL_GPIO_DeInit+0x1f4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d02b      	beq.n	80055b2 <HAL_GPIO_DeInit+0xca>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a60      	ldr	r2, [pc, #384]	@ (80056e0 <HAL_GPIO_DeInit+0x1f8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d025      	beq.n	80055ae <HAL_GPIO_DeInit+0xc6>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a5f      	ldr	r2, [pc, #380]	@ (80056e4 <HAL_GPIO_DeInit+0x1fc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d01f      	beq.n	80055aa <HAL_GPIO_DeInit+0xc2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a5e      	ldr	r2, [pc, #376]	@ (80056e8 <HAL_GPIO_DeInit+0x200>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d019      	beq.n	80055a6 <HAL_GPIO_DeInit+0xbe>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a5d      	ldr	r2, [pc, #372]	@ (80056ec <HAL_GPIO_DeInit+0x204>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_GPIO_DeInit+0xba>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a5c      	ldr	r2, [pc, #368]	@ (80056f0 <HAL_GPIO_DeInit+0x208>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00d      	beq.n	800559e <HAL_GPIO_DeInit+0xb6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a5b      	ldr	r2, [pc, #364]	@ (80056f4 <HAL_GPIO_DeInit+0x20c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <HAL_GPIO_DeInit+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a5a      	ldr	r2, [pc, #360]	@ (80056f8 <HAL_GPIO_DeInit+0x210>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <HAL_GPIO_DeInit+0xae>
 8005592:	2309      	movs	r3, #9
 8005594:	e012      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 8005596:	230a      	movs	r3, #10
 8005598:	e010      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 800559a:	2308      	movs	r3, #8
 800559c:	e00e      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 800559e:	2307      	movs	r3, #7
 80055a0:	e00c      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055a2:	2306      	movs	r3, #6
 80055a4:	e00a      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055a6:	2305      	movs	r3, #5
 80055a8:	e008      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055aa:	2304      	movs	r3, #4
 80055ac:	e006      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055ae:	2303      	movs	r3, #3
 80055b0:	e004      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e002      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <HAL_GPIO_DeInit+0xd4>
 80055ba:	2300      	movs	r3, #0
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	f002 0203 	and.w	r2, r2, #3
 80055c2:	0092      	lsls	r2, r2, #2
 80055c4:	4093      	lsls	r3, r2
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d132      	bne.n	8005632 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80055cc:	4b4b      	ldr	r3, [pc, #300]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	43db      	mvns	r3, r3
 80055d4:	4949      	ldr	r1, [pc, #292]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80055da:	4b48      	ldr	r3, [pc, #288]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	4946      	ldr	r1, [pc, #280]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80055e8:	4b44      	ldr	r3, [pc, #272]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	4942      	ldr	r1, [pc, #264]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80055f6:	4b41      	ldr	r3, [pc, #260]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	43db      	mvns	r3, r3
 80055fe:	493f      	ldr	r1, [pc, #252]	@ (80056fc <HAL_GPIO_DeInit+0x214>)
 8005600:	4013      	ands	r3, r2
 8005602:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	220f      	movs	r2, #15
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005614:	4a2e      	ldr	r2, [pc, #184]	@ (80056d0 <HAL_GPIO_DeInit+0x1e8>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	3302      	adds	r3, #2
 800561c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	43da      	mvns	r2, r3
 8005624:	482a      	ldr	r0, [pc, #168]	@ (80056d0 <HAL_GPIO_DeInit+0x1e8>)
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	400a      	ands	r2, r1
 800562c:	3302      	adds	r3, #2
 800562e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	2103      	movs	r1, #3
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	08da      	lsrs	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3208      	adds	r2, #8
 8005650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	220f      	movs	r2, #15
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43db      	mvns	r3, r3
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	08d2      	lsrs	r2, r2, #3
 8005668:	4019      	ands	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3208      	adds	r2, #8
 800566e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	2103      	movs	r1, #3
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	2101      	movs	r1, #1
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	401a      	ands	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2103      	movs	r1, #3
 80056a6:	fa01 f303 	lsl.w	r3, r1, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	401a      	ands	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	3301      	adds	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	f67f af22 	bls.w	8005504 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	40013800 	.word	0x40013800
 80056d4:	40020000 	.word	0x40020000
 80056d8:	40020400 	.word	0x40020400
 80056dc:	40020800 	.word	0x40020800
 80056e0:	40020c00 	.word	0x40020c00
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40021400 	.word	0x40021400
 80056ec:	40021800 	.word	0x40021800
 80056f0:	40021c00 	.word	0x40021c00
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40022400 	.word	0x40022400
 80056fc:	40013c00 	.word	0x40013c00

08005700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	807b      	strh	r3, [r7, #2]
 800570c:	4613      	mov	r3, r2
 800570e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005710:	787b      	ldrb	r3, [r7, #1]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005716:	887a      	ldrh	r2, [r7, #2]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800571c:	e003      	b.n	8005726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800571e:	887b      	ldrh	r3, [r7, #2]
 8005720:	041a      	lsls	r2, r3, #16
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	619a      	str	r2, [r3, #24]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e12b      	b.n	800599e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fe fd6c 	bl	8004238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2224      	movs	r2, #36	@ 0x24
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005798:	f001 ff42 	bl	8007620 <HAL_RCC_GetPCLK1Freq>
 800579c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4a81      	ldr	r2, [pc, #516]	@ (80059a8 <HAL_I2C_Init+0x274>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d807      	bhi.n	80057b8 <HAL_I2C_Init+0x84>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a80      	ldr	r2, [pc, #512]	@ (80059ac <HAL_I2C_Init+0x278>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bf94      	ite	ls
 80057b0:	2301      	movls	r3, #1
 80057b2:	2300      	movhi	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e006      	b.n	80057c6 <HAL_I2C_Init+0x92>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a7d      	ldr	r2, [pc, #500]	@ (80059b0 <HAL_I2C_Init+0x27c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	bf94      	ite	ls
 80057c0:	2301      	movls	r3, #1
 80057c2:	2300      	movhi	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0e7      	b.n	800599e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a78      	ldr	r2, [pc, #480]	@ (80059b4 <HAL_I2C_Init+0x280>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	0c9b      	lsrs	r3, r3, #18
 80057d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a6a      	ldr	r2, [pc, #424]	@ (80059a8 <HAL_I2C_Init+0x274>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d802      	bhi.n	8005808 <HAL_I2C_Init+0xd4>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3301      	adds	r3, #1
 8005806:	e009      	b.n	800581c <HAL_I2C_Init+0xe8>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	4a69      	ldr	r2, [pc, #420]	@ (80059b8 <HAL_I2C_Init+0x284>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	099b      	lsrs	r3, r3, #6
 800581a:	3301      	adds	r3, #1
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	430b      	orrs	r3, r1
 8005822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800582e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	495c      	ldr	r1, [pc, #368]	@ (80059a8 <HAL_I2C_Init+0x274>)
 8005838:	428b      	cmp	r3, r1
 800583a:	d819      	bhi.n	8005870 <HAL_I2C_Init+0x13c>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1e59      	subs	r1, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fbb1 f3f3 	udiv	r3, r1, r3
 800584a:	1c59      	adds	r1, r3, #1
 800584c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005850:	400b      	ands	r3, r1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_I2C_Init+0x138>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1e59      	subs	r1, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	fbb1 f3f3 	udiv	r3, r1, r3
 8005864:	3301      	adds	r3, #1
 8005866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800586a:	e051      	b.n	8005910 <HAL_I2C_Init+0x1dc>
 800586c:	2304      	movs	r3, #4
 800586e:	e04f      	b.n	8005910 <HAL_I2C_Init+0x1dc>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d111      	bne.n	800589c <HAL_I2C_Init+0x168>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1e58      	subs	r0, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6859      	ldr	r1, [r3, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	440b      	add	r3, r1
 8005886:	fbb0 f3f3 	udiv	r3, r0, r3
 800588a:	3301      	adds	r3, #1
 800588c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005890:	2b00      	cmp	r3, #0
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e012      	b.n	80058c2 <HAL_I2C_Init+0x18e>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1e58      	subs	r0, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6859      	ldr	r1, [r3, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	0099      	lsls	r1, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80058b2:	3301      	adds	r3, #1
 80058b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf0c      	ite	eq
 80058bc:	2301      	moveq	r3, #1
 80058be:	2300      	movne	r3, #0
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_I2C_Init+0x196>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e022      	b.n	8005910 <HAL_I2C_Init+0x1dc>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10e      	bne.n	80058f0 <HAL_I2C_Init+0x1bc>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1e58      	subs	r0, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6859      	ldr	r1, [r3, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	440b      	add	r3, r1
 80058e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80058e4:	3301      	adds	r3, #1
 80058e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ee:	e00f      	b.n	8005910 <HAL_I2C_Init+0x1dc>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1e58      	subs	r0, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	0099      	lsls	r1, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	fbb0 f3f3 	udiv	r3, r0, r3
 8005906:	3301      	adds	r3, #1
 8005908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	6809      	ldr	r1, [r1, #0]
 8005914:	4313      	orrs	r3, r2
 8005916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800593e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6911      	ldr	r1, [r2, #16]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	4311      	orrs	r1, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	430b      	orrs	r3, r1
 8005952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695a      	ldr	r2, [r3, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	000186a0 	.word	0x000186a0
 80059ac:	001e847f 	.word	0x001e847f
 80059b0:	003d08ff 	.word	0x003d08ff
 80059b4:	431bde83 	.word	0x431bde83
 80059b8:	10624dd3 	.word	0x10624dd3

080059bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	4608      	mov	r0, r1
 80059c6:	4611      	mov	r1, r2
 80059c8:	461a      	mov	r2, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	817b      	strh	r3, [r7, #10]
 80059ce:	460b      	mov	r3, r1
 80059d0:	813b      	strh	r3, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059d6:	f7ff fac5 	bl	8004f64 <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	f040 80d9 	bne.w	8005b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2319      	movs	r3, #25
 80059f0:	2201      	movs	r2, #1
 80059f2:	496d      	ldr	r1, [pc, #436]	@ (8005ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fc8b 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005a00:	2302      	movs	r3, #2
 8005a02:	e0cc      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2C_Mem_Write+0x56>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e0c5      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1e2>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d007      	beq.n	8005a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2221      	movs	r2, #33	@ 0x21
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2240      	movs	r2, #64	@ 0x40
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a4d      	ldr	r2, [pc, #308]	@ (8005bac <HAL_I2C_Mem_Write+0x1f0>)
 8005a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a7a:	88f8      	ldrh	r0, [r7, #6]
 8005a7c:	893a      	ldrh	r2, [r7, #8]
 8005a7e:	8979      	ldrh	r1, [r7, #10]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	4603      	mov	r3, r0
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 fac2 	bl	8006014 <I2C_RequestMemoryWrite>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d052      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e081      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fd50 	bl	8006544 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d107      	bne.n	8005ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e06b      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d11b      	bne.n	8005b3c <HAL_I2C_Mem_Write+0x180>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d017      	beq.n	8005b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1aa      	bne.n	8005a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fd43 	bl	80065d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d107      	bne.n	8005b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e016      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	00100002 	.word	0x00100002
 8005bac:	ffff0000 	.word	0xffff0000

08005bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08c      	sub	sp, #48	@ 0x30
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bca:	f7ff f9cb 	bl	8004f64 <HAL_GetTick>
 8005bce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	f040 8214 	bne.w	8006006 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	2319      	movs	r3, #25
 8005be4:	2201      	movs	r2, #1
 8005be6:	497b      	ldr	r1, [pc, #492]	@ (8005dd4 <HAL_I2C_Mem_Read+0x224>)
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fb91 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e207      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_I2C_Mem_Read+0x56>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e200      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d007      	beq.n	8005c2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2222      	movs	r2, #34	@ 0x22
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2240      	movs	r2, #64	@ 0x40
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8005dd8 <HAL_I2C_Mem_Read+0x228>)
 8005c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c6e:	88f8      	ldrh	r0, [r7, #6]
 8005c70:	893a      	ldrh	r2, [r7, #8]
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fa5e 	bl	8006140 <I2C_RequestMemoryRead>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e1bc      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d113      	bne.n	8005cbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c96:	2300      	movs	r3, #0
 8005c98:	623b      	str	r3, [r7, #32]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e190      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d11b      	bne.n	8005cfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61fb      	str	r3, [r7, #28]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e170      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d11b      	bne.n	8005d3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	e150      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d54:	e144      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	f200 80f1 	bhi.w	8005f42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d123      	bne.n	8005db0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 fc79 	bl	8006664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e145      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dae:	e117      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d14e      	bne.n	8005e56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4906      	ldr	r1, [pc, #24]	@ (8005ddc <HAL_I2C_Mem_Read+0x22c>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 faa4 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e11a      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
 8005dd2:	bf00      	nop
 8005dd4:	00100002 	.word	0x00100002
 8005dd8:	ffff0000 	.word	0xffff0000
 8005ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e54:	e0c4      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	496c      	ldr	r1, [pc, #432]	@ (8006010 <HAL_I2C_Mem_Read+0x460>)
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fa55 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0cb      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4955      	ldr	r1, [pc, #340]	@ (8006010 <HAL_I2C_Mem_Read+0x460>)
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fa27 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e09d      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	691a      	ldr	r2, [r3, #16]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f40:	e04e      	b.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fb8c 	bl	8006664 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e058      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d124      	bne.n	8005fe0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d107      	bne.n	8005fae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f47f aeb6 	bne.w	8005d56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e000      	b.n	8006008 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3728      	adds	r7, #40	@ 0x28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	00010004 	.word	0x00010004

08006014 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	4608      	mov	r0, r1
 800601e:	4611      	mov	r1, r2
 8006020:	461a      	mov	r2, r3
 8006022:	4603      	mov	r3, r0
 8006024:	817b      	strh	r3, [r7, #10]
 8006026:	460b      	mov	r3, r1
 8006028:	813b      	strh	r3, [r7, #8]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800603c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	2200      	movs	r2, #0
 8006046:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f960 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006064:	d103      	bne.n	800606e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800606c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e05f      	b.n	8006132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006072:	897b      	ldrh	r3, [r7, #10]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	492d      	ldr	r1, [pc, #180]	@ (800613c <I2C_RequestMemoryWrite+0x128>)
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f9bb 	bl	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e04c      	b.n	8006132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060b0:	6a39      	ldr	r1, [r7, #32]
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fa46 	bl	8006544 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d107      	bne.n	80060d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e02b      	b.n	8006132 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d105      	bne.n	80060ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060e0:	893b      	ldrh	r3, [r7, #8]
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	611a      	str	r2, [r3, #16]
 80060ea:	e021      	b.n	8006130 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060ec:	893b      	ldrh	r3, [r7, #8]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fc:	6a39      	ldr	r1, [r7, #32]
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f000 fa20 	bl	8006544 <I2C_WaitOnTXEFlagUntilTimeout>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610e:	2b04      	cmp	r3, #4
 8006110:	d107      	bne.n	8006122 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e005      	b.n	8006132 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006126:	893b      	ldrh	r3, [r7, #8]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	00010002 	.word	0x00010002

08006140 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4603      	mov	r3, r0
 8006150:	817b      	strh	r3, [r7, #10]
 8006152:	460b      	mov	r3, r1
 8006154:	813b      	strh	r3, [r7, #8]
 8006156:	4613      	mov	r3, r2
 8006158:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006168:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	2200      	movs	r2, #0
 8006182:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f8c2 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800619c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a0:	d103      	bne.n	80061aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e0aa      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061ae:	897b      	ldrh	r3, [r7, #10]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	4952      	ldr	r1, [pc, #328]	@ (800630c <I2C_RequestMemoryRead+0x1cc>)
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f91d 	bl	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e097      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ec:	6a39      	ldr	r1, [r7, #32]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f9a8 	bl	8006544 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d107      	bne.n	8006212 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e076      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006216:	88fb      	ldrh	r3, [r7, #6]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d105      	bne.n	8006228 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	b2da      	uxtb	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	611a      	str	r2, [r3, #16]
 8006226:	e021      	b.n	800626c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006228:	893b      	ldrh	r3, [r7, #8]
 800622a:	0a1b      	lsrs	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	6a39      	ldr	r1, [r7, #32]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f982 	bl	8006544 <I2C_WaitOnTXEFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	2b04      	cmp	r3, #4
 800624c:	d107      	bne.n	800625e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800625c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e050      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006262:	893b      	ldrh	r3, [r7, #8]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800626c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626e:	6a39      	ldr	r1, [r7, #32]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f967 	bl	8006544 <I2C_WaitOnTXEFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	2b04      	cmp	r3, #4
 8006282:	d107      	bne.n	8006294 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006292:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e035      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f82b 	bl	8006310 <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00d      	beq.n	80062dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ce:	d103      	bne.n	80062d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e013      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062dc:	897b      	ldrh	r3, [r7, #10]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	4906      	ldr	r1, [pc, #24]	@ (800630c <I2C_RequestMemoryRead+0x1cc>)
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f886 	bl	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	00010002 	.word	0x00010002

08006310 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006320:	e048      	b.n	80063b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d044      	beq.n	80063b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632a:	f7fe fe1b 	bl	8004f64 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <I2C_WaitOnFlagUntilTimeout+0x30>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d139      	bne.n	80063b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d10d      	bne.n	8006366 <I2C_WaitOnFlagUntilTimeout+0x56>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	43da      	mvns	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4013      	ands	r3, r2
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	e00c      	b.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	43da      	mvns	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4013      	ands	r3, r2
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf0c      	ite	eq
 8006378:	2301      	moveq	r3, #1
 800637a:	2300      	movne	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	461a      	mov	r2, r3
 8006380:	79fb      	ldrb	r3, [r7, #7]
 8006382:	429a      	cmp	r2, r3
 8006384:	d116      	bne.n	80063b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	f043 0220 	orr.w	r2, r3, #32
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e023      	b.n	80063fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d10d      	bne.n	80063da <I2C_WaitOnFlagUntilTimeout+0xca>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	43da      	mvns	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	e00c      	b.n	80063f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	43da      	mvns	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d093      	beq.n	8006322 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006412:	e071      	b.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006422:	d123      	bne.n	800646c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006432:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800643c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	f043 0204 	orr.w	r2, r3, #4
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e067      	b.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006472:	d041      	beq.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006474:	f7fe fd76 	bl	8004f64 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	429a      	cmp	r2, r3
 8006482:	d302      	bcc.n	800648a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d136      	bne.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d10c      	bne.n	80064ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	43da      	mvns	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4013      	ands	r3, r2
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	bf14      	ite	ne
 80064a6:	2301      	movne	r3, #1
 80064a8:	2300      	moveq	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	e00b      	b.n	80064c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	43da      	mvns	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	4013      	ands	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	bf14      	ite	ne
 80064c0:	2301      	movne	r3, #1
 80064c2:	2300      	moveq	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d016      	beq.n	80064f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e4:	f043 0220 	orr.w	r2, r3, #32
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e021      	b.n	800653c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	0c1b      	lsrs	r3, r3, #16
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d10c      	bne.n	800651c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	43da      	mvns	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4013      	ands	r3, r2
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf14      	ite	ne
 8006514:	2301      	movne	r3, #1
 8006516:	2300      	moveq	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	e00b      	b.n	8006534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	43da      	mvns	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4013      	ands	r3, r2
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	f47f af6d 	bne.w	8006414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006550:	e034      	b.n	80065bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f8e3 	bl	800671e <I2C_IsAcknowledgeFailed>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e034      	b.n	80065cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d028      	beq.n	80065bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656a:	f7fe fcfb 	bl	8004f64 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	429a      	cmp	r2, r3
 8006578:	d302      	bcc.n	8006580 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d11d      	bne.n	80065bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800658a:	2b80      	cmp	r3, #128	@ 0x80
 800658c:	d016      	beq.n	80065bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	f043 0220 	orr.w	r2, r3, #32
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e007      	b.n	80065cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c6:	2b80      	cmp	r3, #128	@ 0x80
 80065c8:	d1c3      	bne.n	8006552 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065e0:	e034      	b.n	800664c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f89b 	bl	800671e <I2C_IsAcknowledgeFailed>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e034      	b.n	800665c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d028      	beq.n	800664c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fa:	f7fe fcb3 	bl	8004f64 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b04      	cmp	r3, #4
 800661c:	d016      	beq.n	800664c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e007      	b.n	800665c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b04      	cmp	r3, #4
 8006658:	d1c3      	bne.n	80065e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006670:	e049      	b.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b10      	cmp	r3, #16
 800667e:	d119      	bne.n	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0210 	mvn.w	r2, #16
 8006688:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e030      	b.n	8006716 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b4:	f7fe fc56 	bl	8004f64 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11d      	bne.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b40      	cmp	r3, #64	@ 0x40
 80066d6:	d016      	beq.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	f043 0220 	orr.w	r2, r3, #32
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e007      	b.n	8006716 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d1ae      	bne.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006734:	d11b      	bne.n	800676e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800673e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	f043 0204 	orr.w	r2, r3, #4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b20      	cmp	r3, #32
 8006790:	d129      	bne.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2224      	movs	r2, #36	@ 0x24
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0210 	bic.w	r2, r2, #16
 80067b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	d12a      	bne.n	8006864 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2224      	movs	r2, #36	@ 0x24
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0201 	bic.w	r2, r2, #1
 8006824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	f023 030f 	bic.w	r3, r3, #15
 8006834:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	b29a      	uxth	r2, r3
 800683a:	89fb      	ldrh	r3, [r7, #14]
 800683c:	4313      	orrs	r3, r2
 800683e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	89fa      	ldrh	r2, [r7, #14]
 8006846:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e000      	b.n	8006866 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006864:	2302      	movs	r3, #2
  }
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e0bf      	b.n	8006a06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fd fd36 	bl	800430c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80068b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6999      	ldr	r1, [r3, #24]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6899      	ldr	r1, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006a10 <HAL_LTDC_Init+0x19c>)
 80068e8:	400b      	ands	r3, r1
 80068ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	041b      	lsls	r3, r3, #16
 80068f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6899      	ldr	r1, [r3, #8]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68d9      	ldr	r1, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4b3e      	ldr	r3, [pc, #248]	@ (8006a10 <HAL_LTDC_Init+0x19c>)
 8006916:	400b      	ands	r3, r1
 8006918:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	041b      	lsls	r3, r3, #16
 8006920:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68d9      	ldr	r1, [r3, #12]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1a      	ldr	r2, [r3, #32]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6919      	ldr	r1, [r3, #16]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b33      	ldr	r3, [pc, #204]	@ (8006a10 <HAL_LTDC_Init+0x19c>)
 8006944:	400b      	ands	r3, r1
 8006946:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6919      	ldr	r1, [r3, #16]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6959      	ldr	r1, [r3, #20]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b27      	ldr	r3, [pc, #156]	@ (8006a10 <HAL_LTDC_Init+0x19c>)
 8006972:	400b      	ands	r3, r1
 8006974:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6959      	ldr	r1, [r3, #20]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80069b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0206 	orr.w	r2, r2, #6
 80069e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0201 	orr.w	r2, r2, #1
 80069f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	f000f800 	.word	0xf000f800

08006a14 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a14:	b5b0      	push	{r4, r5, r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_LTDC_ConfigLayer+0x1a>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e02c      	b.n	8006a88 <HAL_LTDC_ConfigLayer+0x74>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2134      	movs	r1, #52	@ 0x34
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4614      	mov	r4, r2
 8006a52:	461d      	mov	r5, r3
 8006a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f811 	bl	8006a90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2201      	movs	r2, #1
 8006a74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bdb0      	pop	{r4, r5, r7, pc}

08006a90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b089      	sub	sp, #36	@ 0x24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aac:	4413      	add	r3, r2
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	01db      	lsls	r3, r3, #7
 8006abc:	4413      	add	r3, r2
 8006abe:	3384      	adds	r3, #132	@ 0x84
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	01d2      	lsls	r2, r2, #7
 8006acc:	440a      	add	r2, r1
 8006ace:	3284      	adds	r2, #132	@ 0x84
 8006ad0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006ad4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ae6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ae8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	440b      	add	r3, r1
 8006af6:	3384      	adds	r3, #132	@ 0x84
 8006af8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006afe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b0e:	4413      	add	r3, r2
 8006b10:	041b      	lsls	r3, r3, #16
 8006b12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	01db      	lsls	r3, r3, #7
 8006b1e:	4413      	add	r3, r2
 8006b20:	3384      	adds	r3, #132	@ 0x84
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	01d2      	lsls	r2, r2, #7
 8006b2e:	440a      	add	r2, r1
 8006b30:	3284      	adds	r2, #132	@ 0x84
 8006b32:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b46:	4413      	add	r3, r2
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	01db      	lsls	r3, r3, #7
 8006b54:	440b      	add	r3, r1
 8006b56:	3384      	adds	r3, #132	@ 0x84
 8006b58:	4619      	mov	r1, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	01db      	lsls	r3, r3, #7
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3384      	adds	r3, #132	@ 0x84
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	4611      	mov	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	01d2      	lsls	r2, r2, #7
 8006b7a:	440a      	add	r2, r1
 8006b7c:	3284      	adds	r2, #132	@ 0x84
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	01db      	lsls	r3, r3, #7
 8006b8e:	4413      	add	r3, r2
 8006b90:	3384      	adds	r3, #132	@ 0x84
 8006b92:	461a      	mov	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	01db      	lsls	r3, r3, #7
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3384      	adds	r3, #132	@ 0x84
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	01db      	lsls	r3, r3, #7
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3384      	adds	r3, #132	@ 0x84
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006be0:	461a      	mov	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	01db      	lsls	r3, r3, #7
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3384      	adds	r3, #132	@ 0x84
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	01db      	lsls	r3, r3, #7
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3384      	adds	r3, #132	@ 0x84
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	4611      	mov	r1, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	01d2      	lsls	r2, r2, #7
 8006c1a:	440a      	add	r2, r1
 8006c1c:	3284      	adds	r2, #132	@ 0x84
 8006c1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	01db      	lsls	r3, r3, #7
 8006c2e:	4413      	add	r3, r2
 8006c30:	3384      	adds	r3, #132	@ 0x84
 8006c32:	461a      	mov	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	01db      	lsls	r3, r3, #7
 8006c44:	4413      	add	r3, r2
 8006c46:	3384      	adds	r3, #132	@ 0x84
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	01d2      	lsls	r2, r2, #7
 8006c54:	440a      	add	r2, r1
 8006c56:	3284      	adds	r2, #132	@ 0x84
 8006c58:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	6809      	ldr	r1, [r1, #0]
 8006c6e:	4608      	mov	r0, r1
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	01c9      	lsls	r1, r1, #7
 8006c74:	4401      	add	r1, r0
 8006c76:	3184      	adds	r1, #132	@ 0x84
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	01db      	lsls	r3, r3, #7
 8006c86:	4413      	add	r3, r2
 8006c88:	3384      	adds	r3, #132	@ 0x84
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	4413      	add	r3, r2
 8006c98:	3384      	adds	r3, #132	@ 0x84
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3384      	adds	r3, #132	@ 0x84
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	e01b      	b.n	8006cfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d102      	bne.n	8006cd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e014      	b.n	8006cfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d00b      	beq.n	8006cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d007      	beq.n	8006cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d003      	beq.n	8006cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cee:	2b07      	cmp	r3, #7
 8006cf0:	d102      	bne.n	8006cf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e001      	b.n	8006cfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	01db      	lsls	r3, r3, #7
 8006d06:	4413      	add	r3, r2
 8006d08:	3384      	adds	r3, #132	@ 0x84
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	4611      	mov	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	01d2      	lsls	r2, r2, #7
 8006d16:	440a      	add	r2, r1
 8006d18:	3284      	adds	r2, #132	@ 0x84
 8006d1a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	1acb      	subs	r3, r1, r3
 8006d36:	69f9      	ldr	r1, [r7, #28]
 8006d38:	fb01 f303 	mul.w	r3, r1, r3
 8006d3c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6809      	ldr	r1, [r1, #0]
 8006d42:	4608      	mov	r0, r1
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	01c9      	lsls	r1, r1, #7
 8006d48:	4401      	add	r1, r0
 8006d4a:	3184      	adds	r1, #132	@ 0x84
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	01db      	lsls	r3, r3, #7
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3384      	adds	r3, #132	@ 0x84
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	4611      	mov	r1, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	01d2      	lsls	r2, r2, #7
 8006d6a:	440a      	add	r2, r1
 8006d6c:	3284      	adds	r2, #132	@ 0x84
 8006d6e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	01db      	lsls	r3, r3, #7
 8006d82:	4413      	add	r3, r2
 8006d84:	3384      	adds	r3, #132	@ 0x84
 8006d86:	461a      	mov	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	01db      	lsls	r3, r3, #7
 8006d98:	4413      	add	r3, r2
 8006d9a:	3384      	adds	r3, #132	@ 0x84
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	4611      	mov	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	01d2      	lsls	r2, r2, #7
 8006da8:	440a      	add	r2, r1
 8006daa:	3284      	adds	r2, #132	@ 0x84
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6013      	str	r3, [r2, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3724      	adds	r7, #36	@ 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e267      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d075      	beq.n	8006eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006dde:	4b88      	ldr	r3, [pc, #544]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 030c 	and.w	r3, r3, #12
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d00c      	beq.n	8006e04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dea:	4b85      	ldr	r3, [pc, #532]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d112      	bne.n	8006e1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006df6:	4b82      	ldr	r3, [pc, #520]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e02:	d10b      	bne.n	8006e1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e04:	4b7e      	ldr	r3, [pc, #504]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d05b      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x108>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d157      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e242      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e24:	d106      	bne.n	8006e34 <HAL_RCC_OscConfig+0x74>
 8006e26:	4b76      	ldr	r3, [pc, #472]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a75      	ldr	r2, [pc, #468]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	e01d      	b.n	8006e70 <HAL_RCC_OscConfig+0xb0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e3c:	d10c      	bne.n	8006e58 <HAL_RCC_OscConfig+0x98>
 8006e3e:	4b70      	ldr	r3, [pc, #448]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6f      	ldr	r2, [pc, #444]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e00b      	b.n	8006e70 <HAL_RCC_OscConfig+0xb0>
 8006e58:	4b69      	ldr	r3, [pc, #420]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a68      	ldr	r2, [pc, #416]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4b66      	ldr	r3, [pc, #408]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a65      	ldr	r2, [pc, #404]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d013      	beq.n	8006ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e78:	f7fe f874 	bl	8004f64 <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e80:	f7fe f870 	bl	8004f64 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b64      	cmp	r3, #100	@ 0x64
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e207      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e92:	4b5b      	ldr	r3, [pc, #364]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0xc0>
 8006e9e:	e014      	b.n	8006eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea0:	f7fe f860 	bl	8004f64 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ea8:	f7fe f85c 	bl	8004f64 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b64      	cmp	r3, #100	@ 0x64
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e1f3      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eba:	4b51      	ldr	r3, [pc, #324]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0xe8>
 8006ec6:	e000      	b.n	8006eca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d063      	beq.n	8006f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ed6:	4b4a      	ldr	r3, [pc, #296]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ee2:	4b47      	ldr	r3, [pc, #284]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d11c      	bne.n	8006f28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eee:	4b44      	ldr	r3, [pc, #272]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d116      	bne.n	8006f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006efa:	4b41      	ldr	r3, [pc, #260]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <HAL_RCC_OscConfig+0x152>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d001      	beq.n	8006f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e1c7      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f12:	4b3b      	ldr	r3, [pc, #236]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	4937      	ldr	r1, [pc, #220]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f26:	e03a      	b.n	8006f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d020      	beq.n	8006f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f30:	4b34      	ldr	r3, [pc, #208]	@ (8007004 <HAL_RCC_OscConfig+0x244>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fe f815 	bl	8004f64 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f3e:	f7fe f811 	bl	8004f64 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e1a8      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f50:	4b2b      	ldr	r3, [pc, #172]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5c:	4b28      	ldr	r3, [pc, #160]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	4925      	ldr	r1, [pc, #148]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	600b      	str	r3, [r1, #0]
 8006f70:	e015      	b.n	8006f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f72:	4b24      	ldr	r3, [pc, #144]	@ (8007004 <HAL_RCC_OscConfig+0x244>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fd fff4 	bl	8004f64 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f80:	f7fd fff0 	bl	8004f64 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e187      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f92:	4b1b      	ldr	r3, [pc, #108]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d036      	beq.n	8007018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fb2:	4b15      	ldr	r3, [pc, #84]	@ (8007008 <HAL_RCC_OscConfig+0x248>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7fd ffd4 	bl	8004f64 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fc0:	f7fd ffd0 	bl	8004f64 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e167      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x200>
 8006fde:	e01b      	b.n	8007018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fe0:	4b09      	ldr	r3, [pc, #36]	@ (8007008 <HAL_RCC_OscConfig+0x248>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fe6:	f7fd ffbd 	bl	8004f64 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fec:	e00e      	b.n	800700c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fee:	f7fd ffb9 	bl	8004f64 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d907      	bls.n	800700c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e150      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
 8007000:	40023800 	.word	0x40023800
 8007004:	42470000 	.word	0x42470000
 8007008:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700c:	4b88      	ldr	r3, [pc, #544]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800700e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1ea      	bne.n	8006fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8097 	beq.w	8007154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800702a:	4b81      	ldr	r3, [pc, #516]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800702e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10f      	bne.n	8007056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	4b7d      	ldr	r3, [pc, #500]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703e:	4a7c      	ldr	r2, [pc, #496]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 8007040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007044:	6413      	str	r3, [r2, #64]	@ 0x40
 8007046:	4b7a      	ldr	r3, [pc, #488]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007056:	4b77      	ldr	r3, [pc, #476]	@ (8007234 <HAL_RCC_OscConfig+0x474>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800705e:	2b00      	cmp	r3, #0
 8007060:	d118      	bne.n	8007094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007062:	4b74      	ldr	r3, [pc, #464]	@ (8007234 <HAL_RCC_OscConfig+0x474>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a73      	ldr	r2, [pc, #460]	@ (8007234 <HAL_RCC_OscConfig+0x474>)
 8007068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800706c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800706e:	f7fd ff79 	bl	8004f64 <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007074:	e008      	b.n	8007088 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007076:	f7fd ff75 	bl	8004f64 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e10c      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007088:	4b6a      	ldr	r3, [pc, #424]	@ (8007234 <HAL_RCC_OscConfig+0x474>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0f0      	beq.n	8007076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d106      	bne.n	80070aa <HAL_RCC_OscConfig+0x2ea>
 800709c:	4b64      	ldr	r3, [pc, #400]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a0:	4a63      	ldr	r2, [pc, #396]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a8:	e01c      	b.n	80070e4 <HAL_RCC_OscConfig+0x324>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d10c      	bne.n	80070cc <HAL_RCC_OscConfig+0x30c>
 80070b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070b8:	f043 0304 	orr.w	r3, r3, #4
 80070bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80070be:	4b5c      	ldr	r3, [pc, #368]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c2:	4a5b      	ldr	r2, [pc, #364]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80070ca:	e00b      	b.n	80070e4 <HAL_RCC_OscConfig+0x324>
 80070cc:	4b58      	ldr	r3, [pc, #352]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070d0:	4a57      	ldr	r2, [pc, #348]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d8:	4b55      	ldr	r3, [pc, #340]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070dc:	4a54      	ldr	r2, [pc, #336]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80070de:	f023 0304 	bic.w	r3, r3, #4
 80070e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d015      	beq.n	8007118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fd ff3a 	bl	8004f64 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f2:	e00a      	b.n	800710a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f4:	f7fd ff36 	bl	8004f64 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e0cb      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710a:	4b49      	ldr	r3, [pc, #292]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0ee      	beq.n	80070f4 <HAL_RCC_OscConfig+0x334>
 8007116:	e014      	b.n	8007142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007118:	f7fd ff24 	bl	8004f64 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711e:	e00a      	b.n	8007136 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007120:	f7fd ff20 	bl	8004f64 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e0b5      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007136:	4b3e      	ldr	r3, [pc, #248]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ee      	bne.n	8007120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007148:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	4a38      	ldr	r2, [pc, #224]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 800714e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007152:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80a1 	beq.w	80072a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800715e:	4b34      	ldr	r3, [pc, #208]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b08      	cmp	r3, #8
 8007168:	d05c      	beq.n	8007224 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d141      	bne.n	80071f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007172:	4b31      	ldr	r3, [pc, #196]	@ (8007238 <HAL_RCC_OscConfig+0x478>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fd fef4 	bl	8004f64 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007180:	f7fd fef0 	bl	8004f64 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e087      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007192:	4b27      	ldr	r3, [pc, #156]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69da      	ldr	r2, [r3, #28]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	3b01      	subs	r3, #1
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	061b      	lsls	r3, r3, #24
 80071c2:	491b      	ldr	r1, [pc, #108]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <HAL_RCC_OscConfig+0x478>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ce:	f7fd fec9 	bl	8004f64 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d6:	f7fd fec5 	bl	8004f64 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e05c      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e8:	4b11      	ldr	r3, [pc, #68]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCC_OscConfig+0x416>
 80071f4:	e054      	b.n	80072a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f6:	4b10      	ldr	r3, [pc, #64]	@ (8007238 <HAL_RCC_OscConfig+0x478>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071fc:	f7fd feb2 	bl	8004f64 <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007204:	f7fd feae 	bl	8004f64 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e045      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007216:	4b06      	ldr	r3, [pc, #24]	@ (8007230 <HAL_RCC_OscConfig+0x470>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x444>
 8007222:	e03d      	b.n	80072a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e038      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
 8007230:	40023800 	.word	0x40023800
 8007234:	40007000 	.word	0x40007000
 8007238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800723c:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <HAL_RCC_OscConfig+0x4ec>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d028      	beq.n	800729c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007254:	429a      	cmp	r2, r3
 8007256:	d121      	bne.n	800729c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007262:	429a      	cmp	r2, r3
 8007264:	d11a      	bne.n	800729c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007274:	4293      	cmp	r3, r2
 8007276:	d111      	bne.n	800729c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	3b01      	subs	r3, #1
 8007286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007288:	429a      	cmp	r2, r3
 800728a:	d107      	bne.n	800729c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	40023800 	.word	0x40023800

080072b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0cc      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072c4:	4b68      	ldr	r3, [pc, #416]	@ (8007468 <HAL_RCC_ClockConfig+0x1b8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d90c      	bls.n	80072ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d2:	4b65      	ldr	r3, [pc, #404]	@ (8007468 <HAL_RCC_ClockConfig+0x1b8>)
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072da:	4b63      	ldr	r3, [pc, #396]	@ (8007468 <HAL_RCC_ClockConfig+0x1b8>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d001      	beq.n	80072ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0b8      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d020      	beq.n	800733a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007304:	4b59      	ldr	r3, [pc, #356]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	4a58      	ldr	r2, [pc, #352]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 800730a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800730e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800731c:	4b53      	ldr	r3, [pc, #332]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4a52      	ldr	r2, [pc, #328]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007328:	4b50      	ldr	r3, [pc, #320]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	494d      	ldr	r1, [pc, #308]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007336:	4313      	orrs	r3, r2
 8007338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d044      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d107      	bne.n	800735e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800734e:	4b47      	ldr	r3, [pc, #284]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d119      	bne.n	800738e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e07f      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d003      	beq.n	800736e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800736a:	2b03      	cmp	r3, #3
 800736c:	d107      	bne.n	800737e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800736e:	4b3f      	ldr	r3, [pc, #252]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e06f      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800737e:	4b3b      	ldr	r3, [pc, #236]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e067      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800738e:	4b37      	ldr	r3, [pc, #220]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f023 0203 	bic.w	r2, r3, #3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	4934      	ldr	r1, [pc, #208]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 800739c:	4313      	orrs	r3, r2
 800739e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073a0:	f7fd fde0 	bl	8004f64 <HAL_GetTick>
 80073a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a6:	e00a      	b.n	80073be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073a8:	f7fd fddc 	bl	8004f64 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e04f      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073be:	4b2b      	ldr	r3, [pc, #172]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 020c 	and.w	r2, r3, #12
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d1eb      	bne.n	80073a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073d0:	4b25      	ldr	r3, [pc, #148]	@ (8007468 <HAL_RCC_ClockConfig+0x1b8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d20c      	bcs.n	80073f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073de:	4b22      	ldr	r3, [pc, #136]	@ (8007468 <HAL_RCC_ClockConfig+0x1b8>)
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e6:	4b20      	ldr	r3, [pc, #128]	@ (8007468 <HAL_RCC_ClockConfig+0x1b8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d001      	beq.n	80073f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e032      	b.n	800745e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007404:	4b19      	ldr	r3, [pc, #100]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4916      	ldr	r1, [pc, #88]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007422:	4b12      	ldr	r3, [pc, #72]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	490e      	ldr	r1, [pc, #56]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 8007432:	4313      	orrs	r3, r2
 8007434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007436:	f000 f821 	bl	800747c <HAL_RCC_GetSysClockFreq>
 800743a:	4602      	mov	r2, r0
 800743c:	4b0b      	ldr	r3, [pc, #44]	@ (800746c <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	490a      	ldr	r1, [pc, #40]	@ (8007470 <HAL_RCC_ClockConfig+0x1c0>)
 8007448:	5ccb      	ldrb	r3, [r1, r3]
 800744a:	fa22 f303 	lsr.w	r3, r2, r3
 800744e:	4a09      	ldr	r2, [pc, #36]	@ (8007474 <HAL_RCC_ClockConfig+0x1c4>)
 8007450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007452:	4b09      	ldr	r3, [pc, #36]	@ (8007478 <HAL_RCC_ClockConfig+0x1c8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4618      	mov	r0, r3
 8007458:	f7fd fd40 	bl	8004edc <HAL_InitTick>

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	40023c00 	.word	0x40023c00
 800746c:	40023800 	.word	0x40023800
 8007470:	0800a314 	.word	0x0800a314
 8007474:	2000001c 	.word	0x2000001c
 8007478:	20000020 	.word	0x20000020

0800747c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800747c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007480:	b090      	sub	sp, #64	@ 0x40
 8007482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007494:	4b59      	ldr	r3, [pc, #356]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x180>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 030c 	and.w	r3, r3, #12
 800749c:	2b08      	cmp	r3, #8
 800749e:	d00d      	beq.n	80074bc <HAL_RCC_GetSysClockFreq+0x40>
 80074a0:	2b08      	cmp	r3, #8
 80074a2:	f200 80a1 	bhi.w	80075e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_RCC_GetSysClockFreq+0x34>
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d003      	beq.n	80074b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80074ae:	e09b      	b.n	80075e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074b0:	4b53      	ldr	r3, [pc, #332]	@ (8007600 <HAL_RCC_GetSysClockFreq+0x184>)
 80074b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074b4:	e09b      	b.n	80075ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074b6:	4b53      	ldr	r3, [pc, #332]	@ (8007604 <HAL_RCC_GetSysClockFreq+0x188>)
 80074b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074ba:	e098      	b.n	80075ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074bc:	4b4f      	ldr	r3, [pc, #316]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x180>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074c6:	4b4d      	ldr	r3, [pc, #308]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x180>)
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d028      	beq.n	8007524 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074d2:	4b4a      	ldr	r3, [pc, #296]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x180>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	099b      	lsrs	r3, r3, #6
 80074d8:	2200      	movs	r2, #0
 80074da:	623b      	str	r3, [r7, #32]
 80074dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80074e4:	2100      	movs	r1, #0
 80074e6:	4b47      	ldr	r3, [pc, #284]	@ (8007604 <HAL_RCC_GetSysClockFreq+0x188>)
 80074e8:	fb03 f201 	mul.w	r2, r3, r1
 80074ec:	2300      	movs	r3, #0
 80074ee:	fb00 f303 	mul.w	r3, r0, r3
 80074f2:	4413      	add	r3, r2
 80074f4:	4a43      	ldr	r2, [pc, #268]	@ (8007604 <HAL_RCC_GetSysClockFreq+0x188>)
 80074f6:	fba0 1202 	umull	r1, r2, r0, r2
 80074fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074fc:	460a      	mov	r2, r1
 80074fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007500:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007502:	4413      	add	r3, r2
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007508:	2200      	movs	r2, #0
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	61fa      	str	r2, [r7, #28]
 800750e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007512:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007516:	f7f8 fe69 	bl	80001ec <__aeabi_uldivmod>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4613      	mov	r3, r2
 8007520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007522:	e053      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007524:	4b35      	ldr	r3, [pc, #212]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x180>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	099b      	lsrs	r3, r3, #6
 800752a:	2200      	movs	r2, #0
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	617a      	str	r2, [r7, #20]
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007536:	f04f 0b00 	mov.w	fp, #0
 800753a:	4652      	mov	r2, sl
 800753c:	465b      	mov	r3, fp
 800753e:	f04f 0000 	mov.w	r0, #0
 8007542:	f04f 0100 	mov.w	r1, #0
 8007546:	0159      	lsls	r1, r3, #5
 8007548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800754c:	0150      	lsls	r0, r2, #5
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	ebb2 080a 	subs.w	r8, r2, sl
 8007556:	eb63 090b 	sbc.w	r9, r3, fp
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007566:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800756a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800756e:	ebb2 0408 	subs.w	r4, r2, r8
 8007572:	eb63 0509 	sbc.w	r5, r3, r9
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	00eb      	lsls	r3, r5, #3
 8007580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007584:	00e2      	lsls	r2, r4, #3
 8007586:	4614      	mov	r4, r2
 8007588:	461d      	mov	r5, r3
 800758a:	eb14 030a 	adds.w	r3, r4, sl
 800758e:	603b      	str	r3, [r7, #0]
 8007590:	eb45 030b 	adc.w	r3, r5, fp
 8007594:	607b      	str	r3, [r7, #4]
 8007596:	f04f 0200 	mov.w	r2, #0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075a2:	4629      	mov	r1, r5
 80075a4:	028b      	lsls	r3, r1, #10
 80075a6:	4621      	mov	r1, r4
 80075a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075ac:	4621      	mov	r1, r4
 80075ae:	028a      	lsls	r2, r1, #10
 80075b0:	4610      	mov	r0, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b6:	2200      	movs	r2, #0
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	60fa      	str	r2, [r7, #12]
 80075bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075c0:	f7f8 fe14 	bl	80001ec <__aeabi_uldivmod>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4613      	mov	r3, r2
 80075ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80075cc:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <HAL_RCC_GetSysClockFreq+0x180>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	3301      	adds	r3, #1
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80075dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80075e6:	e002      	b.n	80075ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075e8:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <HAL_RCC_GetSysClockFreq+0x184>)
 80075ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80075ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3740      	adds	r7, #64	@ 0x40
 80075f4:	46bd      	mov	sp, r7
 80075f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075fa:	bf00      	nop
 80075fc:	40023800 	.word	0x40023800
 8007600:	00f42400 	.word	0x00f42400
 8007604:	017d7840 	.word	0x017d7840

08007608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800760c:	4b03      	ldr	r3, [pc, #12]	@ (800761c <HAL_RCC_GetHCLKFreq+0x14>)
 800760e:	681b      	ldr	r3, [r3, #0]
}
 8007610:	4618      	mov	r0, r3
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	2000001c 	.word	0x2000001c

08007620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007624:	f7ff fff0 	bl	8007608 <HAL_RCC_GetHCLKFreq>
 8007628:	4602      	mov	r2, r0
 800762a:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	0a9b      	lsrs	r3, r3, #10
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	4903      	ldr	r1, [pc, #12]	@ (8007644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007636:	5ccb      	ldrb	r3, [r1, r3]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40023800 	.word	0x40023800
 8007644:	0800a324 	.word	0x0800a324

08007648 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10b      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007678:	2b00      	cmp	r3, #0
 800767a:	d075      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800767c:	4b91      	ldr	r3, [pc, #580]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007682:	f7fd fc6f 	bl	8004f64 <HAL_GetTick>
 8007686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007688:	e008      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800768a:	f7fd fc6b 	bl	8004f64 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e189      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800769c:	4b8a      	ldr	r3, [pc, #552]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d009      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	019a      	lsls	r2, r3, #6
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	071b      	lsls	r3, r3, #28
 80076c0:	4981      	ldr	r1, [pc, #516]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01f      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076d4:	4b7c      	ldr	r3, [pc, #496]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076da:	0f1b      	lsrs	r3, r3, #28
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	019a      	lsls	r2, r3, #6
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	431a      	orrs	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	071b      	lsls	r3, r3, #28
 80076f4:	4974      	ldr	r1, [pc, #464]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80076fc:	4b72      	ldr	r3, [pc, #456]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80076fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007702:	f023 021f 	bic.w	r2, r3, #31
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	3b01      	subs	r3, #1
 800770c:	496e      	ldr	r1, [pc, #440]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00d      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	019a      	lsls	r2, r3, #6
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	061b      	lsls	r3, r3, #24
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	071b      	lsls	r3, r3, #28
 8007734:	4964      	ldr	r1, [pc, #400]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800773c:	4b61      	ldr	r3, [pc, #388]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007742:	f7fd fc0f 	bl	8004f64 <HAL_GetTick>
 8007746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007748:	e008      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800774a:	f7fd fc0b 	bl	8004f64 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e129      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800775c:	4b5a      	ldr	r3, [pc, #360]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d105      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800777c:	2b00      	cmp	r3, #0
 800777e:	d079      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007780:	4b52      	ldr	r3, [pc, #328]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007786:	f7fd fbed 	bl	8004f64 <HAL_GetTick>
 800778a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800778c:	e008      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800778e:	f7fd fbe9 	bl	8004f64 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e107      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077a0:	4b49      	ldr	r3, [pc, #292]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077ac:	d0ef      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d020      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80077ba:	4b43      	ldr	r3, [pc, #268]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c0:	0f1b      	lsrs	r3, r3, #28
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	019a      	lsls	r2, r3, #6
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	061b      	lsls	r3, r3, #24
 80077d4:	431a      	orrs	r2, r3
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	071b      	lsls	r3, r3, #28
 80077da:	493b      	ldr	r1, [pc, #236]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80077e2:	4b39      	ldr	r3, [pc, #228]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	4934      	ldr	r1, [pc, #208]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01e      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007808:	4b2f      	ldr	r3, [pc, #188]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800780e:	0e1b      	lsrs	r3, r3, #24
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	019a      	lsls	r2, r3, #6
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	061b      	lsls	r3, r3, #24
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	071b      	lsls	r3, r3, #28
 8007828:	4927      	ldr	r1, [pc, #156]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800782a:	4313      	orrs	r3, r2
 800782c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007830:	4b25      	ldr	r3, [pc, #148]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007836:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783e:	4922      	ldr	r1, [pc, #136]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007840:	4313      	orrs	r3, r2
 8007842:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007846:	4b21      	ldr	r3, [pc, #132]	@ (80078cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800784c:	f7fd fb8a 	bl	8004f64 <HAL_GetTick>
 8007850:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007854:	f7fd fb86 	bl	8004f64 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e0a4      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007866:	4b18      	ldr	r3, [pc, #96]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800786e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007872:	d1ef      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 808b 	beq.w	8007998 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	4b10      	ldr	r3, [pc, #64]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	4a0f      	ldr	r2, [pc, #60]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800788c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007890:	6413      	str	r3, [r2, #64]	@ 0x40
 8007892:	4b0d      	ldr	r3, [pc, #52]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800789e:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a0b      	ldr	r2, [pc, #44]	@ (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80078a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078aa:	f7fd fb5b 	bl	8004f64 <HAL_GetTick>
 80078ae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80078b0:	e010      	b.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078b2:	f7fd fb57 	bl	8004f64 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d909      	bls.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e075      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80078c4:	42470068 	.word	0x42470068
 80078c8:	40023800 	.word	0x40023800
 80078cc:	42470070 	.word	0x42470070
 80078d0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80078d4:	4b38      	ldr	r3, [pc, #224]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0e8      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078e0:	4b36      	ldr	r3, [pc, #216]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d02f      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d028      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078fe:	4b2f      	ldr	r3, [pc, #188]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007906:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007908:	4b2d      	ldr	r3, [pc, #180]	@ (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800790e:	4b2c      	ldr	r3, [pc, #176]	@ (80079c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007914:	4a29      	ldr	r2, [pc, #164]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800791a:	4b28      	ldr	r3, [pc, #160]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800791c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b01      	cmp	r3, #1
 8007924:	d114      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007926:	f7fd fb1d 	bl	8004f64 <HAL_GetTick>
 800792a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800792c:	e00a      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800792e:	f7fd fb19 	bl	8004f64 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800793c:	4293      	cmp	r3, r2
 800793e:	d901      	bls.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e035      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007944:	4b1d      	ldr	r3, [pc, #116]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007948:	f003 0302 	and.w	r3, r3, #2
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0ee      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800795c:	d10d      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800795e:	4b17      	ldr	r3, [pc, #92]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800796a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800796e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007972:	4912      	ldr	r1, [pc, #72]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007974:	4313      	orrs	r3, r2
 8007976:	608b      	str	r3, [r1, #8]
 8007978:	e005      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800797a:	4b10      	ldr	r3, [pc, #64]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	4a0f      	ldr	r2, [pc, #60]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007980:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007984:	6093      	str	r3, [r2, #8]
 8007986:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007988:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007992:	490a      	ldr	r1, [pc, #40]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007994:	4313      	orrs	r3, r2
 8007996:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80079aa:	4b06      	ldr	r3, [pc, #24]	@ (80079c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80079ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40007000 	.word	0x40007000
 80079bc:	40023800 	.word	0x40023800
 80079c0:	42470e40 	.word	0x42470e40
 80079c4:	424711e0 	.word	0x424711e0

080079c8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e01c      	b.n	8007a14 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	795b      	ldrb	r3, [r3, #5]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fc fda4 	bl	8004538 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0204 	orr.w	r2, r2, #4
 8007a04:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	791b      	ldrb	r3, [r3, #4]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_RNG_GenerateRandomNumber+0x1a>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e044      	b.n	8007ac0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	795b      	ldrb	r3, [r3, #5]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d133      	bne.n	8007aae <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a4c:	f7fd fa8a 	bl	8004f64 <HAL_GetTick>
 8007a50:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a52:	e018      	b.n	8007a86 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007a54:	f7fd fa86 	bl	8004f64 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d911      	bls.n	8007a86 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00a      	beq.n	8007a86 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e01c      	b.n	8007ac0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d1df      	bne.n	8007a54 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	715a      	strb	r2, [r3, #5]
 8007aac:	e004      	b.n	8007ab8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2204      	movs	r2, #4
 8007ab2:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	711a      	strb	r2, [r3, #4]

  return status;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e07b      	b.n	8007bd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d108      	bne.n	8007af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aea:	d009      	beq.n	8007b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	61da      	str	r2, [r3, #28]
 8007af2:	e005      	b.n	8007b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fc fd2e 	bl	800457c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	431a      	orrs	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b84:	ea42 0103 	orr.w	r1, r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	f003 0104 	and.w	r1, r3, #4
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ba6:	f003 0210 	and.w	r2, r3, #16
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69da      	ldr	r2, [r3, #28]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e01a      	b.n	8007c22 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c02:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fc fd01 	bl	800460c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b088      	sub	sp, #32
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c3a:	f7fd f993 	bl	8004f64 <HAL_GetTick>
 8007c3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007c40:	88fb      	ldrh	r3, [r7, #6]
 8007c42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d001      	beq.n	8007c54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007c50:	2302      	movs	r3, #2
 8007c52:	e12a      	b.n	8007eaa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_SPI_Transmit+0x36>
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e122      	b.n	8007eaa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_SPI_Transmit+0x48>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e11b      	b.n	8007eaa <HAL_SPI_Transmit+0x280>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2200      	movs	r2, #0
 8007c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	88fa      	ldrh	r2, [r7, #6]
 8007c98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cc0:	d10f      	bne.n	8007ce2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cec:	2b40      	cmp	r3, #64	@ 0x40
 8007cee:	d007      	beq.n	8007d00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d08:	d152      	bne.n	8007db0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_SPI_Transmit+0xee>
 8007d12:	8b7b      	ldrh	r3, [r7, #26]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d145      	bne.n	8007da4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	881a      	ldrh	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d28:	1c9a      	adds	r2, r3, #2
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d3c:	e032      	b.n	8007da4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d112      	bne.n	8007d72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d50:	881a      	ldrh	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5c:	1c9a      	adds	r2, r3, #2
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d70:	e018      	b.n	8007da4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d72:	f7fd f8f7 	bl	8004f64 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d803      	bhi.n	8007d8a <HAL_SPI_Transmit+0x160>
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d102      	bne.n	8007d90 <HAL_SPI_Transmit+0x166>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e082      	b.n	8007eaa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1c7      	bne.n	8007d3e <HAL_SPI_Transmit+0x114>
 8007dae:	e053      	b.n	8007e58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <HAL_SPI_Transmit+0x194>
 8007db8:	8b7b      	ldrh	r3, [r7, #26]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d147      	bne.n	8007e4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	7812      	ldrb	r2, [r2, #0]
 8007dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007de4:	e033      	b.n	8007e4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d113      	bne.n	8007e1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	7812      	ldrb	r2, [r2, #0]
 8007e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e1a:	e018      	b.n	8007e4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e1c:	f7fd f8a2 	bl	8004f64 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d803      	bhi.n	8007e34 <HAL_SPI_Transmit+0x20a>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d102      	bne.n	8007e3a <HAL_SPI_Transmit+0x210>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e02d      	b.n	8007eaa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1c6      	bne.n	8007de6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f8bf 	bl	8007fe0 <SPI_EndRxTxTransaction>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3720      	adds	r7, #32
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ec0:	b2db      	uxtb	r3, r3
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ee0:	f7fd f840 	bl	8004f64 <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	4413      	add	r3, r2
 8007eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ef0:	f7fd f838 	bl	8004f64 <HAL_GetTick>
 8007ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ef6:	4b39      	ldr	r3, [pc, #228]	@ (8007fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	015b      	lsls	r3, r3, #5
 8007efc:	0d1b      	lsrs	r3, r3, #20
 8007efe:	69fa      	ldr	r2, [r7, #28]
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f06:	e054      	b.n	8007fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d050      	beq.n	8007fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f10:	f7fd f828 	bl	8004f64 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	69fa      	ldr	r2, [r7, #28]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d902      	bls.n	8007f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d13d      	bne.n	8007fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f3e:	d111      	bne.n	8007f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f48:	d004      	beq.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f52:	d107      	bne.n	8007f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6c:	d10f      	bne.n	8007f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e017      	b.n	8007fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d19b      	bne.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	2000001c 	.word	0x2000001c

08007fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff ff6a 	bl	8007ed0 <SPI_WaitFlagStateUntilTimeout>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008006:	f043 0220 	orr.w	r2, r3, #32
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e032      	b.n	8008078 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008012:	4b1b      	ldr	r3, [pc, #108]	@ (8008080 <SPI_EndRxTxTransaction+0xa0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a1b      	ldr	r2, [pc, #108]	@ (8008084 <SPI_EndRxTxTransaction+0xa4>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	0d5b      	lsrs	r3, r3, #21
 800801e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008022:	fb02 f303 	mul.w	r3, r2, r3
 8008026:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008030:	d112      	bne.n	8008058 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2200      	movs	r2, #0
 800803a:	2180      	movs	r1, #128	@ 0x80
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff ff47 	bl	8007ed0 <SPI_WaitFlagStateUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d016      	beq.n	8008076 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804c:	f043 0220 	orr.w	r2, r3, #32
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e00f      	b.n	8008078 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	3b01      	subs	r3, #1
 8008062:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806e:	2b80      	cmp	r3, #128	@ 0x80
 8008070:	d0f2      	beq.n	8008058 <SPI_EndRxTxTransaction+0x78>
 8008072:	e000      	b.n	8008076 <SPI_EndRxTxTransaction+0x96>
        break;
 8008074:	bf00      	nop
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	2000001c 	.word	0x2000001c
 8008084:	165e9f81 	.word	0x165e9f81

08008088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e041      	b.n	800811e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fc faca 	bl	8004648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f000 f8f4 	bl	80082b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800813a:	2b01      	cmp	r3, #1
 800813c:	d101      	bne.n	8008142 <HAL_TIM_ConfigClockSource+0x1c>
 800813e:	2302      	movs	r3, #2
 8008140:	e0b4      	b.n	80082ac <HAL_TIM_ConfigClockSource+0x186>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2202      	movs	r2, #2
 800814e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008160:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008168:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800817a:	d03e      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0xd4>
 800817c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008180:	f200 8087 	bhi.w	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008188:	f000 8086 	beq.w	8008298 <HAL_TIM_ConfigClockSource+0x172>
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008190:	d87f      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 8008192:	2b70      	cmp	r3, #112	@ 0x70
 8008194:	d01a      	beq.n	80081cc <HAL_TIM_ConfigClockSource+0xa6>
 8008196:	2b70      	cmp	r3, #112	@ 0x70
 8008198:	d87b      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 800819a:	2b60      	cmp	r3, #96	@ 0x60
 800819c:	d050      	beq.n	8008240 <HAL_TIM_ConfigClockSource+0x11a>
 800819e:	2b60      	cmp	r3, #96	@ 0x60
 80081a0:	d877      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 80081a2:	2b50      	cmp	r3, #80	@ 0x50
 80081a4:	d03c      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0xfa>
 80081a6:	2b50      	cmp	r3, #80	@ 0x50
 80081a8:	d873      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 80081aa:	2b40      	cmp	r3, #64	@ 0x40
 80081ac:	d058      	beq.n	8008260 <HAL_TIM_ConfigClockSource+0x13a>
 80081ae:	2b40      	cmp	r3, #64	@ 0x40
 80081b0:	d86f      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 80081b2:	2b30      	cmp	r3, #48	@ 0x30
 80081b4:	d064      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0x15a>
 80081b6:	2b30      	cmp	r3, #48	@ 0x30
 80081b8:	d86b      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d060      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0x15a>
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d867      	bhi.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d05c      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0x15a>
 80081c6:	2b10      	cmp	r3, #16
 80081c8:	d05a      	beq.n	8008280 <HAL_TIM_ConfigClockSource+0x15a>
 80081ca:	e062      	b.n	8008292 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081dc:	f000 f990 	bl	8008500 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80081ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	609a      	str	r2, [r3, #8]
      break;
 80081f8:	e04f      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800820a:	f000 f979 	bl	8008500 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800821c:	609a      	str	r2, [r3, #8]
      break;
 800821e:	e03c      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800822c:	461a      	mov	r2, r3
 800822e:	f000 f8ed 	bl	800840c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2150      	movs	r1, #80	@ 0x50
 8008238:	4618      	mov	r0, r3
 800823a:	f000 f946 	bl	80084ca <TIM_ITRx_SetConfig>
      break;
 800823e:	e02c      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800824c:	461a      	mov	r2, r3
 800824e:	f000 f90c 	bl	800846a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2160      	movs	r1, #96	@ 0x60
 8008258:	4618      	mov	r0, r3
 800825a:	f000 f936 	bl	80084ca <TIM_ITRx_SetConfig>
      break;
 800825e:	e01c      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800826c:	461a      	mov	r2, r3
 800826e:	f000 f8cd 	bl	800840c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2140      	movs	r1, #64	@ 0x40
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f926 	bl	80084ca <TIM_ITRx_SetConfig>
      break;
 800827e:	e00c      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4619      	mov	r1, r3
 800828a:	4610      	mov	r0, r2
 800828c:	f000 f91d 	bl	80084ca <TIM_ITRx_SetConfig>
      break;
 8008290:	e003      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	73fb      	strb	r3, [r7, #15]
      break;
 8008296:	e000      	b.n	800829a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008298:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a46      	ldr	r2, [pc, #280]	@ (80083e0 <TIM_Base_SetConfig+0x12c>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d013      	beq.n	80082f4 <TIM_Base_SetConfig+0x40>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d2:	d00f      	beq.n	80082f4 <TIM_Base_SetConfig+0x40>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a43      	ldr	r2, [pc, #268]	@ (80083e4 <TIM_Base_SetConfig+0x130>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00b      	beq.n	80082f4 <TIM_Base_SetConfig+0x40>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a42      	ldr	r2, [pc, #264]	@ (80083e8 <TIM_Base_SetConfig+0x134>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d007      	beq.n	80082f4 <TIM_Base_SetConfig+0x40>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a41      	ldr	r2, [pc, #260]	@ (80083ec <TIM_Base_SetConfig+0x138>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_Base_SetConfig+0x40>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a40      	ldr	r2, [pc, #256]	@ (80083f0 <TIM_Base_SetConfig+0x13c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d108      	bne.n	8008306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a35      	ldr	r2, [pc, #212]	@ (80083e0 <TIM_Base_SetConfig+0x12c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d02b      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008314:	d027      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a32      	ldr	r2, [pc, #200]	@ (80083e4 <TIM_Base_SetConfig+0x130>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d023      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a31      	ldr	r2, [pc, #196]	@ (80083e8 <TIM_Base_SetConfig+0x134>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d01f      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a30      	ldr	r2, [pc, #192]	@ (80083ec <TIM_Base_SetConfig+0x138>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d01b      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a2f      	ldr	r2, [pc, #188]	@ (80083f0 <TIM_Base_SetConfig+0x13c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d017      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a2e      	ldr	r2, [pc, #184]	@ (80083f4 <TIM_Base_SetConfig+0x140>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a2d      	ldr	r2, [pc, #180]	@ (80083f8 <TIM_Base_SetConfig+0x144>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00f      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a2c      	ldr	r2, [pc, #176]	@ (80083fc <TIM_Base_SetConfig+0x148>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00b      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a2b      	ldr	r2, [pc, #172]	@ (8008400 <TIM_Base_SetConfig+0x14c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d007      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a2a      	ldr	r2, [pc, #168]	@ (8008404 <TIM_Base_SetConfig+0x150>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d003      	beq.n	8008366 <TIM_Base_SetConfig+0xb2>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a29      	ldr	r2, [pc, #164]	@ (8008408 <TIM_Base_SetConfig+0x154>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d108      	bne.n	8008378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800836c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a10      	ldr	r2, [pc, #64]	@ (80083e0 <TIM_Base_SetConfig+0x12c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_Base_SetConfig+0xf8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a12      	ldr	r2, [pc, #72]	@ (80083f0 <TIM_Base_SetConfig+0x13c>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d103      	bne.n	80083b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d105      	bne.n	80083d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f023 0201 	bic.w	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	611a      	str	r2, [r3, #16]
  }
}
 80083d2:	bf00      	nop
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40000400 	.word	0x40000400
 80083e8:	40000800 	.word	0x40000800
 80083ec:	40000c00 	.word	0x40000c00
 80083f0:	40010400 	.word	0x40010400
 80083f4:	40014000 	.word	0x40014000
 80083f8:	40014400 	.word	0x40014400
 80083fc:	40014800 	.word	0x40014800
 8008400:	40001800 	.word	0x40001800
 8008404:	40001c00 	.word	0x40001c00
 8008408:	40002000 	.word	0x40002000

0800840c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f023 0201 	bic.w	r2, r3, #1
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f023 030a 	bic.w	r3, r3, #10
 8008448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800846a:	b480      	push	{r7}
 800846c:	b087      	sub	sp, #28
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	f023 0210 	bic.w	r2, r3, #16
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	031b      	lsls	r3, r3, #12
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	621a      	str	r2, [r3, #32]
}
 80084be:	bf00      	nop
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f043 0307 	orr.w	r3, r3, #7
 80084ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	609a      	str	r2, [r3, #8]
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
 800850c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800851a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	021a      	lsls	r2, r3, #8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	431a      	orrs	r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4313      	orrs	r3, r2
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	609a      	str	r2, [r3, #8]
}
 8008534:	bf00      	nop
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008554:	2302      	movs	r3, #2
 8008556:	e05a      	b.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800857e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a21      	ldr	r2, [pc, #132]	@ (800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d022      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085a4:	d01d      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d018      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1a      	ldr	r2, [pc, #104]	@ (8008628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00e      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a18      	ldr	r2, [pc, #96]	@ (800862c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d009      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a17      	ldr	r2, [pc, #92]	@ (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d004      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a15      	ldr	r2, [pc, #84]	@ (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d10c      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40010000 	.word	0x40010000
 8008620:	40000400 	.word	0x40000400
 8008624:	40000800 	.word	0x40000800
 8008628:	40000c00 	.word	0x40000c00
 800862c:	40010400 	.word	0x40010400
 8008630:	40014000 	.word	0x40014000
 8008634:	40001800 	.word	0x40001800

08008638 <malloc>:
 8008638:	4b02      	ldr	r3, [pc, #8]	@ (8008644 <malloc+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f000 b825 	b.w	800868c <_malloc_r>
 8008642:	bf00      	nop
 8008644:	20000028 	.word	0x20000028

08008648 <sbrk_aligned>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4e0f      	ldr	r6, [pc, #60]	@ (8008688 <sbrk_aligned+0x40>)
 800864c:	460c      	mov	r4, r1
 800864e:	6831      	ldr	r1, [r6, #0]
 8008650:	4605      	mov	r5, r0
 8008652:	b911      	cbnz	r1, 800865a <sbrk_aligned+0x12>
 8008654:	f000 f8ae 	bl	80087b4 <_sbrk_r>
 8008658:	6030      	str	r0, [r6, #0]
 800865a:	4621      	mov	r1, r4
 800865c:	4628      	mov	r0, r5
 800865e:	f000 f8a9 	bl	80087b4 <_sbrk_r>
 8008662:	1c43      	adds	r3, r0, #1
 8008664:	d103      	bne.n	800866e <sbrk_aligned+0x26>
 8008666:	f04f 34ff 	mov.w	r4, #4294967295
 800866a:	4620      	mov	r0, r4
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	1cc4      	adds	r4, r0, #3
 8008670:	f024 0403 	bic.w	r4, r4, #3
 8008674:	42a0      	cmp	r0, r4
 8008676:	d0f8      	beq.n	800866a <sbrk_aligned+0x22>
 8008678:	1a21      	subs	r1, r4, r0
 800867a:	4628      	mov	r0, r5
 800867c:	f000 f89a 	bl	80087b4 <_sbrk_r>
 8008680:	3001      	adds	r0, #1
 8008682:	d1f2      	bne.n	800866a <sbrk_aligned+0x22>
 8008684:	e7ef      	b.n	8008666 <sbrk_aligned+0x1e>
 8008686:	bf00      	nop
 8008688:	20025df4 	.word	0x20025df4

0800868c <_malloc_r>:
 800868c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008690:	1ccd      	adds	r5, r1, #3
 8008692:	f025 0503 	bic.w	r5, r5, #3
 8008696:	3508      	adds	r5, #8
 8008698:	2d0c      	cmp	r5, #12
 800869a:	bf38      	it	cc
 800869c:	250c      	movcc	r5, #12
 800869e:	2d00      	cmp	r5, #0
 80086a0:	4606      	mov	r6, r0
 80086a2:	db01      	blt.n	80086a8 <_malloc_r+0x1c>
 80086a4:	42a9      	cmp	r1, r5
 80086a6:	d904      	bls.n	80086b2 <_malloc_r+0x26>
 80086a8:	230c      	movs	r3, #12
 80086aa:	6033      	str	r3, [r6, #0]
 80086ac:	2000      	movs	r0, #0
 80086ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008788 <_malloc_r+0xfc>
 80086b6:	f000 f869 	bl	800878c <__malloc_lock>
 80086ba:	f8d8 3000 	ldr.w	r3, [r8]
 80086be:	461c      	mov	r4, r3
 80086c0:	bb44      	cbnz	r4, 8008714 <_malloc_r+0x88>
 80086c2:	4629      	mov	r1, r5
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff ffbf 	bl	8008648 <sbrk_aligned>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	4604      	mov	r4, r0
 80086ce:	d158      	bne.n	8008782 <_malloc_r+0xf6>
 80086d0:	f8d8 4000 	ldr.w	r4, [r8]
 80086d4:	4627      	mov	r7, r4
 80086d6:	2f00      	cmp	r7, #0
 80086d8:	d143      	bne.n	8008762 <_malloc_r+0xd6>
 80086da:	2c00      	cmp	r4, #0
 80086dc:	d04b      	beq.n	8008776 <_malloc_r+0xea>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	4639      	mov	r1, r7
 80086e2:	4630      	mov	r0, r6
 80086e4:	eb04 0903 	add.w	r9, r4, r3
 80086e8:	f000 f864 	bl	80087b4 <_sbrk_r>
 80086ec:	4581      	cmp	r9, r0
 80086ee:	d142      	bne.n	8008776 <_malloc_r+0xea>
 80086f0:	6821      	ldr	r1, [r4, #0]
 80086f2:	1a6d      	subs	r5, r5, r1
 80086f4:	4629      	mov	r1, r5
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff ffa6 	bl	8008648 <sbrk_aligned>
 80086fc:	3001      	adds	r0, #1
 80086fe:	d03a      	beq.n	8008776 <_malloc_r+0xea>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	442b      	add	r3, r5
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	f8d8 3000 	ldr.w	r3, [r8]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	bb62      	cbnz	r2, 8008768 <_malloc_r+0xdc>
 800870e:	f8c8 7000 	str.w	r7, [r8]
 8008712:	e00f      	b.n	8008734 <_malloc_r+0xa8>
 8008714:	6822      	ldr	r2, [r4, #0]
 8008716:	1b52      	subs	r2, r2, r5
 8008718:	d420      	bmi.n	800875c <_malloc_r+0xd0>
 800871a:	2a0b      	cmp	r2, #11
 800871c:	d917      	bls.n	800874e <_malloc_r+0xc2>
 800871e:	1961      	adds	r1, r4, r5
 8008720:	42a3      	cmp	r3, r4
 8008722:	6025      	str	r5, [r4, #0]
 8008724:	bf18      	it	ne
 8008726:	6059      	strne	r1, [r3, #4]
 8008728:	6863      	ldr	r3, [r4, #4]
 800872a:	bf08      	it	eq
 800872c:	f8c8 1000 	streq.w	r1, [r8]
 8008730:	5162      	str	r2, [r4, r5]
 8008732:	604b      	str	r3, [r1, #4]
 8008734:	4630      	mov	r0, r6
 8008736:	f000 f82f 	bl	8008798 <__malloc_unlock>
 800873a:	f104 000b 	add.w	r0, r4, #11
 800873e:	1d23      	adds	r3, r4, #4
 8008740:	f020 0007 	bic.w	r0, r0, #7
 8008744:	1ac2      	subs	r2, r0, r3
 8008746:	bf1c      	itt	ne
 8008748:	1a1b      	subne	r3, r3, r0
 800874a:	50a3      	strne	r3, [r4, r2]
 800874c:	e7af      	b.n	80086ae <_malloc_r+0x22>
 800874e:	6862      	ldr	r2, [r4, #4]
 8008750:	42a3      	cmp	r3, r4
 8008752:	bf0c      	ite	eq
 8008754:	f8c8 2000 	streq.w	r2, [r8]
 8008758:	605a      	strne	r2, [r3, #4]
 800875a:	e7eb      	b.n	8008734 <_malloc_r+0xa8>
 800875c:	4623      	mov	r3, r4
 800875e:	6864      	ldr	r4, [r4, #4]
 8008760:	e7ae      	b.n	80086c0 <_malloc_r+0x34>
 8008762:	463c      	mov	r4, r7
 8008764:	687f      	ldr	r7, [r7, #4]
 8008766:	e7b6      	b.n	80086d6 <_malloc_r+0x4a>
 8008768:	461a      	mov	r2, r3
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	42a3      	cmp	r3, r4
 800876e:	d1fb      	bne.n	8008768 <_malloc_r+0xdc>
 8008770:	2300      	movs	r3, #0
 8008772:	6053      	str	r3, [r2, #4]
 8008774:	e7de      	b.n	8008734 <_malloc_r+0xa8>
 8008776:	230c      	movs	r3, #12
 8008778:	6033      	str	r3, [r6, #0]
 800877a:	4630      	mov	r0, r6
 800877c:	f000 f80c 	bl	8008798 <__malloc_unlock>
 8008780:	e794      	b.n	80086ac <_malloc_r+0x20>
 8008782:	6005      	str	r5, [r0, #0]
 8008784:	e7d6      	b.n	8008734 <_malloc_r+0xa8>
 8008786:	bf00      	nop
 8008788:	20025df8 	.word	0x20025df8

0800878c <__malloc_lock>:
 800878c:	4801      	ldr	r0, [pc, #4]	@ (8008794 <__malloc_lock+0x8>)
 800878e:	f000 b84b 	b.w	8008828 <__retarget_lock_acquire_recursive>
 8008792:	bf00      	nop
 8008794:	20025f38 	.word	0x20025f38

08008798 <__malloc_unlock>:
 8008798:	4801      	ldr	r0, [pc, #4]	@ (80087a0 <__malloc_unlock+0x8>)
 800879a:	f000 b846 	b.w	800882a <__retarget_lock_release_recursive>
 800879e:	bf00      	nop
 80087a0:	20025f38 	.word	0x20025f38

080087a4 <memset>:
 80087a4:	4402      	add	r2, r0
 80087a6:	4603      	mov	r3, r0
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d100      	bne.n	80087ae <memset+0xa>
 80087ac:	4770      	bx	lr
 80087ae:	f803 1b01 	strb.w	r1, [r3], #1
 80087b2:	e7f9      	b.n	80087a8 <memset+0x4>

080087b4 <_sbrk_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d06      	ldr	r5, [pc, #24]	@ (80087d0 <_sbrk_r+0x1c>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	602b      	str	r3, [r5, #0]
 80087c0:	f7fc faf8 	bl	8004db4 <_sbrk>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_sbrk_r+0x1a>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_sbrk_r+0x1a>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20025f34 	.word	0x20025f34

080087d4 <__errno>:
 80087d4:	4b01      	ldr	r3, [pc, #4]	@ (80087dc <__errno+0x8>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000028 	.word	0x20000028

080087e0 <__libc_init_array>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008818 <__libc_init_array+0x38>)
 80087e4:	4c0d      	ldr	r4, [pc, #52]	@ (800881c <__libc_init_array+0x3c>)
 80087e6:	1b64      	subs	r4, r4, r5
 80087e8:	10a4      	asrs	r4, r4, #2
 80087ea:	2600      	movs	r6, #0
 80087ec:	42a6      	cmp	r6, r4
 80087ee:	d109      	bne.n	8008804 <__libc_init_array+0x24>
 80087f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008820 <__libc_init_array+0x40>)
 80087f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008824 <__libc_init_array+0x44>)
 80087f4:	f000 f81a 	bl	800882c <_init>
 80087f8:	1b64      	subs	r4, r4, r5
 80087fa:	10a4      	asrs	r4, r4, #2
 80087fc:	2600      	movs	r6, #0
 80087fe:	42a6      	cmp	r6, r4
 8008800:	d105      	bne.n	800880e <__libc_init_array+0x2e>
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	f855 3b04 	ldr.w	r3, [r5], #4
 8008808:	4798      	blx	r3
 800880a:	3601      	adds	r6, #1
 800880c:	e7ee      	b.n	80087ec <__libc_init_array+0xc>
 800880e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008812:	4798      	blx	r3
 8008814:	3601      	adds	r6, #1
 8008816:	e7f2      	b.n	80087fe <__libc_init_array+0x1e>
 8008818:	0800a334 	.word	0x0800a334
 800881c:	0800a334 	.word	0x0800a334
 8008820:	0800a334 	.word	0x0800a334
 8008824:	0800a338 	.word	0x0800a338

08008828 <__retarget_lock_acquire_recursive>:
 8008828:	4770      	bx	lr

0800882a <__retarget_lock_release_recursive>:
 800882a:	4770      	bx	lr

0800882c <_init>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr

08008838 <_fini>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	bf00      	nop
 800883c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883e:	bc08      	pop	{r3}
 8008840:	469e      	mov	lr, r3
 8008842:	4770      	bx	lr
